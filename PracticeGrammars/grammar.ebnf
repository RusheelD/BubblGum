program = expression_or_definition, { expression_or_definition };
expression_or_definition = expression | class_definition | function_definition;

class_definition = "Gum", identifier, "{", { class_member }, "}";
class_member = [ visibility ], function_definition | variable_definition;
visibility = "bold" | "subtle";

function_definition = "recipe:", identifier, "(", [ parameter_list ], ")", "<", [ return_list ], ">", "{", { expression_or_definition }, "}";
parameter_list = type, identifier, { ",", type, identifier };
return_list = type, [identifier], { ",", type, [identifier] };

variable_definition = type, identifier, [ "::", value_expression ];

expression = assignment | if_statement | repeat_loop | while_loop | pop_loop | return_statement;
assignment = identifier, "::", value_expression;

if_statement = "if", "(", value_expression, ")", "{", { expression_or_definition }, "}", { "elif", "(", value_expression, ")", "{", { expression_or_definition }, "}" }, [ "else", "{", { expression_or_definition }, "}" ];
repeat_loop = repeat_up_loop | repeat_down_loop;
repeat_up_loop = [ identifier, ":" ], "repeatUp", "(", integer | identifier, [ integer | identifier ], ")", "{", { expression_or_definition }, "}";
repeat_down_loop = [ identifier, ":" ], "repeatDown", "(", integer | identifier, [ integer | identifier ], ")", "{", { expression_or_definition }, "}";
while_loop = "while", "(", value_expression, ")", "{", { expression_or_definition }, "}";
pop_loop = "pop", "flavors", identifier, "in", identifier, "{", { expression_or_definition }"}" 
return_statement = ("pop", value_expression, "=>", integer | identifier) | ("pop", "flavors", identifier, "in", identifier, "=>", "popstream");
identifier = (letter, { letter | digit | "_" }) | identifier, "->", identifier;
value_expression = identifier | number | string | char | boolean_expr | math_expr |