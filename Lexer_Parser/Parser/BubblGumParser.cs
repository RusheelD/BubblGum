//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Lexer_Parser/Parser/BubblGum.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BubblGumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		THIS=1, SWEETS=2, RECIPE=3, CANDY=4, GUM=5, FLAVOR=6, FLAVORS=7, SUGAR=8, 
		CARB=9, CAL=10, KCAL=11, YUM=12, BOLD=13, SUBTLE=14, BLAND=15, POP=16, 
		SIZE=17, EMPTY=18, INPUT=19, PURE=20, STICKY=21, WRAPPER=22, PACK=23, 
		SUGARPACK=24, CARBPACK=25, CALPACK=26, KCALPACK=27, YUMPACK=28, YUP=29, 
		NOPE=30, AND=31, OR=32, XOR=33, XNOR=34, FLAVORLESS=35, IF=36, ELSE=37, 
		ELIF=38, WHILE=39, REPEAT_UP=40, REPEAT_DOWN=41, POPSTREAM=42, NOT=43, 
		IN=44, IS=45, ASSIGN=46, LEFT_PAREN=47, RIGHT_PAREN=48, LEFT_SQUARE_BRACKET=49, 
		RIGHT_SQUARE_BRACKET=50, LEFT_CURLY_BRACKET=51, RIGHT_CURLY_BRACKET=52, 
		LEFT_ANGLE_BRACKET=53, RIGHT_ANGLE_BRACKET=54, COMMA=55, SEMICOLON=56, 
		COLON=57, ELIPSES=58, DOT=59, PRINT=60, DEBUG=61, DOUBLE_QUOTE=62, SINGLE_QUOTE=63, 
		BACK_TICK=64, IMMUTABLE=65, GT_EQ=66, LT_EQ=67, LEFT_SHIFT=68, RIGHT_SHIFT=69, 
		NOT_EQ_1=70, NOT_EQ_2=71, PLUS_COLON=72, MINUS_COLON=73, THIN_ARROW=74, 
		THICK_ARROW=75, SUBCLASS_OF=76, EQUALS=77, AND_OP=78, OR_OP=79, NOT_OP=80, 
		XOR_OP=81, PLUS=82, MINUS=83, POWER=84, MULTIPLY=85, DIVIDE=86, MODULO=87, 
		IDENTIFIER=88, LETTER=89, INTEGER_LITERAL=90, STRING_LITERAL=91, CHAR_LITERAL=92, 
		ESCAPE_SEQUENCE=93, WHITE=94, EOL=95, SINGLE_LINE_COMMENT=96, MULTI_LINE_COMMENT=97;
	public const int
		RULE_program = 0, RULE_class = 1, RULE_interface = 2, RULE_interface_member = 3, 
		RULE_class_member = 4, RULE_visibility = 5, RULE_struct = 6, RULE_function = 7, 
		RULE_function_header = 8, RULE_parameters = 9, RULE_outputs = 10, RULE_scope_body = 11, 
		RULE_statement_list = 12, RULE_statement = 13, RULE_single_statement = 14, 
		RULE_print_statement = 15, RULE_debug_statement = 16, RULE_base_statement = 17, 
		RULE_return_statement = 18, RULE_primitive_declaration = 19, RULE_assignment = 20, 
		RULE_variable_inc_dec = 21, RULE_if_statement = 22, RULE_elif_statement = 23, 
		RULE_else_statement = 24, RULE_loop = 25, RULE_while_loop = 26, RULE_repeat_loop = 27, 
		RULE_pop_loop = 28, RULE_expression = 29, RULE_double = 30, RULE_int = 31, 
		RULE_boolean = 32, RULE_identifier = 33, RULE_type = 34, RULE_array = 35, 
		RULE_primitive = 36, RULE_tuple = 37, RULE_primitive_pack = 38, RULE_any_array = 39;
	public static readonly string[] ruleNames = {
		"program", "class", "interface", "interface_member", "class_member", "visibility", 
		"struct", "function", "function_header", "parameters", "outputs", "scope_body", 
		"statement_list", "statement", "single_statement", "print_statement", 
		"debug_statement", "base_statement", "return_statement", "primitive_declaration", 
		"assignment", "variable_inc_dec", "if_statement", "elif_statement", "else_statement", 
		"loop", "while_loop", "repeat_loop", "pop_loop", "expression", "double", 
		"int", "boolean", "identifier", "type", "array", "primitive", "tuple", 
		"primitive_pack", "any_array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'gum'", "'sweets'", "'recipe'", "'candy'", "'Gum'", "'flavor'", 
		"'flavors'", "'sugar'", "'carb'", "'cal'", "'kcal'", "'yum'", "'bold'", 
		"'subtle'", "'bland'", "'pop'", "'size'", "'empty'", "'input'", "'pure'", 
		"'sticky'", "'Wrapper'", "'pack'", "'sugarpack'", "'carbpack'", "'calpack'", 
		"'kcalpack'", "'yumpack'", "'yup'", "'nope'", "'and'", "'or'", "'xor'", 
		"'xnor'", null, "'if'", "'else'", "'elif'", "'while'", "'repeatUp'", "'repeatDown'", 
		"'popstream'", "'not'", "'in'", "'is'", "'::'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "','", "';'", "':'", "'...'", "'.'", "'!'", 
		"'?'", "'\"'", "'''", "'`'", "'$'", "'>='", "'<='", "'<:'", "':>'", "'<>'", 
		"'~='", "'+:'", "'-:'", "'->'", "'=>'", "':<'", "'='", "'&'", "'|'", "'~'", 
		"'^'", "'+'", "'-'", "'**'", "'*'", "'/'", "'%'", null, null, null, null, 
		null, null, null, "'\\r\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "THIS", "SWEETS", "RECIPE", "CANDY", "GUM", "FLAVOR", "FLAVORS", 
		"SUGAR", "CARB", "CAL", "KCAL", "YUM", "BOLD", "SUBTLE", "BLAND", "POP", 
		"SIZE", "EMPTY", "INPUT", "PURE", "STICKY", "WRAPPER", "PACK", "SUGARPACK", 
		"CARBPACK", "CALPACK", "KCALPACK", "YUMPACK", "YUP", "NOPE", "AND", "OR", 
		"XOR", "XNOR", "FLAVORLESS", "IF", "ELSE", "ELIF", "WHILE", "REPEAT_UP", 
		"REPEAT_DOWN", "POPSTREAM", "NOT", "IN", "IS", "ASSIGN", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", 
		"RIGHT_CURLY_BRACKET", "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", "COMMA", 
		"SEMICOLON", "COLON", "ELIPSES", "DOT", "PRINT", "DEBUG", "DOUBLE_QUOTE", 
		"SINGLE_QUOTE", "BACK_TICK", "IMMUTABLE", "GT_EQ", "LT_EQ", "LEFT_SHIFT", 
		"RIGHT_SHIFT", "NOT_EQ_1", "NOT_EQ_2", "PLUS_COLON", "MINUS_COLON", "THIN_ARROW", 
		"THICK_ARROW", "SUBCLASS_OF", "EQUALS", "AND_OP", "OR_OP", "NOT_OP", "XOR_OP", 
		"PLUS", "MINUS", "POWER", "MULTIPLY", "DIVIDE", "MODULO", "IDENTIFIER", 
		"LETTER", "INTEGER_LITERAL", "STRING_LITERAL", "CHAR_LITERAL", "ESCAPE_SEQUENCE", 
		"WHITE", "EOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BubblGum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BubblGumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BubblGumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BubblGumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BubblGumParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext[] @interface() {
			return GetRuleContexts<InterfaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface(int i) {
			return GetRuleContext<InterfaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11972137576431486L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				State = 85;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 80;
					@class();
					}
					break;
				case 2:
					{
					State = 81;
					@interface();
					}
					break;
				case 3:
					{
					State = 82;
					function();
					}
					break;
				case 4:
					{
					State = 83;
					@struct();
					}
					break;
				case 5:
					{
					State = 84;
					statement();
					}
					break;
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUM() { return GetToken(BubblGumParser.GUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext[] class_member() {
			return GetRuleContexts<Class_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext class_member(int i) {
			return GetRuleContext<Class_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 2, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 92;
				Match(STICKY);
				}
			}

			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) {
				{
				State = 95;
				visibility();
				}
			}

			State = 98;
			Match(GUM);
			State = 99;
			Match(IDENTIFIER);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 100;
				Match(COLON);
				State = 101;
				Match(IDENTIFIER);
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 102;
					Match(COMMA);
					State = 103;
					Match(IDENTIFIER);
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 111;
			Match(LEFT_CURLY_BRACKET);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9719719283195726L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				{
				State = 112;
				class_member();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(BubblGumParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext[] interface_member() {
			return GetRuleContexts<Interface_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext interface_member(int i) {
			return GetRuleContext<Interface_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 4, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 120;
				Match(STICKY);
				}
			}

			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) {
				{
				State = 123;
				visibility();
				}
			}

			State = 126;
			Match(WRAPPER);
			State = 127;
			Match(IDENTIFIER);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 128;
				Match(COLON);
				State = 129;
				Match(IDENTIFIER);
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 130;
					Match(COMMA);
					State = 131;
					Match(IDENTIFIER);
					}
					}
					State = 136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 139;
			Match(LEFT_CURLY_BRACKET);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9719719283195726L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				{
				State = 140;
				interface_member();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 146;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Interface_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface_member(this);
		}
	}

	[RuleVersion(0)]
	public Interface_memberContext interface_member() {
		Interface_memberContext _localctx = new Interface_memberContext(Context, State);
		EnterRule(_localctx, 6, RULE_interface_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 148;
				Match(STICKY);
				}
			}

			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) {
				{
				State = 151;
				visibility();
				}
			}

			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 154;
				function_header();
				}
				break;
			case 2:
				{
				{
				State = 155;
				primitive_declaration();
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 156;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 159;
				assignment();
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 160;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Class_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass_member(this);
		}
	}

	[RuleVersion(0)]
	public Class_memberContext class_member() {
		Class_memberContext _localctx = new Class_memberContext(Context, State);
		EnterRule(_localctx, 8, RULE_class_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 165;
				Match(STICKY);
				}
			}

			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) {
				{
				State = 168;
				visibility();
				}
			}

			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 171;
				function();
				}
				break;
			case 2:
				{
				{
				State = 172;
				primitive_declaration();
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 173;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 176;
				assignment();
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 177;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOLD() { return GetToken(BubblGumParser.BOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTLE() { return GetToken(BubblGumParser.SUBTLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLAND() { return GetToken(BubblGumParser.BLAND, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 10, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANDY() { return GetToken(BubblGumParser.CANDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext[] primitive_declaration() {
			return GetRuleContexts<Primitive_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration(int i) {
			return GetRuleContext<Primitive_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(CANDY);
			State = 185;
			Match(COLON);
			State = 186;
			Match(IDENTIFIER);
			State = 187;
			Match(LEFT_CURLY_BRACKET);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9719719281041222L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				State = 190;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 188;
					primitive_declaration();
					}
					break;
				case 2:
					{
					State = 189;
					assignment();
					}
					break;
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			function_header();
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 198;
				Match(COLON);
				State = 199;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 200;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECIPE() { return GetToken(BubblGumParser.RECIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputsContext outputs() {
			return GetRuleContext<OutputsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction_header(this);
		}
	}

	[RuleVersion(0)]
	public Function_headerContext function_header() {
		Function_headerContext _localctx = new Function_headerContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(RECIPE);
			State = 204;
			Match(COLON);
			State = 205;
			Match(IDENTIFIER);
			State = 206;
			parameters();
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 207;
				outputs();
				}
				break;
			case 2:
				{
				State = 208;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIPSES() { return GetTokens(BubblGumParser.ELIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIPSES(int i) {
			return GetToken(BubblGumParser.ELIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 18, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(LEFT_PAREN);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9570149729312512L) != 0) || _la==IMMUTABLE || _la==IDENTIFIER) {
				{
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMMUTABLE) {
					{
					State = 212;
					Match(IMMUTABLE);
					}
				}

				State = 215;
				type();
				State = 216;
				Match(IDENTIFIER);
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELIPSES) {
					{
					State = 217;
					Match(ELIPSES);
					}
				}

				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 220;
					Match(COMMA);
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 221;
						Match(IMMUTABLE);
						}
					}

					State = 224;
					type();
					State = 225;
					Match(IDENTIFIER);
					State = 227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELIPSES) {
						{
						State = 226;
						Match(ELIPSES);
						}
					}

					}
					}
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 236;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIPSES() { return GetTokens(BubblGumParser.ELIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIPSES(int i) {
			return GetToken(BubblGumParser.ELIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public OutputsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterOutputs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitOutputs(this);
		}
	}

	[RuleVersion(0)]
	public OutputsContext outputs() {
		OutputsContext _localctx = new OutputsContext(Context, State);
		EnterRule(_localctx, 20, RULE_outputs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(LEFT_ANGLE_BRACKET);
			{
			{
			State = 239;
			type();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 240;
				Match(IDENTIFIER);
				}
			}

			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELIPSES) {
				{
				State = 243;
				Match(ELIPSES);
				}
			}

			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 246;
				Match(COMMA);
				State = 247;
				type();
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 248;
					Match(IDENTIFIER);
					}
				}

				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELIPSES) {
					{
					State = 251;
					Match(ELIPSES);
					}
				}

				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
			State = 259;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scope_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		public Scope_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterScope_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitScope_body(this);
		}
	}

	[RuleVersion(0)]
	public Scope_bodyContext scope_body() {
		Scope_bodyContext _localctx = new Scope_bodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_scope_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(LEFT_CURLY_BRACKET);
			State = 262;
			statement_list();
			State = 263;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11972137570082630L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				{
				State = 265;
				statement();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Debug_statementContext debug_statement() {
			return GetRuleContext<Debug_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public Single_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitSingle_statement(this);
		}
	}

	[RuleVersion(0)]
	public Single_statementContext single_statement() {
		Single_statementContext _localctx = new Single_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_single_statement);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				base_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				print_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 277;
				debug_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 278;
				if_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 279;
				loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PRINT() { return GetTokens(BubblGumParser.PRINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT(int i) {
			return GetToken(BubblGumParser.PRINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_print_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(LEFT_PAREN);
			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 283;
				base_statement();
				}
				break;
			case 2:
				{
				State = 284;
				expression(0);
				}
				break;
			}
			State = 287;
			Match(RIGHT_PAREN);
			State = 288;
			Match(PRINT);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRINT) {
				{
				State = 289;
				Match(PRINT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Debug_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEBUG() { return GetTokens(BubblGumParser.DEBUG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG(int i) {
			return GetToken(BubblGumParser.DEBUG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Debug_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debug_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDebug_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDebug_statement(this);
		}
	}

	[RuleVersion(0)]
	public Debug_statementContext debug_statement() {
		Debug_statementContext _localctx = new Debug_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_debug_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(LEFT_PAREN);
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 293;
				base_statement();
				}
				break;
			case 2:
				{
				State = 294;
				expression(0);
				}
				break;
			}
			State = 297;
			Match(RIGHT_PAREN);
			State = 298;
			Match(DEBUG);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEBUG) {
				{
				State = 299;
				Match(DEBUG);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_inc_decContext variable_inc_dec() {
			return GetRuleContext<Variable_inc_decContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Base_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBase_statement(this);
		}
	}

	[RuleVersion(0)]
	public Base_statementContext base_statement() {
		Base_statementContext _localctx = new Base_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_base_statement);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 302;
				primitive_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 304;
				variable_inc_dec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 305;
				return_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POPSTREAM() { return GetToken(BubblGumParser.POPSTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_return_statement);
		int _la;
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 308;
				Match(POP);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 309;
				Match(POP);
				State = 310;
				expression(0);
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THICK_ARROW) {
					{
					State = 311;
					Match(THICK_ARROW);
					State = 312;
					expression(0);
					}
				}

				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 315;
				Match(POP);
				State = 316;
				expression(0);
				State = 317;
				Match(THICK_ARROW);
				State = 318;
				Match(POPSTREAM);
				State = 323;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 319;
					Match(LEFT_PAREN);
					State = 320;
					expression(0);
					State = 321;
					Match(RIGHT_PAREN);
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext[] primitive() {
			return GetRuleContexts<PrimitiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive(int i) {
			return GetRuleContext<PrimitiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Primitive_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_declarationContext primitive_declaration() {
		Primitive_declarationContext _localctx = new Primitive_declarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_primitive_declaration);
		int _la;
		try {
			State = 347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 327;
				primitive();
				State = 328;
				Match(IDENTIFIER);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 329;
					Match(COMMA);
					State = 330;
					primitive();
					State = 331;
					Match(IDENTIFIER);
					}
					}
					State = 337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 338;
				primitive();
				State = 339;
				Match(IDENTIFIER);
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 340;
					Match(COMMA);
					State = 341;
					Match(IDENTIFIER);
					}
					}
					State = 346;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BubblGumParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				{
				State = 356;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 349;
						Match(IMMUTABLE);
						}
					}

					State = 354;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 352;
						type();
						}
						break;
					case FLAVOR:
						{
						State = 353;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 358;
				Match(IDENTIFIER);
				}
				}
				break;
			case 2:
				{
				State = 359;
				expression(0);
				}
				break;
			}
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 362;
				Match(COMMA);
				State = 374;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					{
					State = 370;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						State = 364;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==IMMUTABLE) {
							{
							State = 363;
							Match(IMMUTABLE);
							}
						}

						State = 368;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SUGAR:
						case CARB:
						case CAL:
						case KCAL:
						case YUM:
						case PURE:
						case SUGARPACK:
						case CARBPACK:
						case CALPACK:
						case KCALPACK:
						case YUMPACK:
						case LEFT_SQUARE_BRACKET:
						case LEFT_ANGLE_BRACKET:
						case IDENTIFIER:
							{
							State = 366;
							type();
							}
							break;
						case FLAVOR:
							{
							State = 367;
							Match(FLAVOR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					State = 372;
					Match(IDENTIFIER);
					}
					}
					break;
				case 2:
					{
					State = 373;
					expression(0);
					}
					break;
				}
				}
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 381;
			Match(ASSIGN);
			State = 382;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_inc_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_COLON() { return GetToken(BubblGumParser.PLUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_COLON() { return GetToken(BubblGumParser.MINUS_COLON, 0); }
		public Variable_inc_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_inc_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVariable_inc_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVariable_inc_dec(this);
		}
	}

	[RuleVersion(0)]
	public Variable_inc_decContext variable_inc_dec() {
		Variable_inc_decContext _localctx = new Variable_inc_decContext(Context, State);
		EnterRule(_localctx, 42, RULE_variable_inc_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			expression(0);
			State = 385;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_COLON || _la==MINUS_COLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 386;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BubblGumParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext[] elif_statement() {
			return GetRuleContexts<Elif_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext elif_statement(int i) {
			return GetRuleContext<Elif_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(IF);
			State = 389;
			expression(0);
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 390;
				Match(COLON);
				State = 391;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 392;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 398;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 395;
					elif_statement();
					}
					} 
				}
				State = 400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 401;
				else_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(BubblGumParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Elif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElif_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElif_statement(this);
		}
	}

	[RuleVersion(0)]
	public Elif_statementContext elif_statement() {
		Elif_statementContext _localctx = new Elif_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_elif_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 404;
			Match(ELIF);
			State = 405;
			expression(0);
			State = 409;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 406;
				Match(COLON);
				State = 407;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 408;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BubblGumParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_else_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 411;
			Match(ELSE);
			State = 415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 412;
				Match(COLON);
				State = 413;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 414;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_loopContext repeat_loop() {
			return GetRuleContext<Repeat_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pop_loopContext pop_loop() {
			return GetRuleContext<Pop_loopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 50, RULE_loop);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417;
				while_loop();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418;
				repeat_loop();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 419;
				pop_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BubblGumParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 52, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(WHILE);
			State = 423;
			expression(0);
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 424;
				Match(COLON);
				State = 425;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 426;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(BubblGumParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(BubblGumParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BubblGumParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_DOWN() { return GetToken(BubblGumParser.REPEAT_DOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_UP() { return GetToken(BubblGumParser.REPEAT_UP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER_LITERAL() { return GetTokens(BubblGumParser.INTEGER_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL(int i) {
			return GetToken(BubblGumParser.INTEGER_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Repeat_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterRepeat_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitRepeat_loop(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_loopContext repeat_loop() {
		Repeat_loopContext _localctx = new Repeat_loopContext(Context, State);
		EnterRule(_localctx, 54, RULE_repeat_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(IDENTIFIER);
			State = 430;
			Match(COLON);
			State = 431;
			_la = TokenStream.LA(1);
			if ( !(_la==REPEAT_UP || _la==REPEAT_DOWN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 432;
			Match(LEFT_PAREN);
			State = 435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 433;
				Match(INTEGER_LITERAL);
				}
				break;
			case 2:
				{
				State = 434;
				expression(0);
				}
				break;
			}
			State = 437;
			Match(COMMA);
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 438;
				Match(INTEGER_LITERAL);
				}
				break;
			case 2:
				{
				State = 439;
				expression(0);
				}
				break;
			}
			State = 442;
			Match(RIGHT_PAREN);
			State = 446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 443;
				Match(COLON);
				State = 444;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 445;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pop_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVORS() { return GetToken(BubblGumParser.FLAVORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BubblGumParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public Pop_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pop_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPop_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPop_loop(this);
		}
	}

	[RuleVersion(0)]
	public Pop_loopContext pop_loop() {
		Pop_loopContext _localctx = new Pop_loopContext(Context, State);
		EnterRule(_localctx, 56, RULE_pop_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(POP);
			State = 449;
			Match(FLAVORS);
			State = 450;
			Match(IDENTIFIER);
			State = 451;
			Match(IN);
			State = 452;
			expression(0);
			State = 453;
			Match(THICK_ARROW);
			State = 456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				{
				State = 454;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 455;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWEETS() { return GetToken(BubblGumParser.SWEETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW() { return GetToken(BubblGumParser.THIN_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BubblGumParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_OP() { return GetToken(BubblGumParser.NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BubblGumParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(BubblGumParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVORLESS() { return GetToken(BubblGumParser.FLAVORLESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(BubblGumParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(BubblGumParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT() { return GetToken(BubblGumParser.LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT() { return GetToken(BubblGumParser.RIGHT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(BubblGumParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(BubblGumParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(BubblGumParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(BubblGumParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(BubblGumParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_1() { return GetToken(BubblGumParser.NOT_EQ_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_2() { return GetToken(BubblGumParser.NOT_EQ_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BubblGumParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_OF() { return GetToken(BubblGumParser.SUBCLASS_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BubblGumParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(BubblGumParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(BubblGumParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_OP() { return GetToken(BubblGumParser.XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BubblGumParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(BubblGumParser.OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(BubblGumParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(BubblGumParser.EMPTY, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 459;
				Match(LEFT_PAREN);
				State = 460;
				expression(0);
				State = 461;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 463;
				Match(SWEETS);
				State = 464;
				Match(THIN_ARROW);
				State = 465;
				expression(25);
				}
				break;
			case 3:
				{
				State = 466;
				array();
				State = 467;
				Match(LEFT_PAREN);
				State = 468;
				expression(0);
				State = 469;
				Match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				State = 471;
				Match(LEFT_ANGLE_BRACKET);
				State = 472;
				expression(0);
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 473;
					Match(COMMA);
					State = 474;
					expression(0);
					}
					}
					State = 479;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 480;
				Match(RIGHT_ANGLE_BRACKET);
				}
				break;
			case 5:
				{
				State = 482;
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==NOT_OP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 483;
				expression(17);
				}
				break;
			case 6:
				{
				State = 484;
				boolean();
				}
				break;
			case 7:
				{
				State = 485;
				identifier();
				}
				break;
			case 8:
				{
				State = 486;
				@double();
				}
				break;
			case 9:
				{
				State = 487;
				@int();
				}
				break;
			case 10:
				{
				State = 488;
				Match(STRING_LITERAL);
				}
				break;
			case 11:
				{
				State = 489;
				Match(CHAR_LITERAL);
				}
				break;
			case 12:
				{
				State = 490;
				Match(FLAVORLESS);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 552;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 550;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 493;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 494;
						Match(THIN_ARROW);
						State = 495;
						expression(22);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 496;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 497;
						_la = TokenStream.LA(1);
						if ( !(_la==POWER || _la==MODULO) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 498;
						expression(17);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 499;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 500;
						_la = TokenStream.LA(1);
						if ( !(_la==LEFT_SHIFT || _la==RIGHT_SHIFT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 501;
						expression(16);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 502;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 503;
						_la = TokenStream.LA(1);
						if ( !(_la==MULTIPLY || _la==DIVIDE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 504;
						expression(15);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 505;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 506;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 507;
						expression(14);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 508;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 509;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 24579L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 510;
						expression(13);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 511;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 512;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 6543114241L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 513;
						expression(12);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 514;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 515;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==AND_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 516;
						expression(11);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 517;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 518;
						_la = TokenStream.LA(1);
						if ( !(_la==XOR || _la==XOR_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 519;
						expression(10);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 520;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 521;
						_la = TokenStream.LA(1);
						if ( !(_la==OR || _la==OR_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 522;
						expression(9);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 523;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 524;
						Match(LEFT_SQUARE_BRACKET);
						State = 525;
						expression(0);
						State = 526;
						Match(RIGHT_SQUARE_BRACKET);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 528;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 529;
						Match(THIN_ARROW);
						State = 530;
						Match(SIZE);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 531;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 532;
						Match(THIN_ARROW);
						State = 533;
						Match(EMPTY);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 534;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 535;
						Match(LEFT_PAREN);
						State = 547;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
						case 1:
							{
							State = 537;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9719719281033222L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 7437L) != 0)) {
								{
								State = 536;
								expression(0);
								}
							}

							}
							break;
						case 2:
							{
							{
							State = 539;
							expression(0);
							State = 544;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 540;
								Match(COMMA);
								State = 541;
								expression(0);
								}
								}
								State = 546;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
							}
							break;
						}
						State = 549;
						Match(RIGHT_PAREN);
						}
						break;
					}
					} 
				}
				State = 554;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER_LITERAL() { return GetTokens(BubblGumParser.INTEGER_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL(int i) {
			return GetToken(BubblGumParser.INTEGER_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BubblGumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDouble(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDouble(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 60, RULE_double);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 555;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 558;
			Match(INTEGER_LITERAL);
			State = 559;
			Match(DOT);
			State = 561;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 560;
				Match(INTEGER_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BubblGumParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 62, RULE_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 563;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 566;
			Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUP() { return GetToken(BubblGumParser.YUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPE() { return GetToken(BubblGumParser.NOPE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 64, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			_la = TokenStream.LA(1);
			if ( !(_la==YUP || _la==NOPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(BubblGumParser.THIS, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			_la = TokenStream.LA(1);
			if ( !(_la==THIS || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_type);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				primitive();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				array();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 574;
				tuple();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 575;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_packContext primitive_pack() {
			return GetRuleContext<Primitive_packContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_arrayContext any_array() {
			return GetRuleContext<Any_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK() { return GetToken(BubblGumParser.PACK, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 70, RULE_array);
		try {
			State = 582;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				primitive_pack();
				}
				break;
			case LEFT_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 579;
				any_array();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 580;
				Match(IDENTIFIER);
				State = 581;
				Match(PACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGAR() { return GetToken(BubblGumParser.SUGAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARB() { return GetToken(BubblGumParser.CARB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAL() { return GetToken(BubblGumParser.CAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCAL() { return GetToken(BubblGumParser.KCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUM() { return GetToken(BubblGumParser.YUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 72, RULE_primitive);
		try {
			State = 591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584;
				Match(SUGAR);
				}
				break;
			case CARB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 585;
				Match(CARB);
				}
				break;
			case CAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 586;
				Match(CAL);
				}
				break;
			case KCAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 587;
				Match(KCAL);
				}
				break;
			case YUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 588;
				Match(YUM);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 589;
				Match(PURE);
				State = 590;
				Match(SUGAR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 74, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(LEFT_ANGLE_BRACKET);
			State = 596;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IDENTIFIER:
				{
				State = 594;
				type();
				}
				break;
			case FLAVOR:
				{
				State = 595;
				Match(FLAVOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 598;
				Match(IDENTIFIER);
				}
			}

			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 601;
				Match(COMMA);
				State = 604;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 602;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 603;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 606;
					Match(IDENTIFIER);
					}
				}

				}
				}
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 614;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_packContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGARPACK() { return GetToken(BubblGumParser.SUGARPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARBPACK() { return GetToken(BubblGumParser.CARBPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALPACK() { return GetToken(BubblGumParser.CALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCALPACK() { return GetToken(BubblGumParser.KCALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUMPACK() { return GetToken(BubblGumParser.YUMPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public Primitive_packContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_pack; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_pack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_pack(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_packContext primitive_pack() {
		Primitive_packContext _localctx = new Primitive_packContext(Context, State);
		EnterRule(_localctx, 76, RULE_primitive_pack);
		try {
			State = 623;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGARPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 616;
				Match(SUGARPACK);
				}
				break;
			case CARBPACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 617;
				Match(CARBPACK);
				}
				break;
			case CALPACK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 618;
				Match(CALPACK);
				}
				break;
			case KCALPACK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 619;
				Match(KCALPACK);
				}
				break;
			case YUMPACK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 620;
				Match(YUMPACK);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 621;
				Match(PURE);
				State = 622;
				Match(SUGARPACK);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Any_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAny_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAny_array(this);
		}
	}

	[RuleVersion(0)]
	public Any_arrayContext any_array() {
		Any_arrayContext _localctx = new Any_arrayContext(Context, State);
		EnterRule(_localctx, 78, RULE_any_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			Match(LEFT_SQUARE_BRACKET);
			State = 649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 628;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 626;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 627;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				{
				State = 632;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 630;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 631;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 634;
					Match(IDENTIFIER);
					}
				}

				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 637;
					Match(COMMA);
					State = 640;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 638;
						type();
						}
						break;
					case FLAVOR:
						{
						State = 639;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 643;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IDENTIFIER) {
						{
						State = 642;
						Match(IDENTIFIER);
						}
					}

					}
					}
					State = 647;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				}
				break;
			}
			State = 651;
			Match(RIGHT_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 29: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 21);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 24);
		case 11: return Precpred(Context, 23);
		case 12: return Precpred(Context, 22);
		case 13: return Precpred(Context, 20);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,97,654,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,1,0,1,0,5,0,86,8,0,
		10,0,12,0,89,9,0,1,0,1,0,1,1,3,1,94,8,1,1,1,3,1,97,8,1,1,1,1,1,1,1,1,1,
		1,1,1,1,5,1,105,8,1,10,1,12,1,108,9,1,3,1,110,8,1,1,1,1,1,5,1,114,8,1,
		10,1,12,1,117,9,1,1,1,1,1,1,2,3,2,122,8,2,1,2,3,2,125,8,2,1,2,1,2,1,2,
		1,2,1,2,1,2,5,2,133,8,2,10,2,12,2,136,9,2,3,2,138,8,2,1,2,1,2,5,2,142,
		8,2,10,2,12,2,145,9,2,1,2,1,2,1,3,3,3,150,8,3,1,3,3,3,153,8,3,1,3,1,3,
		1,3,3,3,158,8,3,1,3,1,3,3,3,162,8,3,3,3,164,8,3,1,4,3,4,167,8,4,1,4,3,
		4,170,8,4,1,4,1,4,1,4,3,4,175,8,4,1,4,1,4,3,4,179,8,4,3,4,181,8,4,1,5,
		1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,191,8,6,10,6,12,6,194,9,6,1,6,1,6,1,7,
		1,7,1,7,1,7,3,7,202,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,210,8,8,1,9,1,9,3,
		9,214,8,9,1,9,1,9,1,9,3,9,219,8,9,1,9,1,9,3,9,223,8,9,1,9,1,9,1,9,3,9,
		228,8,9,5,9,230,8,9,10,9,12,9,233,9,9,3,9,235,8,9,1,9,1,9,1,10,1,10,1,
		10,3,10,242,8,10,1,10,3,10,245,8,10,1,10,1,10,1,10,3,10,250,8,10,1,10,
		3,10,253,8,10,5,10,255,8,10,10,10,12,10,258,9,10,1,10,1,10,1,11,1,11,1,
		11,1,11,1,12,5,12,267,8,12,10,12,12,12,270,9,12,1,13,1,13,3,13,274,8,13,
		1,14,1,14,1,14,1,14,1,14,3,14,281,8,14,1,15,1,15,1,15,3,15,286,8,15,1,
		15,1,15,1,15,3,15,291,8,15,1,16,1,16,1,16,3,16,296,8,16,1,16,1,16,1,16,
		3,16,301,8,16,1,17,1,17,1,17,1,17,3,17,307,8,17,1,18,1,18,1,18,1,18,1,
		18,3,18,314,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,324,8,18,
		3,18,326,8,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,334,8,19,10,19,12,19,
		337,9,19,1,19,1,19,1,19,1,19,5,19,343,8,19,10,19,12,19,346,9,19,3,19,348,
		8,19,1,20,3,20,351,8,20,1,20,1,20,3,20,355,8,20,3,20,357,8,20,1,20,1,20,
		3,20,361,8,20,1,20,1,20,3,20,365,8,20,1,20,1,20,3,20,369,8,20,3,20,371,
		8,20,1,20,1,20,3,20,375,8,20,5,20,377,8,20,10,20,12,20,380,9,20,1,20,1,
		20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,394,8,22,1,22,
		5,22,397,8,22,10,22,12,22,400,9,22,1,22,3,22,403,8,22,1,23,1,23,1,23,1,
		23,1,23,3,23,410,8,23,1,24,1,24,1,24,1,24,3,24,416,8,24,1,25,1,25,1,25,
		3,25,421,8,25,1,26,1,26,1,26,1,26,1,26,3,26,428,8,26,1,27,1,27,1,27,1,
		27,1,27,1,27,3,27,436,8,27,1,27,1,27,1,27,3,27,441,8,27,1,27,1,27,1,27,
		1,27,3,27,447,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,457,8,
		28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,5,29,476,8,29,10,29,12,29,479,9,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,492,8,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,538,8,
		29,1,29,1,29,1,29,5,29,543,8,29,10,29,12,29,546,9,29,3,29,548,8,29,1,29,
		5,29,551,8,29,10,29,12,29,554,9,29,1,30,3,30,557,8,30,1,30,1,30,1,30,3,
		30,562,8,30,1,31,3,31,565,8,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
		1,34,1,34,3,34,577,8,34,1,35,1,35,1,35,1,35,3,35,583,8,35,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,3,36,592,8,36,1,37,1,37,1,37,3,37,597,8,37,1,37,
		3,37,600,8,37,1,37,1,37,1,37,3,37,605,8,37,1,37,3,37,608,8,37,5,37,610,
		8,37,10,37,12,37,613,9,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		3,38,624,8,38,1,39,1,39,1,39,3,39,629,8,39,1,39,1,39,3,39,633,8,39,1,39,
		3,39,636,8,39,1,39,1,39,1,39,3,39,641,8,39,1,39,3,39,644,8,39,4,39,646,
		8,39,11,39,12,39,647,3,39,650,8,39,1,39,1,39,1,39,0,1,58,40,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,0,16,1,0,60,61,1,0,13,15,1,0,72,73,1,
		0,40,41,2,0,43,43,80,80,2,0,84,84,87,87,1,0,68,69,1,0,85,86,1,0,82,83,
		2,0,53,54,66,67,3,0,45,45,70,71,76,77,2,0,31,31,78,78,2,0,33,33,81,81,
		2,0,32,32,79,79,1,0,29,30,2,0,1,1,88,88,756,0,87,1,0,0,0,2,93,1,0,0,0,
		4,121,1,0,0,0,6,149,1,0,0,0,8,166,1,0,0,0,10,182,1,0,0,0,12,184,1,0,0,
		0,14,197,1,0,0,0,16,203,1,0,0,0,18,211,1,0,0,0,20,238,1,0,0,0,22,261,1,
		0,0,0,24,268,1,0,0,0,26,273,1,0,0,0,28,280,1,0,0,0,30,282,1,0,0,0,32,292,
		1,0,0,0,34,306,1,0,0,0,36,325,1,0,0,0,38,347,1,0,0,0,40,360,1,0,0,0,42,
		384,1,0,0,0,44,388,1,0,0,0,46,404,1,0,0,0,48,411,1,0,0,0,50,420,1,0,0,
		0,52,422,1,0,0,0,54,429,1,0,0,0,56,448,1,0,0,0,58,491,1,0,0,0,60,556,1,
		0,0,0,62,564,1,0,0,0,64,568,1,0,0,0,66,570,1,0,0,0,68,576,1,0,0,0,70,582,
		1,0,0,0,72,591,1,0,0,0,74,593,1,0,0,0,76,623,1,0,0,0,78,625,1,0,0,0,80,
		86,3,2,1,0,81,86,3,4,2,0,82,86,3,14,7,0,83,86,3,12,6,0,84,86,3,26,13,0,
		85,80,1,0,0,0,85,81,1,0,0,0,85,82,1,0,0,0,85,83,1,0,0,0,85,84,1,0,0,0,
		86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,
		90,91,5,0,0,1,91,1,1,0,0,0,92,94,5,21,0,0,93,92,1,0,0,0,93,94,1,0,0,0,
		94,96,1,0,0,0,95,97,3,10,5,0,96,95,1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,
		98,99,5,5,0,0,99,109,5,88,0,0,100,101,5,57,0,0,101,106,5,88,0,0,102,103,
		5,55,0,0,103,105,5,88,0,0,104,102,1,0,0,0,105,108,1,0,0,0,106,104,1,0,
		0,0,106,107,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,109,100,1,0,0,0,109,
		110,1,0,0,0,110,111,1,0,0,0,111,115,5,51,0,0,112,114,3,8,4,0,113,112,1,
		0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,118,1,0,0,0,
		117,115,1,0,0,0,118,119,5,52,0,0,119,3,1,0,0,0,120,122,5,21,0,0,121,120,
		1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,125,3,10,5,0,124,123,1,0,0,
		0,124,125,1,0,0,0,125,126,1,0,0,0,126,127,5,22,0,0,127,137,5,88,0,0,128,
		129,5,57,0,0,129,134,5,88,0,0,130,131,5,55,0,0,131,133,5,88,0,0,132,130,
		1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,138,1,0,0,
		0,136,134,1,0,0,0,137,128,1,0,0,0,137,138,1,0,0,0,138,139,1,0,0,0,139,
		143,5,51,0,0,140,142,3,6,3,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,
		0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,143,1,0,0,0,146,147,5,52,0,0,
		147,5,1,0,0,0,148,150,5,21,0,0,149,148,1,0,0,0,149,150,1,0,0,0,150,152,
		1,0,0,0,151,153,3,10,5,0,152,151,1,0,0,0,152,153,1,0,0,0,153,163,1,0,0,
		0,154,164,3,16,8,0,155,157,3,38,19,0,156,158,7,0,0,0,157,156,1,0,0,0,157,
		158,1,0,0,0,158,164,1,0,0,0,159,161,3,40,20,0,160,162,7,0,0,0,161,160,
		1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,154,1,0,0,0,163,155,1,0,0,
		0,163,159,1,0,0,0,164,7,1,0,0,0,165,167,5,21,0,0,166,165,1,0,0,0,166,167,
		1,0,0,0,167,169,1,0,0,0,168,170,3,10,5,0,169,168,1,0,0,0,169,170,1,0,0,
		0,170,180,1,0,0,0,171,181,3,14,7,0,172,174,3,38,19,0,173,175,7,0,0,0,174,
		173,1,0,0,0,174,175,1,0,0,0,175,181,1,0,0,0,176,178,3,40,20,0,177,179,
		7,0,0,0,178,177,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,171,1,0,0,
		0,180,172,1,0,0,0,180,176,1,0,0,0,181,9,1,0,0,0,182,183,7,1,0,0,183,11,
		1,0,0,0,184,185,5,4,0,0,185,186,5,57,0,0,186,187,5,88,0,0,187,192,5,51,
		0,0,188,191,3,38,19,0,189,191,3,40,20,0,190,188,1,0,0,0,190,189,1,0,0,
		0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,
		192,1,0,0,0,195,196,5,52,0,0,196,13,1,0,0,0,197,201,3,16,8,0,198,199,5,
		57,0,0,199,202,3,28,14,0,200,202,3,22,11,0,201,198,1,0,0,0,201,200,1,0,
		0,0,202,15,1,0,0,0,203,204,5,3,0,0,204,205,5,57,0,0,205,206,5,88,0,0,206,
		209,3,18,9,0,207,210,3,20,10,0,208,210,3,68,34,0,209,207,1,0,0,0,209,208,
		1,0,0,0,209,210,1,0,0,0,210,17,1,0,0,0,211,234,5,47,0,0,212,214,5,65,0,
		0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,216,3,68,34,0,216,
		218,5,88,0,0,217,219,5,58,0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,231,
		1,0,0,0,220,222,5,55,0,0,221,223,5,65,0,0,222,221,1,0,0,0,222,223,1,0,
		0,0,223,224,1,0,0,0,224,225,3,68,34,0,225,227,5,88,0,0,226,228,5,58,0,
		0,227,226,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,220,1,0,0,0,230,
		233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,235,1,0,0,0,233,231,1,
		0,0,0,234,213,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,5,48,0,0,
		237,19,1,0,0,0,238,239,5,53,0,0,239,241,3,68,34,0,240,242,5,88,0,0,241,
		240,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,245,5,58,0,0,244,243,1,
		0,0,0,244,245,1,0,0,0,245,256,1,0,0,0,246,247,5,55,0,0,247,249,3,68,34,
		0,248,250,5,88,0,0,249,248,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,
		253,5,58,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,246,1,
		0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,
		258,256,1,0,0,0,259,260,5,54,0,0,260,21,1,0,0,0,261,262,5,51,0,0,262,263,
		3,24,12,0,263,264,5,52,0,0,264,23,1,0,0,0,265,267,3,26,13,0,266,265,1,
		0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,25,1,0,0,0,270,
		268,1,0,0,0,271,274,3,28,14,0,272,274,3,22,11,0,273,271,1,0,0,0,273,272,
		1,0,0,0,274,27,1,0,0,0,275,281,3,34,17,0,276,281,3,30,15,0,277,281,3,32,
		16,0,278,281,3,44,22,0,279,281,3,50,25,0,280,275,1,0,0,0,280,276,1,0,0,
		0,280,277,1,0,0,0,280,278,1,0,0,0,280,279,1,0,0,0,281,29,1,0,0,0,282,285,
		5,47,0,0,283,286,3,34,17,0,284,286,3,58,29,0,285,283,1,0,0,0,285,284,1,
		0,0,0,286,287,1,0,0,0,287,288,5,48,0,0,288,290,5,60,0,0,289,291,5,60,0,
		0,290,289,1,0,0,0,290,291,1,0,0,0,291,31,1,0,0,0,292,295,5,47,0,0,293,
		296,3,34,17,0,294,296,3,58,29,0,295,293,1,0,0,0,295,294,1,0,0,0,296,297,
		1,0,0,0,297,298,5,48,0,0,298,300,5,61,0,0,299,301,5,61,0,0,300,299,1,0,
		0,0,300,301,1,0,0,0,301,33,1,0,0,0,302,307,3,38,19,0,303,307,3,40,20,0,
		304,307,3,42,21,0,305,307,3,36,18,0,306,302,1,0,0,0,306,303,1,0,0,0,306,
		304,1,0,0,0,306,305,1,0,0,0,307,35,1,0,0,0,308,326,5,16,0,0,309,310,5,
		16,0,0,310,313,3,58,29,0,311,312,5,75,0,0,312,314,3,58,29,0,313,311,1,
		0,0,0,313,314,1,0,0,0,314,326,1,0,0,0,315,316,5,16,0,0,316,317,3,58,29,
		0,317,318,5,75,0,0,318,323,5,42,0,0,319,320,5,47,0,0,320,321,3,58,29,0,
		321,322,5,48,0,0,322,324,1,0,0,0,323,319,1,0,0,0,323,324,1,0,0,0,324,326,
		1,0,0,0,325,308,1,0,0,0,325,309,1,0,0,0,325,315,1,0,0,0,326,37,1,0,0,0,
		327,328,3,72,36,0,328,335,5,88,0,0,329,330,5,55,0,0,330,331,3,72,36,0,
		331,332,5,88,0,0,332,334,1,0,0,0,333,329,1,0,0,0,334,337,1,0,0,0,335,333,
		1,0,0,0,335,336,1,0,0,0,336,348,1,0,0,0,337,335,1,0,0,0,338,339,3,72,36,
		0,339,344,5,88,0,0,340,341,5,55,0,0,341,343,5,88,0,0,342,340,1,0,0,0,343,
		346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,348,1,0,0,0,346,344,1,
		0,0,0,347,327,1,0,0,0,347,338,1,0,0,0,348,39,1,0,0,0,349,351,5,65,0,0,
		350,349,1,0,0,0,350,351,1,0,0,0,351,354,1,0,0,0,352,355,3,68,34,0,353,
		355,5,6,0,0,354,352,1,0,0,0,354,353,1,0,0,0,355,357,1,0,0,0,356,350,1,
		0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,361,5,88,0,0,359,361,3,58,29,
		0,360,356,1,0,0,0,360,359,1,0,0,0,361,378,1,0,0,0,362,374,5,55,0,0,363,
		365,5,65,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,368,1,0,0,0,366,369,3,
		68,34,0,367,369,5,6,0,0,368,366,1,0,0,0,368,367,1,0,0,0,369,371,1,0,0,
		0,370,364,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,375,5,88,0,0,373,
		375,3,58,29,0,374,370,1,0,0,0,374,373,1,0,0,0,375,377,1,0,0,0,376,362,
		1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,
		0,380,378,1,0,0,0,381,382,5,46,0,0,382,383,3,58,29,0,383,41,1,0,0,0,384,
		385,3,58,29,0,385,386,7,2,0,0,386,387,3,58,29,0,387,43,1,0,0,0,388,389,
		5,36,0,0,389,393,3,58,29,0,390,391,5,57,0,0,391,394,3,28,14,0,392,394,
		3,22,11,0,393,390,1,0,0,0,393,392,1,0,0,0,394,398,1,0,0,0,395,397,3,46,
		23,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,
		402,1,0,0,0,400,398,1,0,0,0,401,403,3,48,24,0,402,401,1,0,0,0,402,403,
		1,0,0,0,403,45,1,0,0,0,404,405,5,38,0,0,405,409,3,58,29,0,406,407,5,57,
		0,0,407,410,3,28,14,0,408,410,3,22,11,0,409,406,1,0,0,0,409,408,1,0,0,
		0,410,47,1,0,0,0,411,415,5,37,0,0,412,413,5,57,0,0,413,416,3,28,14,0,414,
		416,3,22,11,0,415,412,1,0,0,0,415,414,1,0,0,0,416,49,1,0,0,0,417,421,3,
		52,26,0,418,421,3,54,27,0,419,421,3,56,28,0,420,417,1,0,0,0,420,418,1,
		0,0,0,420,419,1,0,0,0,421,51,1,0,0,0,422,423,5,39,0,0,423,427,3,58,29,
		0,424,425,5,57,0,0,425,428,3,28,14,0,426,428,3,22,11,0,427,424,1,0,0,0,
		427,426,1,0,0,0,428,53,1,0,0,0,429,430,5,88,0,0,430,431,5,57,0,0,431,432,
		7,3,0,0,432,435,5,47,0,0,433,436,5,90,0,0,434,436,3,58,29,0,435,433,1,
		0,0,0,435,434,1,0,0,0,436,437,1,0,0,0,437,440,5,55,0,0,438,441,5,90,0,
		0,439,441,3,58,29,0,440,438,1,0,0,0,440,439,1,0,0,0,441,442,1,0,0,0,442,
		446,5,48,0,0,443,444,5,57,0,0,444,447,3,28,14,0,445,447,3,22,11,0,446,
		443,1,0,0,0,446,445,1,0,0,0,447,55,1,0,0,0,448,449,5,16,0,0,449,450,5,
		7,0,0,450,451,5,88,0,0,451,452,5,44,0,0,452,453,3,58,29,0,453,456,5,75,
		0,0,454,457,3,28,14,0,455,457,3,22,11,0,456,454,1,0,0,0,456,455,1,0,0,
		0,457,57,1,0,0,0,458,459,6,29,-1,0,459,460,5,47,0,0,460,461,3,58,29,0,
		461,462,5,48,0,0,462,492,1,0,0,0,463,464,5,2,0,0,464,465,5,74,0,0,465,
		492,3,58,29,25,466,467,3,70,35,0,467,468,5,47,0,0,468,469,3,58,29,0,469,
		470,5,48,0,0,470,492,1,0,0,0,471,472,5,53,0,0,472,477,3,58,29,0,473,474,
		5,55,0,0,474,476,3,58,29,0,475,473,1,0,0,0,476,479,1,0,0,0,477,475,1,0,
		0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,481,5,54,0,0,481,
		492,1,0,0,0,482,483,7,4,0,0,483,492,3,58,29,17,484,492,3,64,32,0,485,492,
		3,66,33,0,486,492,3,60,30,0,487,492,3,62,31,0,488,492,5,91,0,0,489,492,
		5,92,0,0,490,492,5,35,0,0,491,458,1,0,0,0,491,463,1,0,0,0,491,466,1,0,
		0,0,491,471,1,0,0,0,491,482,1,0,0,0,491,484,1,0,0,0,491,485,1,0,0,0,491,
		486,1,0,0,0,491,487,1,0,0,0,491,488,1,0,0,0,491,489,1,0,0,0,491,490,1,
		0,0,0,492,552,1,0,0,0,493,494,10,21,0,0,494,495,5,74,0,0,495,551,3,58,
		29,22,496,497,10,16,0,0,497,498,7,5,0,0,498,551,3,58,29,17,499,500,10,
		15,0,0,500,501,7,6,0,0,501,551,3,58,29,16,502,503,10,14,0,0,503,504,7,
		7,0,0,504,551,3,58,29,15,505,506,10,13,0,0,506,507,7,8,0,0,507,551,3,58,
		29,14,508,509,10,12,0,0,509,510,7,9,0,0,510,551,3,58,29,13,511,512,10,
		11,0,0,512,513,7,10,0,0,513,551,3,58,29,12,514,515,10,10,0,0,515,516,7,
		11,0,0,516,551,3,58,29,11,517,518,10,9,0,0,518,519,7,12,0,0,519,551,3,
		58,29,10,520,521,10,8,0,0,521,522,7,13,0,0,522,551,3,58,29,9,523,524,10,
		24,0,0,524,525,5,49,0,0,525,526,3,58,29,0,526,527,5,50,0,0,527,551,1,0,
		0,0,528,529,10,23,0,0,529,530,5,74,0,0,530,551,5,17,0,0,531,532,10,22,
		0,0,532,533,5,74,0,0,533,551,5,18,0,0,534,535,10,20,0,0,535,547,5,47,0,
		0,536,538,3,58,29,0,537,536,1,0,0,0,537,538,1,0,0,0,538,548,1,0,0,0,539,
		544,3,58,29,0,540,541,5,55,0,0,541,543,3,58,29,0,542,540,1,0,0,0,543,546,
		1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,
		0,547,537,1,0,0,0,547,539,1,0,0,0,548,549,1,0,0,0,549,551,5,48,0,0,550,
		493,1,0,0,0,550,496,1,0,0,0,550,499,1,0,0,0,550,502,1,0,0,0,550,505,1,
		0,0,0,550,508,1,0,0,0,550,511,1,0,0,0,550,514,1,0,0,0,550,517,1,0,0,0,
		550,520,1,0,0,0,550,523,1,0,0,0,550,528,1,0,0,0,550,531,1,0,0,0,550,534,
		1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,59,1,0,0,0,
		554,552,1,0,0,0,555,557,7,8,0,0,556,555,1,0,0,0,556,557,1,0,0,0,557,558,
		1,0,0,0,558,559,5,90,0,0,559,561,5,59,0,0,560,562,5,90,0,0,561,560,1,0,
		0,0,561,562,1,0,0,0,562,61,1,0,0,0,563,565,7,8,0,0,564,563,1,0,0,0,564,
		565,1,0,0,0,565,566,1,0,0,0,566,567,5,90,0,0,567,63,1,0,0,0,568,569,7,
		14,0,0,569,65,1,0,0,0,570,571,7,15,0,0,571,67,1,0,0,0,572,577,3,72,36,
		0,573,577,3,70,35,0,574,577,3,74,37,0,575,577,5,88,0,0,576,572,1,0,0,0,
		576,573,1,0,0,0,576,574,1,0,0,0,576,575,1,0,0,0,577,69,1,0,0,0,578,583,
		3,76,38,0,579,583,3,78,39,0,580,581,5,88,0,0,581,583,5,23,0,0,582,578,
		1,0,0,0,582,579,1,0,0,0,582,580,1,0,0,0,583,71,1,0,0,0,584,592,5,8,0,0,
		585,592,5,9,0,0,586,592,5,10,0,0,587,592,5,11,0,0,588,592,5,12,0,0,589,
		590,5,20,0,0,590,592,5,8,0,0,591,584,1,0,0,0,591,585,1,0,0,0,591,586,1,
		0,0,0,591,587,1,0,0,0,591,588,1,0,0,0,591,589,1,0,0,0,592,73,1,0,0,0,593,
		596,5,53,0,0,594,597,3,68,34,0,595,597,5,6,0,0,596,594,1,0,0,0,596,595,
		1,0,0,0,597,599,1,0,0,0,598,600,5,88,0,0,599,598,1,0,0,0,599,600,1,0,0,
		0,600,611,1,0,0,0,601,604,5,55,0,0,602,605,3,68,34,0,603,605,5,6,0,0,604,
		602,1,0,0,0,604,603,1,0,0,0,605,607,1,0,0,0,606,608,5,88,0,0,607,606,1,
		0,0,0,607,608,1,0,0,0,608,610,1,0,0,0,609,601,1,0,0,0,610,613,1,0,0,0,
		611,609,1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,0,613,611,1,0,0,0,614,615,
		5,54,0,0,615,75,1,0,0,0,616,624,5,24,0,0,617,624,5,25,0,0,618,624,5,26,
		0,0,619,624,5,27,0,0,620,624,5,28,0,0,621,622,5,20,0,0,622,624,5,24,0,
		0,623,616,1,0,0,0,623,617,1,0,0,0,623,618,1,0,0,0,623,619,1,0,0,0,623,
		620,1,0,0,0,623,621,1,0,0,0,624,77,1,0,0,0,625,649,5,49,0,0,626,629,3,
		68,34,0,627,629,5,6,0,0,628,626,1,0,0,0,628,627,1,0,0,0,629,650,1,0,0,
		0,630,633,3,68,34,0,631,633,5,6,0,0,632,630,1,0,0,0,632,631,1,0,0,0,633,
		635,1,0,0,0,634,636,5,88,0,0,635,634,1,0,0,0,635,636,1,0,0,0,636,645,1,
		0,0,0,637,640,5,55,0,0,638,641,3,68,34,0,639,641,5,6,0,0,640,638,1,0,0,
		0,640,639,1,0,0,0,641,643,1,0,0,0,642,644,5,88,0,0,643,642,1,0,0,0,643,
		644,1,0,0,0,644,646,1,0,0,0,645,637,1,0,0,0,646,647,1,0,0,0,647,645,1,
		0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,628,1,0,0,0,649,632,1,0,0,0,
		650,651,1,0,0,0,651,652,5,50,0,0,652,79,1,0,0,0,97,85,87,93,96,106,109,
		115,121,124,134,137,143,149,152,157,161,163,166,169,174,178,180,190,192,
		201,209,213,218,222,227,231,234,241,244,249,252,256,268,273,280,285,290,
		295,300,306,313,323,325,335,344,347,350,354,356,360,364,368,370,374,378,
		393,398,402,409,415,420,427,435,440,446,456,477,491,537,544,547,550,552,
		556,561,564,576,582,591,596,599,604,607,611,623,628,632,635,640,643,647,
		649
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
