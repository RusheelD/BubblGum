//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Lexer_Parser/Parser/BubblGum.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BubblGumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		THIS=1, SWEETS=2, STOCK=3, RECIPE=4, CANDY=5, GUM=6, CHEW=7, FLAVOR=8, 
		FLAVORS=9, SUGAR=10, CARB=11, CAL=12, KCAL=13, YUM=14, BOLD=15, SUBTLE=16, 
		BLAND=17, POP=18, PURE=19, STICKY=20, WRAPPER=21, MINTPACK=22, PACK=23, 
		SUGARPACK=24, CARBPACK=25, CALPACK=26, KCALPACK=27, YUMPACK=28, YUP=29, 
		NOPE=30, AND=31, OR=32, XOR=33, XNOR=34, FLAVORLESS=35, IF=36, ELSE=37, 
		ELIF=38, WHILE=39, REPEAT_UP=40, REPEAT_DOWN=41, POPSTREAM=42, NOT=43, 
		IN=44, IS=45, FROM=46, ASSIGN=47, LEFT_PAREN=48, RIGHT_PAREN=49, LEFT_SQUARE_BRACKET=50, 
		RIGHT_SQUARE_BRACKET=51, LEFT_CURLY_BRACKET=52, RIGHT_CURLY_BRACKET=53, 
		LEFT_ANGLE_BRACKET=54, RIGHT_ANGLE_BRACKET=55, COMMA=56, SEMICOLON=57, 
		COLON=58, ELLIPSES=59, DOT=60, PRINT=61, DEBUG=62, DOUBLE_QUOTE=63, SINGLE_QUOTE=64, 
		BACK_TICK=65, IMMUTABLE=66, GT_EQ=67, LT_EQ=68, LEFT_SHIFT=69, RIGHT_SHIFT=70, 
		NOT_EQ_1=71, NOT_EQ_2=72, PLUS_COLON=73, MINUS_COLON=74, THIN_ARROW=75, 
		THICK_ARROW=76, SUBCLASS_OF=77, EQUALS=78, AND_OP=79, OR_OP=80, NOT_OP=81, 
		XOR_OP=82, PLUS=83, MINUS=84, POWER=85, MULTIPLY=86, DIVIDE=87, MODULO=88, 
		IDENTIFIER=89, LETTER=90, INTEGER_LITERAL=91, STRING_LITERAL=92, CHAR_LITERAL=93, 
		ESCAPE_SEQUENCE=94, WHITE=95, EOL=96, SINGLE_LINE_COMMENT=97, MULTI_LINE_COMMENT=98;
	public const int
		RULE_program = 0, RULE_define_stock = 1, RULE_chew_import = 2, RULE_class = 3, 
		RULE_interface = 4, RULE_interface_member = 5, RULE_class_member = 6, 
		RULE_visibility = 7, RULE_struct = 8, RULE_function = 9, RULE_function_header = 10, 
		RULE_parameters = 11, RULE_outputs = 12, RULE_scope_body = 13, RULE_statement_list = 14, 
		RULE_statement = 15, RULE_single_statement = 16, RULE_print_statement = 17, 
		RULE_debug_statement = 18, RULE_base_statement = 19, RULE_return_statement = 20, 
		RULE_primitive_declaration = 21, RULE_assignment = 22, RULE_variable_inc_dec = 23, 
		RULE_if_statement = 24, RULE_elif_statement = 25, RULE_else_statement = 26, 
		RULE_loop = 27, RULE_while_loop = 28, RULE_repeat_loop = 29, RULE_pop_loop = 30, 
		RULE_expression = 31, RULE_method_call = 32, RULE_access = 33, RULE_double = 34, 
		RULE_int = 35, RULE_boolean = 36, RULE_identifier = 37, RULE_type = 38, 
		RULE_array = 39, RULE_primitive = 40, RULE_tuple = 41, RULE_primitive_pack = 42, 
		RULE_any_array = 43;
	public static readonly string[] ruleNames = {
		"program", "define_stock", "chew_import", "class", "interface", "interface_member", 
		"class_member", "visibility", "struct", "function", "function_header", 
		"parameters", "outputs", "scope_body", "statement_list", "statement", 
		"single_statement", "print_statement", "debug_statement", "base_statement", 
		"return_statement", "primitive_declaration", "assignment", "variable_inc_dec", 
		"if_statement", "elif_statement", "else_statement", "loop", "while_loop", 
		"repeat_loop", "pop_loop", "expression", "method_call", "access", "double", 
		"int", "boolean", "identifier", "type", "array", "primitive", "tuple", 
		"primitive_pack", "any_array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'gum'", "'sweets'", "'stock'", "'recipe'", "'candy'", "'Gum'", 
		"'Chew'", "'flavor'", "'flavors'", "'sugar'", "'carb'", "'cal'", "'kcal'", 
		"'yum'", "'bold'", "'subtle'", "'bland'", "'pop'", "'pure'", "'sticky'", 
		"'Wrapper'", "'mintpack'", "'pack'", "'sugarpack'", "'carbpack'", "'calpack'", 
		"'kcalpack'", "'yumpack'", "'yup'", "'nope'", "'and'", "'or'", "'xor'", 
		"'xnor'", null, "'if'", "'else'", "'elif'", "'while'", "'repeatUp'", "'repeatDown'", 
		"'popstream'", "'not'", "'in'", "'is'", "'from'", "'::'", "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "'<'", "'>'", "','", "';'", "':'", "'...'", 
		"'.'", "'!'", "'?'", "'\"'", "'''", "'`'", "'$'", "'>='", "'<='", "'<:'", 
		"':>'", "'<>'", "'~='", "'+:'", "'-:'", "'->'", "'=>'", "':<'", "'='", 
		"'&'", "'|'", "'~'", "'^'", "'+'", "'-'", "'**'", "'*'", "'/'", "'%'", 
		null, null, null, null, null, null, null, "'\\r\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "THIS", "SWEETS", "STOCK", "RECIPE", "CANDY", "GUM", "CHEW", "FLAVOR", 
		"FLAVORS", "SUGAR", "CARB", "CAL", "KCAL", "YUM", "BOLD", "SUBTLE", "BLAND", 
		"POP", "PURE", "STICKY", "WRAPPER", "MINTPACK", "PACK", "SUGARPACK", "CARBPACK", 
		"CALPACK", "KCALPACK", "YUMPACK", "YUP", "NOPE", "AND", "OR", "XOR", "XNOR", 
		"FLAVORLESS", "IF", "ELSE", "ELIF", "WHILE", "REPEAT_UP", "REPEAT_DOWN", 
		"POPSTREAM", "NOT", "IN", "IS", "FROM", "ASSIGN", "LEFT_PAREN", "RIGHT_PAREN", 
		"LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", 
		"LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", "COMMA", "SEMICOLON", "COLON", 
		"ELLIPSES", "DOT", "PRINT", "DEBUG", "DOUBLE_QUOTE", "SINGLE_QUOTE", "BACK_TICK", 
		"IMMUTABLE", "GT_EQ", "LT_EQ", "LEFT_SHIFT", "RIGHT_SHIFT", "NOT_EQ_1", 
		"NOT_EQ_2", "PLUS_COLON", "MINUS_COLON", "THIN_ARROW", "THICK_ARROW", 
		"SUBCLASS_OF", "EQUALS", "AND_OP", "OR_OP", "NOT_OP", "XOR_OP", "PLUS", 
		"MINUS", "POWER", "MULTIPLY", "DIVIDE", "MODULO", "IDENTIFIER", "LETTER", 
		"INTEGER_LITERAL", "STRING_LITERAL", "CHAR_LITERAL", "ESCAPE_SEQUENCE", 
		"WHITE", "EOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BubblGum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BubblGumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BubblGumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BubblGumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BubblGumParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Chew_importContext[] chew_import() {
			return GetRuleContexts<Chew_importContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Chew_importContext chew_import(int i) {
			return GetRuleContext<Chew_importContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Define_stockContext define_stock() {
			return GetRuleContext<Define_stockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext[] @interface() {
			return GetRuleContexts<InterfaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface(int i) {
			return GetRuleContext<InterfaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CHEW) {
				{
				{
				State = 88;
				chew_import();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STOCK) {
				{
				State = 94;
				define_stock();
				}
			}

			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 23934824087551350L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 243695617L) != 0)) {
				{
				State = 102;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 97;
					@class();
					}
					break;
				case 2:
					{
					State = 98;
					@interface();
					}
					break;
				case 3:
					{
					State = 99;
					function();
					}
					break;
				case 4:
					{
					State = 100;
					@struct();
					}
					break;
				case 5:
					{
					State = 101;
					statement();
					}
					break;
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_stockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOCK() { return GetToken(BubblGumParser.STOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public Define_stockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_stock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDefine_stock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDefine_stock(this);
		}
	}

	[RuleVersion(0)]
	public Define_stockContext define_stock() {
		Define_stockContext _localctx = new Define_stockContext(Context, State);
		EnterRule(_localctx, 2, RULE_define_stock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(STOCK);
			State = 110;
			Match(IDENTIFIER);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==THIN_ARROW) {
				{
				{
				State = 111;
				Match(THIN_ARROW);
				State = 112;
				Match(IDENTIFIER);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Chew_importContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHEW() { return GetToken(BubblGumParser.CHEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BubblGumParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public Chew_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chew_import; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterChew_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitChew_import(this);
		}
	}

	[RuleVersion(0)]
	public Chew_importContext chew_import() {
		Chew_importContext _localctx = new Chew_importContext(Context, State);
		EnterRule(_localctx, 4, RULE_chew_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(CHEW);
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				{
				State = 119;
				Match(IDENTIFIER);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==THIN_ARROW) {
					{
					{
					State = 120;
					Match(THIN_ARROW);
					State = 121;
					Match(IDENTIFIER);
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case STRING_LITERAL:
				{
				State = 127;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUM() { return GetToken(BubblGumParser.GUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext[] class_member() {
			return GetRuleContexts<Class_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext class_member(int i) {
			return GetRuleContext<Class_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 6, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 130;
				Match(STICKY);
				}
			}

			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 133;
				visibility();
				}
			}

			State = 136;
			Match(GUM);
			State = 137;
			Match(IDENTIFIER);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 138;
				Match(COLON);
				State = 139;
				Match(IDENTIFIER);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 140;
					Match(COMMA);
					State = 141;
					Match(IDENTIFIER);
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 149;
			Match(LEFT_CURLY_BRACKET);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19430605982530838L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 243695617L) != 0)) {
				{
				{
				State = 150;
				class_member();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(BubblGumParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext[] interface_member() {
			return GetRuleContexts<Interface_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext interface_member(int i) {
			return GetRuleContext<Interface_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 8, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 158;
				Match(STICKY);
				}
			}

			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 161;
				visibility();
				}
			}

			State = 164;
			Match(WRAPPER);
			State = 165;
			Match(IDENTIFIER);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 166;
				Match(COLON);
				State = 167;
				Match(IDENTIFIER);
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 168;
					Match(COMMA);
					State = 169;
					Match(IDENTIFIER);
					}
					}
					State = 174;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 177;
			Match(LEFT_CURLY_BRACKET);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19430605982530838L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 243695617L) != 0)) {
				{
				{
				State = 178;
				interface_member();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Interface_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface_member(this);
		}
	}

	[RuleVersion(0)]
	public Interface_memberContext interface_member() {
		Interface_memberContext _localctx = new Interface_memberContext(Context, State);
		EnterRule(_localctx, 10, RULE_interface_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 186;
				Match(STICKY);
				}
			}

			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 189;
				visibility();
				}
			}

			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 192;
				function_header();
				}
				break;
			case 2:
				{
				{
				State = 193;
				primitive_declaration();
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 194;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 197;
				assignment();
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 198;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Class_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass_member(this);
		}
	}

	[RuleVersion(0)]
	public Class_memberContext class_member() {
		Class_memberContext _localctx = new Class_memberContext(Context, State);
		EnterRule(_localctx, 12, RULE_class_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 203;
				Match(STICKY);
				}
			}

			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 206;
				visibility();
				}
			}

			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 209;
				function();
				}
				break;
			case 2:
				{
				{
				State = 210;
				primitive_declaration();
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 211;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 214;
				assignment();
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 215;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOLD() { return GetToken(BubblGumParser.BOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTLE() { return GetToken(BubblGumParser.SUBTLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLAND() { return GetToken(BubblGumParser.BLAND, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 14, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANDY() { return GetToken(BubblGumParser.CANDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext[] primitive_declaration() {
			return GetRuleContexts<Primitive_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration(int i) {
			return GetRuleContext<Primitive_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(CANDY);
			State = 223;
			Match(COLON);
			State = 224;
			Match(IDENTIFIER);
			State = 225;
			Match(LEFT_CURLY_BRACKET);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19430605981252870L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 243695617L) != 0)) {
				{
				State = 228;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 226;
					primitive_declaration();
					}
					break;
				case 2:
					{
					State = 227;
					assignment();
					}
					break;
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			function_header();
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 236;
				Match(COLON);
				State = 237;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 238;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECIPE() { return GetToken(BubblGumParser.RECIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputsContext outputs() {
			return GetRuleContext<OutputsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction_header(this);
		}
	}

	[RuleVersion(0)]
	public Function_headerContext function_header() {
		Function_headerContext _localctx = new Function_headerContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(RECIPE);
			State = 242;
			Match(COLON);
			State = 243;
			Match(IDENTIFIER);
			State = 244;
			parameters();
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 245;
				outputs();
				}
				break;
			case 2:
				{
				State = 246;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSES() { return GetTokens(BubblGumParser.ELLIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSES(int i) {
			return GetToken(BubblGumParser.ELLIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(LEFT_PAREN);
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19140298936974336L) != 0) || _la==IMMUTABLE || _la==IDENTIFIER) {
				{
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMMUTABLE) {
					{
					State = 250;
					Match(IMMUTABLE);
					}
				}

				State = 253;
				type();
				State = 254;
				Match(IDENTIFIER);
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSES) {
					{
					State = 255;
					Match(ELLIPSES);
					}
				}

				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 258;
					Match(COMMA);
					State = 260;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 259;
						Match(IMMUTABLE);
						}
					}

					State = 262;
					type();
					State = 263;
					Match(IDENTIFIER);
					State = 265;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELLIPSES) {
						{
						State = 264;
						Match(ELLIPSES);
						}
					}

					}
					}
					State = 271;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 274;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSES() { return GetTokens(BubblGumParser.ELLIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSES(int i) {
			return GetToken(BubblGumParser.ELLIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public OutputsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterOutputs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitOutputs(this);
		}
	}

	[RuleVersion(0)]
	public OutputsContext outputs() {
		OutputsContext _localctx = new OutputsContext(Context, State);
		EnterRule(_localctx, 24, RULE_outputs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(LEFT_ANGLE_BRACKET);
			{
			{
			State = 277;
			type();
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 278;
				Match(IDENTIFIER);
				}
			}

			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSES) {
				{
				State = 281;
				Match(ELLIPSES);
				}
			}

			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 284;
				Match(COMMA);
				State = 285;
				type();
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 286;
					Match(IDENTIFIER);
					}
				}

				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSES) {
					{
					State = 289;
					Match(ELLIPSES);
					}
				}

				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
			State = 297;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scope_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		public Scope_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterScope_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitScope_body(this);
		}
	}

	[RuleVersion(0)]
	public Scope_bodyContext scope_body() {
		Scope_bodyContext _localctx = new Scope_bodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_scope_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(LEFT_CURLY_BRACKET);
			State = 300;
			statement_list();
			State = 301;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 23934824084176134L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 243695617L) != 0)) {
				{
				{
				State = 303;
				statement();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement);
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case MINTPACK:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Debug_statementContext debug_statement() {
			return GetRuleContext<Debug_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public Single_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitSingle_statement(this);
		}
	}

	[RuleVersion(0)]
	public Single_statementContext single_statement() {
		Single_statementContext _localctx = new Single_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_single_statement);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313;
				base_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 314;
				print_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 315;
				debug_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 316;
				if_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 317;
				loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PRINT() { return GetTokens(BubblGumParser.PRINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT(int i) {
			return GetToken(BubblGumParser.PRINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_print_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(LEFT_PAREN);
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 321;
				base_statement();
				}
				break;
			case 2:
				{
				State = 322;
				expression(0);
				}
				break;
			}
			State = 325;
			Match(RIGHT_PAREN);
			State = 326;
			Match(PRINT);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRINT) {
				{
				State = 327;
				Match(PRINT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Debug_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEBUG() { return GetTokens(BubblGumParser.DEBUG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG(int i) {
			return GetToken(BubblGumParser.DEBUG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Debug_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debug_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDebug_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDebug_statement(this);
		}
	}

	[RuleVersion(0)]
	public Debug_statementContext debug_statement() {
		Debug_statementContext _localctx = new Debug_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_debug_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(LEFT_PAREN);
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 331;
				base_statement();
				}
				break;
			case 2:
				{
				State = 332;
				expression(0);
				}
				break;
			}
			State = 335;
			Match(RIGHT_PAREN);
			State = 336;
			Match(DEBUG);
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEBUG) {
				{
				State = 337;
				Match(DEBUG);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_inc_decContext variable_inc_dec() {
			return GetRuleContext<Variable_inc_decContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public Base_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBase_statement(this);
		}
	}

	[RuleVersion(0)]
	public Base_statementContext base_statement() {
		Base_statementContext _localctx = new Base_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_base_statement);
		try {
			State = 347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				primitive_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 342;
				variable_inc_dec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 343;
				return_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 344;
				expression(0);
				State = 345;
				method_call();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POPSTREAM() { return GetToken(BubblGumParser.POPSTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_return_statement);
		int _la;
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 349;
				Match(POP);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 350;
				Match(POP);
				State = 351;
				expression(0);
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THICK_ARROW) {
					{
					State = 352;
					Match(THICK_ARROW);
					State = 353;
					expression(0);
					}
				}

				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 356;
				Match(POP);
				State = 357;
				expression(0);
				State = 358;
				Match(THICK_ARROW);
				State = 359;
				Match(POPSTREAM);
				State = 364;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 360;
					Match(LEFT_PAREN);
					State = 361;
					expression(0);
					State = 362;
					Match(RIGHT_PAREN);
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext[] primitive() {
			return GetRuleContexts<PrimitiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive(int i) {
			return GetRuleContext<PrimitiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Primitive_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_declarationContext primitive_declaration() {
		Primitive_declarationContext _localctx = new Primitive_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_primitive_declaration);
		int _la;
		try {
			State = 388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 368;
				primitive();
				State = 369;
				Match(IDENTIFIER);
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 370;
					Match(COMMA);
					State = 371;
					primitive();
					State = 372;
					Match(IDENTIFIER);
					}
					}
					State = 378;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 379;
				primitive();
				State = 380;
				Match(IDENTIFIER);
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 381;
					Match(COMMA);
					State = 382;
					Match(IDENTIFIER);
					}
					}
					State = 387;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BubblGumParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				{
				State = 397;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 391;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 390;
						Match(IMMUTABLE);
						}
					}

					State = 395;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 393;
						type();
						}
						break;
					case FLAVOR:
						{
						State = 394;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 399;
				Match(IDENTIFIER);
				}
				}
				break;
			case 2:
				{
				State = 400;
				expression(0);
				}
				break;
			}
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 403;
				Match(COMMA);
				State = 415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					{
					State = 411;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						State = 405;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==IMMUTABLE) {
							{
							State = 404;
							Match(IMMUTABLE);
							}
						}

						State = 409;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SUGAR:
						case CARB:
						case CAL:
						case KCAL:
						case YUM:
						case PURE:
						case SUGARPACK:
						case CARBPACK:
						case CALPACK:
						case KCALPACK:
						case YUMPACK:
						case LEFT_SQUARE_BRACKET:
						case LEFT_ANGLE_BRACKET:
						case IDENTIFIER:
							{
							State = 407;
							type();
							}
							break;
						case FLAVOR:
							{
							State = 408;
							Match(FLAVOR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					State = 413;
					Match(IDENTIFIER);
					}
					}
					break;
				case 2:
					{
					State = 414;
					expression(0);
					}
					break;
				}
				}
				}
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 422;
			Match(ASSIGN);
			State = 423;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_inc_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_COLON() { return GetToken(BubblGumParser.PLUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_COLON() { return GetToken(BubblGumParser.MINUS_COLON, 0); }
		public Variable_inc_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_inc_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVariable_inc_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVariable_inc_dec(this);
		}
	}

	[RuleVersion(0)]
	public Variable_inc_decContext variable_inc_dec() {
		Variable_inc_decContext _localctx = new Variable_inc_decContext(Context, State);
		EnterRule(_localctx, 46, RULE_variable_inc_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			expression(0);
			State = 426;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_COLON || _la==MINUS_COLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 427;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BubblGumParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext[] elif_statement() {
			return GetRuleContexts<Elif_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext elif_statement(int i) {
			return GetRuleContext<Elif_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(IF);
			State = 430;
			expression(0);
			State = 434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 431;
				Match(COLON);
				State = 432;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 433;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 439;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 436;
					elif_statement();
					}
					} 
				}
				State = 441;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			State = 443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 442;
				else_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(BubblGumParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Elif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElif_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElif_statement(this);
		}
	}

	[RuleVersion(0)]
	public Elif_statementContext elif_statement() {
		Elif_statementContext _localctx = new Elif_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_elif_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 445;
			Match(ELIF);
			State = 446;
			expression(0);
			State = 450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 447;
				Match(COLON);
				State = 448;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 449;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BubblGumParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_else_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 452;
			Match(ELSE);
			State = 456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 453;
				Match(COLON);
				State = 454;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 455;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_loopContext repeat_loop() {
			return GetRuleContext<Repeat_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pop_loopContext pop_loop() {
			return GetRuleContext<Pop_loopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 54, RULE_loop);
		try {
			State = 461;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 458;
				while_loop();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				repeat_loop();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 460;
				pop_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BubblGumParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 56, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(WHILE);
			State = 464;
			expression(0);
			State = 468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 465;
				Match(COLON);
				State = 466;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 467;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(BubblGumParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(BubblGumParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BubblGumParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_DOWN() { return GetToken(BubblGumParser.REPEAT_DOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_UP() { return GetToken(BubblGumParser.REPEAT_UP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Repeat_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterRepeat_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitRepeat_loop(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_loopContext repeat_loop() {
		Repeat_loopContext _localctx = new Repeat_loopContext(Context, State);
		EnterRule(_localctx, 58, RULE_repeat_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			Match(IDENTIFIER);
			State = 471;
			Match(COLON);
			State = 472;
			_la = TokenStream.LA(1);
			if ( !(_la==REPEAT_UP || _la==REPEAT_DOWN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 473;
			Match(LEFT_PAREN);
			State = 476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 474;
				@int();
				}
				break;
			case 2:
				{
				State = 475;
				expression(0);
				}
				break;
			}
			State = 478;
			Match(COMMA);
			State = 481;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 479;
				@int();
				}
				break;
			case 2:
				{
				State = 480;
				expression(0);
				}
				break;
			}
			State = 483;
			Match(RIGHT_PAREN);
			State = 487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 484;
				Match(COLON);
				State = 485;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 486;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pop_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BubblGumParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public Pop_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pop_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPop_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPop_loop(this);
		}
	}

	[RuleVersion(0)]
	public Pop_loopContext pop_loop() {
		Pop_loopContext _localctx = new Pop_loopContext(Context, State);
		EnterRule(_localctx, 60, RULE_pop_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(POP);
			State = 490;
			Match(IDENTIFIER);
			State = 491;
			Match(FROM);
			State = 492;
			expression(0);
			State = 493;
			Match(THICK_ARROW);
			State = 496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case MINTPACK:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				{
				State = 494;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 495;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWEETS() { return GetToken(BubblGumParser.SWEETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessContext access() {
			return GetRuleContext<AccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BubblGumParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_OP() { return GetToken(BubblGumParser.NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINTPACK() { return GetToken(BubblGumParser.MINTPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BubblGumParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(BubblGumParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVORLESS() { return GetToken(BubblGumParser.FLAVORLESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(BubblGumParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(BubblGumParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT() { return GetToken(BubblGumParser.LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT() { return GetToken(BubblGumParser.RIGHT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(BubblGumParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(BubblGumParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(BubblGumParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(BubblGumParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(BubblGumParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_1() { return GetToken(BubblGumParser.NOT_EQ_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_2() { return GetToken(BubblGumParser.NOT_EQ_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BubblGumParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_OF() { return GetToken(BubblGumParser.SUBCLASS_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BubblGumParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(BubblGumParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(BubblGumParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_OP() { return GetToken(BubblGumParser.XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XNOR() { return GetToken(BubblGumParser.XNOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BubblGumParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(BubblGumParser.OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BubblGumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 499;
				Match(LEFT_PAREN);
				State = 500;
				expression(0);
				State = 501;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 503;
				Match(SWEETS);
				State = 504;
				access();
				}
				break;
			case 3:
				{
				State = 505;
				array();
				State = 506;
				Match(LEFT_PAREN);
				State = 507;
				expression(0);
				State = 508;
				Match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				State = 510;
				Match(LEFT_ANGLE_BRACKET);
				State = 511;
				expression(0);
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 512;
					Match(COMMA);
					State = 513;
					expression(0);
					}
					}
					State = 518;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 519;
				Match(RIGHT_ANGLE_BRACKET);
				}
				break;
			case 5:
				{
				State = 521;
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==NOT_OP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 522;
				expression(18);
				}
				break;
			case 6:
				{
				State = 523;
				boolean();
				}
				break;
			case 7:
				{
				State = 524;
				identifier();
				}
				break;
			case 8:
				{
				State = 525;
				@double();
				}
				break;
			case 9:
				{
				State = 526;
				@int();
				}
				break;
			case 10:
				{
				State = 527;
				Match(MINTPACK);
				}
				break;
			case 11:
				{
				State = 528;
				Match(STRING_LITERAL);
				}
				break;
			case 12:
				{
				State = 529;
				Match(CHAR_LITERAL);
				}
				break;
			case 13:
				{
				State = 530;
				Match(FLAVORLESS);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 581;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 579;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 533;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 534;
						_la = TokenStream.LA(1);
						if ( !(_la==POWER || _la==MODULO) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 535;
						expression(18);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 536;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 537;
						_la = TokenStream.LA(1);
						if ( !(_la==LEFT_SHIFT || _la==RIGHT_SHIFT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 538;
						expression(17);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 539;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 540;
						_la = TokenStream.LA(1);
						if ( !(_la==MULTIPLY || _la==DIVIDE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 541;
						expression(16);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 542;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 543;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 544;
						expression(15);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 545;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 546;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 24579L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 547;
						expression(14);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 548;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 549;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 13086228481L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 550;
						expression(13);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 551;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 552;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==AND_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 553;
						expression(12);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 554;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 555;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 562949953421315L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 556;
						expression(11);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 557;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 558;
						_la = TokenStream.LA(1);
						if ( !(_la==OR || _la==OR_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 559;
						expression(10);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 560;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 561;
						Match(LEFT_SQUARE_BRACKET);
						State = 562;
						expression(0);
						State = 563;
						Match(RIGHT_SQUARE_BRACKET);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 565;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 566;
						access();
						State = 569;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
						case 1:
							{
							State = 567;
							Match(DOT);
							State = 568;
							expression(0);
							}
							break;
						}
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 571;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 572;
						method_call();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 573;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 574;
						Match(THICK_ARROW);
						State = 577;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SUGAR:
						case CARB:
						case CAL:
						case KCAL:
						case YUM:
						case PURE:
							{
							State = 575;
							primitive();
							}
							break;
						case IDENTIFIER:
							{
							State = 576;
							Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Method_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterMethod_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitMethod_call(this);
		}
	}

	[RuleVersion(0)]
	public Method_callContext method_call() {
		Method_callContext _localctx = new Method_callContext(Context, State);
		EnterRule(_localctx, 64, RULE_method_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(LEFT_PAREN);
			State = 596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 19430605981220870L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 7437L) != 0)) {
					{
					State = 585;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				{
				State = 588;
				expression(0);
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 589;
					Match(COMMA);
					State = 590;
					expression(0);
					}
					}
					State = 595;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
			State = 598;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW() { return GetToken(BubblGumParser.THIN_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAccess(this);
		}
	}

	[RuleVersion(0)]
	public AccessContext access() {
		AccessContext _localctx = new AccessContext(Context, State);
		EnterRule(_localctx, 66, RULE_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			Match(THIN_ARROW);
			State = 601;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER_LITERAL() { return GetTokens(BubblGumParser.INTEGER_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL(int i) {
			return GetToken(BubblGumParser.INTEGER_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BubblGumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDouble(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDouble(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 68, RULE_double);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 603;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 606;
			Match(INTEGER_LITERAL);
			State = 607;
			Match(DOT);
			State = 609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 608;
				Match(INTEGER_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BubblGumParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 70, RULE_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 611;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 614;
			Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUP() { return GetToken(BubblGumParser.YUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPE() { return GetToken(BubblGumParser.NOPE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 72, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			_la = TokenStream.LA(1);
			if ( !(_la==YUP || _la==NOPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(BubblGumParser.THIS, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			_la = TokenStream.LA(1);
			if ( !(_la==THIS || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BubblGumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_type);
		int _la;
		try {
			State = 635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 620;
				primitive();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621;
				array();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 622;
				tuple();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 632;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
				case 1:
					{
					State = 623;
					Match(IDENTIFIER);
					State = 628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==THIN_ARROW) {
						{
						{
						State = 624;
						Match(THIN_ARROW);
						State = 625;
						Match(IDENTIFIER);
						}
						}
						State = 630;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 631;
					Match(DOT);
					}
					break;
				}
				State = 634;
				Match(IDENTIFIER);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_packContext primitive_pack() {
			return GetRuleContext<Primitive_packContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_arrayContext any_array() {
			return GetRuleContext<Any_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK() { return GetToken(BubblGumParser.PACK, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 78, RULE_array);
		try {
			State = 641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 637;
				primitive_pack();
				}
				break;
			case LEFT_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 638;
				any_array();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 639;
				Match(IDENTIFIER);
				State = 640;
				Match(PACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGAR() { return GetToken(BubblGumParser.SUGAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARB() { return GetToken(BubblGumParser.CARB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAL() { return GetToken(BubblGumParser.CAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCAL() { return GetToken(BubblGumParser.KCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUM() { return GetToken(BubblGumParser.YUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 80, RULE_primitive);
		try {
			State = 650;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 643;
				Match(SUGAR);
				}
				break;
			case CARB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 644;
				Match(CARB);
				}
				break;
			case CAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 645;
				Match(CAL);
				}
				break;
			case KCAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 646;
				Match(KCAL);
				}
				break;
			case YUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 647;
				Match(YUM);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 648;
				Match(PURE);
				State = 649;
				Match(SUGAR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 82, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(LEFT_ANGLE_BRACKET);
			State = 655;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IDENTIFIER:
				{
				State = 653;
				type();
				}
				break;
			case FLAVOR:
				{
				State = 654;
				Match(FLAVOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 657;
				Match(IDENTIFIER);
				}
			}

			State = 670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 660;
				Match(COMMA);
				State = 663;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 661;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 662;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 665;
					Match(IDENTIFIER);
					}
				}

				}
				}
				State = 672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 673;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_packContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGARPACK() { return GetToken(BubblGumParser.SUGARPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARBPACK() { return GetToken(BubblGumParser.CARBPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALPACK() { return GetToken(BubblGumParser.CALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCALPACK() { return GetToken(BubblGumParser.KCALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUMPACK() { return GetToken(BubblGumParser.YUMPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public Primitive_packContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_pack; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_pack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_pack(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_packContext primitive_pack() {
		Primitive_packContext _localctx = new Primitive_packContext(Context, State);
		EnterRule(_localctx, 84, RULE_primitive_pack);
		try {
			State = 682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGARPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675;
				Match(SUGARPACK);
				}
				break;
			case CARBPACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 676;
				Match(CARBPACK);
				}
				break;
			case CALPACK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 677;
				Match(CALPACK);
				}
				break;
			case KCALPACK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 678;
				Match(KCALPACK);
				}
				break;
			case YUMPACK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 679;
				Match(YUMPACK);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 680;
				Match(PURE);
				State = 681;
				Match(SUGARPACK);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Any_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAny_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAny_array(this);
		}
	}

	[RuleVersion(0)]
	public Any_arrayContext any_array() {
		Any_arrayContext _localctx = new Any_arrayContext(Context, State);
		EnterRule(_localctx, 86, RULE_any_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(LEFT_SQUARE_BRACKET);
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 687;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 685;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 686;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				{
				State = 691;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 689;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 690;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 693;
					Match(IDENTIFIER);
					}
				}

				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 696;
					Match(COMMA);
					State = 699;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 697;
						type();
						}
						break;
					case FLAVOR:
						{
						State = 698;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 702;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IDENTIFIER) {
						{
						State = 701;
						Match(IDENTIFIER);
						}
					}

					}
					}
					State = 706;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				}
				break;
			}
			State = 710;
			Match(RIGHT_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 24);
		case 10: return Precpred(Context, 23);
		case 11: return Precpred(Context, 22);
		case 12: return Precpred(Context, 19);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,98,713,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,1,0,5,0,90,8,0,10,0,12,0,93,9,0,1,0,3,0,96,8,0,1,0,1,0,1,0,1,
		0,1,0,5,0,103,8,0,10,0,12,0,106,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,114,8,
		1,10,1,12,1,117,9,1,1,2,1,2,1,2,1,2,5,2,123,8,2,10,2,12,2,126,9,2,1,2,
		3,2,129,8,2,1,3,3,3,132,8,3,1,3,3,3,135,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,
		3,143,8,3,10,3,12,3,146,9,3,3,3,148,8,3,1,3,1,3,5,3,152,8,3,10,3,12,3,
		155,9,3,1,3,1,3,1,4,3,4,160,8,4,1,4,3,4,163,8,4,1,4,1,4,1,4,1,4,1,4,1,
		4,5,4,171,8,4,10,4,12,4,174,9,4,3,4,176,8,4,1,4,1,4,5,4,180,8,4,10,4,12,
		4,183,9,4,1,4,1,4,1,5,3,5,188,8,5,1,5,3,5,191,8,5,1,5,1,5,1,5,3,5,196,
		8,5,1,5,1,5,3,5,200,8,5,3,5,202,8,5,1,6,3,6,205,8,6,1,6,3,6,208,8,6,1,
		6,1,6,1,6,3,6,213,8,6,1,6,1,6,3,6,217,8,6,3,6,219,8,6,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,8,5,8,229,8,8,10,8,12,8,232,9,8,1,8,1,8,1,9,1,9,1,9,1,9,
		3,9,240,8,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,248,8,10,1,11,1,11,3,11,
		252,8,11,1,11,1,11,1,11,3,11,257,8,11,1,11,1,11,3,11,261,8,11,1,11,1,11,
		1,11,3,11,266,8,11,5,11,268,8,11,10,11,12,11,271,9,11,3,11,273,8,11,1,
		11,1,11,1,12,1,12,1,12,3,12,280,8,12,1,12,3,12,283,8,12,1,12,1,12,1,12,
		3,12,288,8,12,1,12,3,12,291,8,12,5,12,293,8,12,10,12,12,12,296,9,12,1,
		12,1,12,1,13,1,13,1,13,1,13,1,14,5,14,305,8,14,10,14,12,14,308,9,14,1,
		15,1,15,3,15,312,8,15,1,16,1,16,1,16,1,16,1,16,3,16,319,8,16,1,17,1,17,
		1,17,3,17,324,8,17,1,17,1,17,1,17,3,17,329,8,17,1,18,1,18,1,18,3,18,334,
		8,18,1,18,1,18,1,18,3,18,339,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,
		19,348,8,19,1,20,1,20,1,20,1,20,1,20,3,20,355,8,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,3,20,365,8,20,3,20,367,8,20,1,21,1,21,1,21,1,21,1,
		21,1,21,5,21,375,8,21,10,21,12,21,378,9,21,1,21,1,21,1,21,1,21,5,21,384,
		8,21,10,21,12,21,387,9,21,3,21,389,8,21,1,22,3,22,392,8,22,1,22,1,22,3,
		22,396,8,22,3,22,398,8,22,1,22,1,22,3,22,402,8,22,1,22,1,22,3,22,406,8,
		22,1,22,1,22,3,22,410,8,22,3,22,412,8,22,1,22,1,22,3,22,416,8,22,5,22,
		418,8,22,10,22,12,22,421,9,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,
		1,24,1,24,1,24,1,24,3,24,435,8,24,1,24,5,24,438,8,24,10,24,12,24,441,9,
		24,1,24,3,24,444,8,24,1,25,1,25,1,25,1,25,1,25,3,25,451,8,25,1,26,1,26,
		1,26,1,26,3,26,457,8,26,1,27,1,27,1,27,3,27,462,8,27,1,28,1,28,1,28,1,
		28,1,28,3,28,469,8,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,477,8,29,1,29,
		1,29,1,29,3,29,482,8,29,1,29,1,29,1,29,1,29,3,29,488,8,29,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,3,30,497,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,515,8,31,10,31,12,31,
		518,9,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,
		31,532,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,570,8,31,1,31,1,
		31,1,31,1,31,1,31,1,31,3,31,578,8,31,5,31,580,8,31,10,31,12,31,583,9,31,
		1,32,1,32,3,32,587,8,32,1,32,1,32,1,32,5,32,592,8,32,10,32,12,32,595,9,
		32,3,32,597,8,32,1,32,1,32,1,33,1,33,1,33,1,34,3,34,605,8,34,1,34,1,34,
		1,34,3,34,610,8,34,1,35,3,35,613,8,35,1,35,1,35,1,36,1,36,1,37,1,37,1,
		38,1,38,1,38,1,38,1,38,1,38,5,38,627,8,38,10,38,12,38,630,9,38,1,38,3,
		38,633,8,38,1,38,3,38,636,8,38,1,39,1,39,1,39,1,39,3,39,642,8,39,1,40,
		1,40,1,40,1,40,1,40,1,40,1,40,3,40,651,8,40,1,41,1,41,1,41,3,41,656,8,
		41,1,41,3,41,659,8,41,1,41,1,41,1,41,3,41,664,8,41,1,41,3,41,667,8,41,
		5,41,669,8,41,10,41,12,41,672,9,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,3,42,683,8,42,1,43,1,43,1,43,3,43,688,8,43,1,43,1,43,3,43,692,
		8,43,1,43,3,43,695,8,43,1,43,1,43,1,43,3,43,700,8,43,1,43,3,43,703,8,43,
		4,43,705,8,43,11,43,12,43,706,3,43,709,8,43,1,43,1,43,1,43,0,1,62,44,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,0,16,1,0,61,62,1,
		0,15,17,1,0,73,74,1,0,40,41,2,0,43,43,81,81,2,0,85,85,88,88,1,0,69,70,
		1,0,86,87,1,0,83,84,2,0,54,55,67,68,3,0,45,45,71,72,77,78,2,0,31,31,79,
		79,2,0,33,34,82,82,2,0,32,32,80,80,1,0,29,30,2,0,1,1,89,89,821,0,91,1,
		0,0,0,2,109,1,0,0,0,4,118,1,0,0,0,6,131,1,0,0,0,8,159,1,0,0,0,10,187,1,
		0,0,0,12,204,1,0,0,0,14,220,1,0,0,0,16,222,1,0,0,0,18,235,1,0,0,0,20,241,
		1,0,0,0,22,249,1,0,0,0,24,276,1,0,0,0,26,299,1,0,0,0,28,306,1,0,0,0,30,
		311,1,0,0,0,32,318,1,0,0,0,34,320,1,0,0,0,36,330,1,0,0,0,38,347,1,0,0,
		0,40,366,1,0,0,0,42,388,1,0,0,0,44,401,1,0,0,0,46,425,1,0,0,0,48,429,1,
		0,0,0,50,445,1,0,0,0,52,452,1,0,0,0,54,461,1,0,0,0,56,463,1,0,0,0,58,470,
		1,0,0,0,60,489,1,0,0,0,62,531,1,0,0,0,64,584,1,0,0,0,66,600,1,0,0,0,68,
		604,1,0,0,0,70,612,1,0,0,0,72,616,1,0,0,0,74,618,1,0,0,0,76,635,1,0,0,
		0,78,641,1,0,0,0,80,650,1,0,0,0,82,652,1,0,0,0,84,682,1,0,0,0,86,684,1,
		0,0,0,88,90,3,4,2,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,
		0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,94,96,3,2,1,0,95,94,1,0,0,0,95,96,1,
		0,0,0,96,104,1,0,0,0,97,103,3,6,3,0,98,103,3,8,4,0,99,103,3,18,9,0,100,
		103,3,16,8,0,101,103,3,30,15,0,102,97,1,0,0,0,102,98,1,0,0,0,102,99,1,
		0,0,0,102,100,1,0,0,0,102,101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,
		104,105,1,0,0,0,105,107,1,0,0,0,106,104,1,0,0,0,107,108,5,0,0,1,108,1,
		1,0,0,0,109,110,5,3,0,0,110,115,5,89,0,0,111,112,5,75,0,0,112,114,5,89,
		0,0,113,111,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,
		3,1,0,0,0,117,115,1,0,0,0,118,128,5,7,0,0,119,124,5,89,0,0,120,121,5,75,
		0,0,121,123,5,89,0,0,122,120,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,
		125,1,0,0,0,125,129,1,0,0,0,126,124,1,0,0,0,127,129,5,92,0,0,128,119,1,
		0,0,0,128,127,1,0,0,0,129,5,1,0,0,0,130,132,5,20,0,0,131,130,1,0,0,0,131,
		132,1,0,0,0,132,134,1,0,0,0,133,135,3,14,7,0,134,133,1,0,0,0,134,135,1,
		0,0,0,135,136,1,0,0,0,136,137,5,6,0,0,137,147,5,89,0,0,138,139,5,58,0,
		0,139,144,5,89,0,0,140,141,5,56,0,0,141,143,5,89,0,0,142,140,1,0,0,0,143,
		146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,148,1,0,0,0,146,144,1,
		0,0,0,147,138,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,149,153,5,52,0,0,
		150,152,3,12,6,0,151,150,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,
		1,0,0,0,154,156,1,0,0,0,155,153,1,0,0,0,156,157,5,53,0,0,157,7,1,0,0,0,
		158,160,5,20,0,0,159,158,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,163,
		3,14,7,0,162,161,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,5,21,
		0,0,165,175,5,89,0,0,166,167,5,58,0,0,167,172,5,89,0,0,168,169,5,56,0,
		0,169,171,5,89,0,0,170,168,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,
		173,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,175,166,1,0,0,0,175,176,1,
		0,0,0,176,177,1,0,0,0,177,181,5,52,0,0,178,180,3,10,5,0,179,178,1,0,0,
		0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,184,1,0,0,0,183,
		181,1,0,0,0,184,185,5,53,0,0,185,9,1,0,0,0,186,188,5,20,0,0,187,186,1,
		0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,191,3,14,7,0,190,189,1,0,0,0,
		190,191,1,0,0,0,191,201,1,0,0,0,192,202,3,20,10,0,193,195,3,42,21,0,194,
		196,7,0,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,202,1,0,0,0,197,199,3,
		44,22,0,198,200,7,0,0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,
		0,201,192,1,0,0,0,201,193,1,0,0,0,201,197,1,0,0,0,202,11,1,0,0,0,203,205,
		5,20,0,0,204,203,1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,208,3,14,
		7,0,207,206,1,0,0,0,207,208,1,0,0,0,208,218,1,0,0,0,209,219,3,18,9,0,210,
		212,3,42,21,0,211,213,7,0,0,0,212,211,1,0,0,0,212,213,1,0,0,0,213,219,
		1,0,0,0,214,216,3,44,22,0,215,217,7,0,0,0,216,215,1,0,0,0,216,217,1,0,
		0,0,217,219,1,0,0,0,218,209,1,0,0,0,218,210,1,0,0,0,218,214,1,0,0,0,219,
		13,1,0,0,0,220,221,7,1,0,0,221,15,1,0,0,0,222,223,5,5,0,0,223,224,5,58,
		0,0,224,225,5,89,0,0,225,230,5,52,0,0,226,229,3,42,21,0,227,229,3,44,22,
		0,228,226,1,0,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,
		231,1,0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,234,5,53,0,0,234,17,1,
		0,0,0,235,239,3,20,10,0,236,237,5,58,0,0,237,240,3,32,16,0,238,240,3,26,
		13,0,239,236,1,0,0,0,239,238,1,0,0,0,240,19,1,0,0,0,241,242,5,4,0,0,242,
		243,5,58,0,0,243,244,5,89,0,0,244,247,3,22,11,0,245,248,3,24,12,0,246,
		248,3,76,38,0,247,245,1,0,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,21,1,
		0,0,0,249,272,5,48,0,0,250,252,5,66,0,0,251,250,1,0,0,0,251,252,1,0,0,
		0,252,253,1,0,0,0,253,254,3,76,38,0,254,256,5,89,0,0,255,257,5,59,0,0,
		256,255,1,0,0,0,256,257,1,0,0,0,257,269,1,0,0,0,258,260,5,56,0,0,259,261,
		5,66,0,0,260,259,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,263,3,76,
		38,0,263,265,5,89,0,0,264,266,5,59,0,0,265,264,1,0,0,0,265,266,1,0,0,0,
		266,268,1,0,0,0,267,258,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,
		1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,272,251,1,0,0,0,272,273,1,0,0,
		0,273,274,1,0,0,0,274,275,5,49,0,0,275,23,1,0,0,0,276,277,5,54,0,0,277,
		279,3,76,38,0,278,280,5,89,0,0,279,278,1,0,0,0,279,280,1,0,0,0,280,282,
		1,0,0,0,281,283,5,59,0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,294,1,0,0,
		0,284,285,5,56,0,0,285,287,3,76,38,0,286,288,5,89,0,0,287,286,1,0,0,0,
		287,288,1,0,0,0,288,290,1,0,0,0,289,291,5,59,0,0,290,289,1,0,0,0,290,291,
		1,0,0,0,291,293,1,0,0,0,292,284,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,
		0,294,295,1,0,0,0,295,297,1,0,0,0,296,294,1,0,0,0,297,298,5,55,0,0,298,
		25,1,0,0,0,299,300,5,52,0,0,300,301,3,28,14,0,301,302,5,53,0,0,302,27,
		1,0,0,0,303,305,3,30,15,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,
		0,0,306,307,1,0,0,0,307,29,1,0,0,0,308,306,1,0,0,0,309,312,3,32,16,0,310,
		312,3,26,13,0,311,309,1,0,0,0,311,310,1,0,0,0,312,31,1,0,0,0,313,319,3,
		38,19,0,314,319,3,34,17,0,315,319,3,36,18,0,316,319,3,48,24,0,317,319,
		3,54,27,0,318,313,1,0,0,0,318,314,1,0,0,0,318,315,1,0,0,0,318,316,1,0,
		0,0,318,317,1,0,0,0,319,33,1,0,0,0,320,323,5,48,0,0,321,324,3,38,19,0,
		322,324,3,62,31,0,323,321,1,0,0,0,323,322,1,0,0,0,324,325,1,0,0,0,325,
		326,5,49,0,0,326,328,5,61,0,0,327,329,5,61,0,0,328,327,1,0,0,0,328,329,
		1,0,0,0,329,35,1,0,0,0,330,333,5,48,0,0,331,334,3,38,19,0,332,334,3,62,
		31,0,333,331,1,0,0,0,333,332,1,0,0,0,334,335,1,0,0,0,335,336,5,49,0,0,
		336,338,5,62,0,0,337,339,5,62,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,
		37,1,0,0,0,340,348,3,42,21,0,341,348,3,44,22,0,342,348,3,46,23,0,343,348,
		3,40,20,0,344,345,3,62,31,0,345,346,3,64,32,0,346,348,1,0,0,0,347,340,
		1,0,0,0,347,341,1,0,0,0,347,342,1,0,0,0,347,343,1,0,0,0,347,344,1,0,0,
		0,348,39,1,0,0,0,349,367,5,18,0,0,350,351,5,18,0,0,351,354,3,62,31,0,352,
		353,5,76,0,0,353,355,3,62,31,0,354,352,1,0,0,0,354,355,1,0,0,0,355,367,
		1,0,0,0,356,357,5,18,0,0,357,358,3,62,31,0,358,359,5,76,0,0,359,364,5,
		42,0,0,360,361,5,48,0,0,361,362,3,62,31,0,362,363,5,49,0,0,363,365,1,0,
		0,0,364,360,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,349,1,0,0,0,366,
		350,1,0,0,0,366,356,1,0,0,0,367,41,1,0,0,0,368,369,3,80,40,0,369,376,5,
		89,0,0,370,371,5,56,0,0,371,372,3,80,40,0,372,373,5,89,0,0,373,375,1,0,
		0,0,374,370,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,
		389,1,0,0,0,378,376,1,0,0,0,379,380,3,80,40,0,380,385,5,89,0,0,381,382,
		5,56,0,0,382,384,5,89,0,0,383,381,1,0,0,0,384,387,1,0,0,0,385,383,1,0,
		0,0,385,386,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,388,368,1,0,0,0,388,
		379,1,0,0,0,389,43,1,0,0,0,390,392,5,66,0,0,391,390,1,0,0,0,391,392,1,
		0,0,0,392,395,1,0,0,0,393,396,3,76,38,0,394,396,5,8,0,0,395,393,1,0,0,
		0,395,394,1,0,0,0,396,398,1,0,0,0,397,391,1,0,0,0,397,398,1,0,0,0,398,
		399,1,0,0,0,399,402,5,89,0,0,400,402,3,62,31,0,401,397,1,0,0,0,401,400,
		1,0,0,0,402,419,1,0,0,0,403,415,5,56,0,0,404,406,5,66,0,0,405,404,1,0,
		0,0,405,406,1,0,0,0,406,409,1,0,0,0,407,410,3,76,38,0,408,410,5,8,0,0,
		409,407,1,0,0,0,409,408,1,0,0,0,410,412,1,0,0,0,411,405,1,0,0,0,411,412,
		1,0,0,0,412,413,1,0,0,0,413,416,5,89,0,0,414,416,3,62,31,0,415,411,1,0,
		0,0,415,414,1,0,0,0,416,418,1,0,0,0,417,403,1,0,0,0,418,421,1,0,0,0,419,
		417,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,419,1,0,0,0,422,423,5,
		47,0,0,423,424,3,62,31,0,424,45,1,0,0,0,425,426,3,62,31,0,426,427,7,2,
		0,0,427,428,3,62,31,0,428,47,1,0,0,0,429,430,5,36,0,0,430,434,3,62,31,
		0,431,432,5,58,0,0,432,435,3,32,16,0,433,435,3,26,13,0,434,431,1,0,0,0,
		434,433,1,0,0,0,435,439,1,0,0,0,436,438,3,50,25,0,437,436,1,0,0,0,438,
		441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,443,1,0,0,0,441,439,1,
		0,0,0,442,444,3,52,26,0,443,442,1,0,0,0,443,444,1,0,0,0,444,49,1,0,0,0,
		445,446,5,38,0,0,446,450,3,62,31,0,447,448,5,58,0,0,448,451,3,32,16,0,
		449,451,3,26,13,0,450,447,1,0,0,0,450,449,1,0,0,0,451,51,1,0,0,0,452,456,
		5,37,0,0,453,454,5,58,0,0,454,457,3,32,16,0,455,457,3,26,13,0,456,453,
		1,0,0,0,456,455,1,0,0,0,457,53,1,0,0,0,458,462,3,56,28,0,459,462,3,58,
		29,0,460,462,3,60,30,0,461,458,1,0,0,0,461,459,1,0,0,0,461,460,1,0,0,0,
		462,55,1,0,0,0,463,464,5,39,0,0,464,468,3,62,31,0,465,466,5,58,0,0,466,
		469,3,32,16,0,467,469,3,26,13,0,468,465,1,0,0,0,468,467,1,0,0,0,469,57,
		1,0,0,0,470,471,5,89,0,0,471,472,5,58,0,0,472,473,7,3,0,0,473,476,5,48,
		0,0,474,477,3,70,35,0,475,477,3,62,31,0,476,474,1,0,0,0,476,475,1,0,0,
		0,477,478,1,0,0,0,478,481,5,56,0,0,479,482,3,70,35,0,480,482,3,62,31,0,
		481,479,1,0,0,0,481,480,1,0,0,0,482,483,1,0,0,0,483,487,5,49,0,0,484,485,
		5,58,0,0,485,488,3,32,16,0,486,488,3,26,13,0,487,484,1,0,0,0,487,486,1,
		0,0,0,488,59,1,0,0,0,489,490,5,18,0,0,490,491,5,89,0,0,491,492,5,46,0,
		0,492,493,3,62,31,0,493,496,5,76,0,0,494,497,3,32,16,0,495,497,3,26,13,
		0,496,494,1,0,0,0,496,495,1,0,0,0,497,61,1,0,0,0,498,499,6,31,-1,0,499,
		500,5,48,0,0,500,501,3,62,31,0,501,502,5,49,0,0,502,532,1,0,0,0,503,504,
		5,2,0,0,504,532,3,66,33,0,505,506,3,78,39,0,506,507,5,48,0,0,507,508,3,
		62,31,0,508,509,5,49,0,0,509,532,1,0,0,0,510,511,5,54,0,0,511,516,3,62,
		31,0,512,513,5,56,0,0,513,515,3,62,31,0,514,512,1,0,0,0,515,518,1,0,0,
		0,516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,516,1,0,0,0,519,
		520,5,55,0,0,520,532,1,0,0,0,521,522,7,4,0,0,522,532,3,62,31,18,523,532,
		3,72,36,0,524,532,3,74,37,0,525,532,3,68,34,0,526,532,3,70,35,0,527,532,
		5,22,0,0,528,532,5,92,0,0,529,532,5,93,0,0,530,532,5,35,0,0,531,498,1,
		0,0,0,531,503,1,0,0,0,531,505,1,0,0,0,531,510,1,0,0,0,531,521,1,0,0,0,
		531,523,1,0,0,0,531,524,1,0,0,0,531,525,1,0,0,0,531,526,1,0,0,0,531,527,
		1,0,0,0,531,528,1,0,0,0,531,529,1,0,0,0,531,530,1,0,0,0,532,581,1,0,0,
		0,533,534,10,17,0,0,534,535,7,5,0,0,535,580,3,62,31,18,536,537,10,16,0,
		0,537,538,7,6,0,0,538,580,3,62,31,17,539,540,10,15,0,0,540,541,7,7,0,0,
		541,580,3,62,31,16,542,543,10,14,0,0,543,544,7,8,0,0,544,580,3,62,31,15,
		545,546,10,13,0,0,546,547,7,9,0,0,547,580,3,62,31,14,548,549,10,12,0,0,
		549,550,7,10,0,0,550,580,3,62,31,13,551,552,10,11,0,0,552,553,7,11,0,0,
		553,580,3,62,31,12,554,555,10,10,0,0,555,556,7,12,0,0,556,580,3,62,31,
		11,557,558,10,9,0,0,558,559,7,13,0,0,559,580,3,62,31,10,560,561,10,24,
		0,0,561,562,5,50,0,0,562,563,3,62,31,0,563,564,5,51,0,0,564,580,1,0,0,
		0,565,566,10,23,0,0,566,569,3,66,33,0,567,568,5,60,0,0,568,570,3,62,31,
		0,569,567,1,0,0,0,569,570,1,0,0,0,570,580,1,0,0,0,571,572,10,22,0,0,572,
		580,3,64,32,0,573,574,10,19,0,0,574,577,5,76,0,0,575,578,3,80,40,0,576,
		578,5,89,0,0,577,575,1,0,0,0,577,576,1,0,0,0,578,580,1,0,0,0,579,533,1,
		0,0,0,579,536,1,0,0,0,579,539,1,0,0,0,579,542,1,0,0,0,579,545,1,0,0,0,
		579,548,1,0,0,0,579,551,1,0,0,0,579,554,1,0,0,0,579,557,1,0,0,0,579,560,
		1,0,0,0,579,565,1,0,0,0,579,571,1,0,0,0,579,573,1,0,0,0,580,583,1,0,0,
		0,581,579,1,0,0,0,581,582,1,0,0,0,582,63,1,0,0,0,583,581,1,0,0,0,584,596,
		5,48,0,0,585,587,3,62,31,0,586,585,1,0,0,0,586,587,1,0,0,0,587,597,1,0,
		0,0,588,593,3,62,31,0,589,590,5,56,0,0,590,592,3,62,31,0,591,589,1,0,0,
		0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,597,1,0,0,0,595,
		593,1,0,0,0,596,586,1,0,0,0,596,588,1,0,0,0,597,598,1,0,0,0,598,599,5,
		49,0,0,599,65,1,0,0,0,600,601,5,75,0,0,601,602,3,62,31,0,602,67,1,0,0,
		0,603,605,7,8,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,
		607,5,91,0,0,607,609,5,60,0,0,608,610,5,91,0,0,609,608,1,0,0,0,609,610,
		1,0,0,0,610,69,1,0,0,0,611,613,7,8,0,0,612,611,1,0,0,0,612,613,1,0,0,0,
		613,614,1,0,0,0,614,615,5,91,0,0,615,71,1,0,0,0,616,617,7,14,0,0,617,73,
		1,0,0,0,618,619,7,15,0,0,619,75,1,0,0,0,620,636,3,80,40,0,621,636,3,78,
		39,0,622,636,3,82,41,0,623,628,5,89,0,0,624,625,5,75,0,0,625,627,5,89,
		0,0,626,624,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,
		631,1,0,0,0,630,628,1,0,0,0,631,633,5,60,0,0,632,623,1,0,0,0,632,633,1,
		0,0,0,633,634,1,0,0,0,634,636,5,89,0,0,635,620,1,0,0,0,635,621,1,0,0,0,
		635,622,1,0,0,0,635,632,1,0,0,0,636,77,1,0,0,0,637,642,3,84,42,0,638,642,
		3,86,43,0,639,640,5,89,0,0,640,642,5,23,0,0,641,637,1,0,0,0,641,638,1,
		0,0,0,641,639,1,0,0,0,642,79,1,0,0,0,643,651,5,10,0,0,644,651,5,11,0,0,
		645,651,5,12,0,0,646,651,5,13,0,0,647,651,5,14,0,0,648,649,5,19,0,0,649,
		651,5,10,0,0,650,643,1,0,0,0,650,644,1,0,0,0,650,645,1,0,0,0,650,646,1,
		0,0,0,650,647,1,0,0,0,650,648,1,0,0,0,651,81,1,0,0,0,652,655,5,54,0,0,
		653,656,3,76,38,0,654,656,5,8,0,0,655,653,1,0,0,0,655,654,1,0,0,0,656,
		658,1,0,0,0,657,659,5,89,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,670,1,
		0,0,0,660,663,5,56,0,0,661,664,3,76,38,0,662,664,5,8,0,0,663,661,1,0,0,
		0,663,662,1,0,0,0,664,666,1,0,0,0,665,667,5,89,0,0,666,665,1,0,0,0,666,
		667,1,0,0,0,667,669,1,0,0,0,668,660,1,0,0,0,669,672,1,0,0,0,670,668,1,
		0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,672,670,1,0,0,0,673,674,5,55,0,0,
		674,83,1,0,0,0,675,683,5,24,0,0,676,683,5,25,0,0,677,683,5,26,0,0,678,
		683,5,27,0,0,679,683,5,28,0,0,680,681,5,19,0,0,681,683,5,24,0,0,682,675,
		1,0,0,0,682,676,1,0,0,0,682,677,1,0,0,0,682,678,1,0,0,0,682,679,1,0,0,
		0,682,680,1,0,0,0,683,85,1,0,0,0,684,708,5,50,0,0,685,688,3,76,38,0,686,
		688,5,8,0,0,687,685,1,0,0,0,687,686,1,0,0,0,688,709,1,0,0,0,689,692,3,
		76,38,0,690,692,5,8,0,0,691,689,1,0,0,0,691,690,1,0,0,0,692,694,1,0,0,
		0,693,695,5,89,0,0,694,693,1,0,0,0,694,695,1,0,0,0,695,704,1,0,0,0,696,
		699,5,56,0,0,697,700,3,76,38,0,698,700,5,8,0,0,699,697,1,0,0,0,699,698,
		1,0,0,0,700,702,1,0,0,0,701,703,5,89,0,0,702,701,1,0,0,0,702,703,1,0,0,
		0,703,705,1,0,0,0,704,696,1,0,0,0,705,706,1,0,0,0,706,704,1,0,0,0,706,
		707,1,0,0,0,707,709,1,0,0,0,708,687,1,0,0,0,708,691,1,0,0,0,709,710,1,
		0,0,0,710,711,5,51,0,0,711,87,1,0,0,0,106,91,95,102,104,115,124,128,131,
		134,144,147,153,159,162,172,175,181,187,190,195,199,201,204,207,212,216,
		218,228,230,239,247,251,256,260,265,269,272,279,282,287,290,294,306,311,
		318,323,328,333,338,347,354,364,366,376,385,388,391,395,397,401,405,409,
		411,415,419,434,439,443,450,456,461,468,476,481,487,496,516,531,569,577,
		579,581,586,593,596,604,609,612,628,632,635,641,650,655,658,663,666,670,
		682,687,691,694,699,702,706,708
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
