//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Lexer_Parser/Parser/BubblGum.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BubblGumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		THIS=1, SWEETS=2, STOCK=3, RECIPE=4, CANDY=5, GUM=6, CHEW=7, FLAVOR=8, 
		FLAVORS=9, SUGAR=10, CARB=11, CAL=12, KCAL=13, YUM=14, BOLD=15, SUBTLE=16, 
		BLAND=17, POP=18, SIZE=19, EMPTY=20, PURE=21, STICKY=22, WRAPPER=23, MINTPACK=24, 
		INPUT=25, PACK=26, SUGARPACK=27, CARBPACK=28, CALPACK=29, KCALPACK=30, 
		YUMPACK=31, YUP=32, NOPE=33, AND=34, OR=35, XOR=36, XNOR=37, FLAVORLESS=38, 
		IF=39, ELSE=40, ELIF=41, WHILE=42, REPEAT_UP=43, REPEAT_DOWN=44, POPSTREAM=45, 
		NOT=46, IN=47, IS=48, ASSIGN=49, LEFT_PAREN=50, RIGHT_PAREN=51, LEFT_SQUARE_BRACKET=52, 
		RIGHT_SQUARE_BRACKET=53, LEFT_CURLY_BRACKET=54, RIGHT_CURLY_BRACKET=55, 
		LEFT_ANGLE_BRACKET=56, RIGHT_ANGLE_BRACKET=57, COMMA=58, SEMICOLON=59, 
		COLON=60, ELLIPSES=61, DOT=62, PRINT=63, DEBUG=64, DOUBLE_QUOTE=65, SINGLE_QUOTE=66, 
		BACK_TICK=67, IMMUTABLE=68, GT_EQ=69, LT_EQ=70, LEFT_SHIFT=71, RIGHT_SHIFT=72, 
		NOT_EQ_1=73, NOT_EQ_2=74, PLUS_COLON=75, MINUS_COLON=76, THIN_ARROW=77, 
		THICK_ARROW=78, SUBCLASS_OF=79, EQUALS=80, AND_OP=81, OR_OP=82, NOT_OP=83, 
		XOR_OP=84, PLUS=85, MINUS=86, POWER=87, MULTIPLY=88, DIVIDE=89, MODULO=90, 
		IDENTIFIER=91, LETTER=92, INTEGER_LITERAL=93, STRING_LITERAL=94, CHAR_LITERAL=95, 
		ESCAPE_SEQUENCE=96, WHITE=97, EOL=98, SINGLE_LINE_COMMENT=99, MULTI_LINE_COMMENT=100;
	public const int
		RULE_program = 0, RULE_define_stock = 1, RULE_class = 2, RULE_interface = 3, 
		RULE_interface_member = 4, RULE_class_member = 5, RULE_visibility = 6, 
		RULE_struct = 7, RULE_function = 8, RULE_function_header = 9, RULE_parameters = 10, 
		RULE_outputs = 11, RULE_scope_body = 12, RULE_statement_list = 13, RULE_statement = 14, 
		RULE_single_statement = 15, RULE_chew_statement = 16, RULE_print_statement = 17, 
		RULE_debug_statement = 18, RULE_base_statement = 19, RULE_return_statement = 20, 
		RULE_primitive_declaration = 21, RULE_assignment = 22, RULE_variable_inc_dec = 23, 
		RULE_if_statement = 24, RULE_elif_statement = 25, RULE_else_statement = 26, 
		RULE_loop = 27, RULE_while_loop = 28, RULE_repeat_loop = 29, RULE_pop_loop = 30, 
		RULE_expression = 31, RULE_double = 32, RULE_int = 33, RULE_boolean = 34, 
		RULE_identifier = 35, RULE_type = 36, RULE_array = 37, RULE_primitive = 38, 
		RULE_tuple = 39, RULE_primitive_pack = 40, RULE_any_array = 41;
	public static readonly string[] ruleNames = {
		"program", "define_stock", "class", "interface", "interface_member", "class_member", 
		"visibility", "struct", "function", "function_header", "parameters", "outputs", 
		"scope_body", "statement_list", "statement", "single_statement", "chew_statement", 
		"print_statement", "debug_statement", "base_statement", "return_statement", 
		"primitive_declaration", "assignment", "variable_inc_dec", "if_statement", 
		"elif_statement", "else_statement", "loop", "while_loop", "repeat_loop", 
		"pop_loop", "expression", "double", "int", "boolean", "identifier", "type", 
		"array", "primitive", "tuple", "primitive_pack", "any_array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'gum'", "'sweets'", "'stock'", "'recipe'", "'candy'", "'Gum'", 
		"'Chew'", "'flavor'", "'flavors'", "'sugar'", "'carb'", "'cal'", "'kcal'", 
		"'yum'", "'bold'", "'subtle'", "'bland'", "'pop'", "'size'", "'empty'", 
		"'pure'", "'sticky'", "'Wrapper'", "'mintpack'", "'input'", "'pack'", 
		"'sugarpack'", "'carbpack'", "'calpack'", "'kcalpack'", "'yumpack'", "'yup'", 
		"'nope'", "'and'", "'or'", "'xor'", "'xnor'", null, "'if'", "'else'", 
		"'elif'", "'while'", "'repeatUp'", "'repeatDown'", "'popstream'", "'not'", 
		"'in'", "'is'", "'::'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", 
		"'>'", "','", "';'", "':'", "'...'", "'.'", "'!'", "'?'", "'\"'", "'''", 
		"'`'", "'$'", "'>='", "'<='", "'<:'", "':>'", "'<>'", "'~='", "'+:'", 
		"'-:'", "'->'", "'=>'", "':<'", "'='", "'&'", "'|'", "'~'", "'^'", "'+'", 
		"'-'", "'**'", "'*'", "'/'", "'%'", null, null, null, null, null, null, 
		null, "'\\r\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "THIS", "SWEETS", "STOCK", "RECIPE", "CANDY", "GUM", "CHEW", "FLAVOR", 
		"FLAVORS", "SUGAR", "CARB", "CAL", "KCAL", "YUM", "BOLD", "SUBTLE", "BLAND", 
		"POP", "SIZE", "EMPTY", "PURE", "STICKY", "WRAPPER", "MINTPACK", "INPUT", 
		"PACK", "SUGARPACK", "CARBPACK", "CALPACK", "KCALPACK", "YUMPACK", "YUP", 
		"NOPE", "AND", "OR", "XOR", "XNOR", "FLAVORLESS", "IF", "ELSE", "ELIF", 
		"WHILE", "REPEAT_UP", "REPEAT_DOWN", "POPSTREAM", "NOT", "IN", "IS", "ASSIGN", 
		"LEFT_PAREN", "RIGHT_PAREN", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", 
		"LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", 
		"COMMA", "SEMICOLON", "COLON", "ELLIPSES", "DOT", "PRINT", "DEBUG", "DOUBLE_QUOTE", 
		"SINGLE_QUOTE", "BACK_TICK", "IMMUTABLE", "GT_EQ", "LT_EQ", "LEFT_SHIFT", 
		"RIGHT_SHIFT", "NOT_EQ_1", "NOT_EQ_2", "PLUS_COLON", "MINUS_COLON", "THIN_ARROW", 
		"THICK_ARROW", "SUBCLASS_OF", "EQUALS", "AND_OP", "OR_OP", "NOT_OP", "XOR_OP", 
		"PLUS", "MINUS", "POWER", "MULTIPLY", "DIVIDE", "MODULO", "IDENTIFIER", 
		"LETTER", "INTEGER_LITERAL", "STRING_LITERAL", "CHAR_LITERAL", "ESCAPE_SEQUENCE", 
		"WHITE", "EOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BubblGum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BubblGumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BubblGumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BubblGumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BubblGumParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext[] @interface() {
			return GetRuleContexts<InterfaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface(int i) {
			return GetRuleContext<InterfaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Define_stockContext[] define_stock() {
			return GetRuleContexts<Define_stockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Define_stockContext define_stock(int i) {
			return GetRuleContext<Define_stockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 95777100617219582L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 243695617L) != 0)) {
				{
				State = 90;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 84;
					@class();
					}
					break;
				case 2:
					{
					State = 85;
					@interface();
					}
					break;
				case 3:
					{
					State = 86;
					function();
					}
					break;
				case 4:
					{
					State = 87;
					@struct();
					}
					break;
				case 5:
					{
					State = 88;
					statement();
					}
					break;
				case 6:
					{
					State = 89;
					define_stock();
					}
					break;
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_stockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOCK() { return GetToken(BubblGumParser.STOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public Define_stockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_stock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDefine_stock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDefine_stock(this);
		}
	}

	[RuleVersion(0)]
	public Define_stockContext define_stock() {
		Define_stockContext _localctx = new Define_stockContext(Context, State);
		EnterRule(_localctx, 2, RULE_define_stock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(STOCK);
			State = 98;
			Match(IDENTIFIER);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==THIN_ARROW) {
				{
				{
				State = 99;
				Match(THIN_ARROW);
				State = 100;
				Match(IDENTIFIER);
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUM() { return GetToken(BubblGumParser.GUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext[] class_member() {
			return GetRuleContexts<Class_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext class_member(int i) {
			return GetRuleContext<Class_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 4, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 106;
				Match(STICKY);
				}
			}

			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 109;
				visibility();
				}
			}

			State = 112;
			Match(GUM);
			State = 113;
			Match(IDENTIFIER);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 114;
				Match(COLON);
				State = 115;
				Match(IDENTIFIER);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 116;
					Match(COMMA);
					State = 117;
					Match(IDENTIFIER);
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 125;
			Match(LEFT_CURLY_BRACKET);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 77757754296761622L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 243695617L) != 0)) {
				{
				{
				State = 126;
				class_member();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(BubblGumParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext[] interface_member() {
			return GetRuleContexts<Interface_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext interface_member(int i) {
			return GetRuleContext<Interface_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 6, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 134;
				Match(STICKY);
				}
			}

			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 137;
				visibility();
				}
			}

			State = 140;
			Match(WRAPPER);
			State = 141;
			Match(IDENTIFIER);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 142;
				Match(COLON);
				State = 143;
				Match(IDENTIFIER);
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 144;
					Match(COMMA);
					State = 145;
					Match(IDENTIFIER);
					}
					}
					State = 150;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 153;
			Match(LEFT_CURLY_BRACKET);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 77757754296761622L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 243695617L) != 0)) {
				{
				{
				State = 154;
				interface_member();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Interface_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface_member(this);
		}
	}

	[RuleVersion(0)]
	public Interface_memberContext interface_member() {
		Interface_memberContext _localctx = new Interface_memberContext(Context, State);
		EnterRule(_localctx, 8, RULE_interface_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 162;
				Match(STICKY);
				}
			}

			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 165;
				visibility();
				}
			}

			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 168;
				function_header();
				}
				break;
			case 2:
				{
				{
				State = 169;
				primitive_declaration();
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 170;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 173;
				assignment();
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 174;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Class_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass_member(this);
		}
	}

	[RuleVersion(0)]
	public Class_memberContext class_member() {
		Class_memberContext _localctx = new Class_memberContext(Context, State);
		EnterRule(_localctx, 10, RULE_class_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 179;
				Match(STICKY);
				}
			}

			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 182;
				visibility();
				}
			}

			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 185;
				function();
				}
				break;
			case 2:
				{
				{
				State = 186;
				primitive_declaration();
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 187;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 190;
				assignment();
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 191;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOLD() { return GetToken(BubblGumParser.BOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTLE() { return GetToken(BubblGumParser.SUBTLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLAND() { return GetToken(BubblGumParser.BLAND, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 12, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANDY() { return GetToken(BubblGumParser.CANDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext[] primitive_declaration() {
			return GetRuleContexts<Primitive_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration(int i) {
			return GetRuleContext<Primitive_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(CANDY);
			State = 199;
			Match(COLON);
			State = 200;
			Match(IDENTIFIER);
			State = 201;
			Match(LEFT_CURLY_BRACKET);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 77757754292337926L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 243695617L) != 0)) {
				{
				State = 204;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 202;
					primitive_declaration();
					}
					break;
				case 2:
					{
					State = 203;
					assignment();
					}
					break;
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 209;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 16, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			function_header();
			State = 215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 212;
				Match(COLON);
				State = 213;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 214;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECIPE() { return GetToken(BubblGumParser.RECIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputsContext outputs() {
			return GetRuleContext<OutputsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction_header(this);
		}
	}

	[RuleVersion(0)]
	public Function_headerContext function_header() {
		Function_headerContext _localctx = new Function_headerContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(RECIPE);
			State = 218;
			Match(COLON);
			State = 219;
			Match(IDENTIFIER);
			State = 220;
			parameters();
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 221;
				outputs();
				}
				break;
			case 2:
				{
				State = 222;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSES() { return GetTokens(BubblGumParser.ELLIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSES(int i) {
			return GetToken(BubblGumParser.ELLIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 20, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(LEFT_PAREN);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76561197828176896L) != 0) || _la==IMMUTABLE || _la==IDENTIFIER) {
				{
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMMUTABLE) {
					{
					State = 226;
					Match(IMMUTABLE);
					}
				}

				State = 229;
				type();
				State = 230;
				Match(IDENTIFIER);
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSES) {
					{
					State = 231;
					Match(ELLIPSES);
					}
				}

				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 234;
					Match(COMMA);
					State = 236;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 235;
						Match(IMMUTABLE);
						}
					}

					State = 238;
					type();
					State = 239;
					Match(IDENTIFIER);
					State = 241;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELLIPSES) {
						{
						State = 240;
						Match(ELLIPSES);
						}
					}

					}
					}
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 250;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSES() { return GetTokens(BubblGumParser.ELLIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSES(int i) {
			return GetToken(BubblGumParser.ELLIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public OutputsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterOutputs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitOutputs(this);
		}
	}

	[RuleVersion(0)]
	public OutputsContext outputs() {
		OutputsContext _localctx = new OutputsContext(Context, State);
		EnterRule(_localctx, 22, RULE_outputs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(LEFT_ANGLE_BRACKET);
			{
			{
			State = 253;
			type();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 254;
				Match(IDENTIFIER);
				}
			}

			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSES) {
				{
				State = 257;
				Match(ELLIPSES);
				}
			}

			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 260;
				Match(COMMA);
				State = 261;
				type();
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 262;
					Match(IDENTIFIER);
					}
				}

				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSES) {
					{
					State = 265;
					Match(ELLIPSES);
					}
				}

				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
			State = 273;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scope_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		public Scope_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterScope_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitScope_body(this);
		}
	}

	[RuleVersion(0)]
	public Scope_bodyContext scope_body() {
		Scope_bodyContext _localctx = new Scope_bodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_scope_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(LEFT_CURLY_BRACKET);
			State = 276;
			statement_list();
			State = 277;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 95777100604407174L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 243695617L) != 0)) {
				{
				{
				State = 279;
				statement();
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement);
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case CHEW:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case MINTPACK:
			case INPUT:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Chew_statementContext chew_statement() {
			return GetRuleContext<Chew_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Debug_statementContext debug_statement() {
			return GetRuleContext<Debug_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public Single_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitSingle_statement(this);
		}
	}

	[RuleVersion(0)]
	public Single_statementContext single_statement() {
		Single_statementContext _localctx = new Single_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_single_statement);
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289;
				base_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				chew_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 291;
				print_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 292;
				debug_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 293;
				if_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 294;
				loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Chew_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHEW() { return GetToken(BubblGumParser.CHEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BubblGumParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public Chew_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chew_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterChew_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitChew_statement(this);
		}
	}

	[RuleVersion(0)]
	public Chew_statementContext chew_statement() {
		Chew_statementContext _localctx = new Chew_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_chew_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(CHEW);
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				{
				State = 298;
				Match(IDENTIFIER);
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==THIN_ARROW) {
					{
					{
					State = 299;
					Match(THIN_ARROW);
					State = 300;
					Match(IDENTIFIER);
					}
					}
					State = 305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case STRING_LITERAL:
				{
				State = 306;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PRINT() { return GetTokens(BubblGumParser.PRINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT(int i) {
			return GetToken(BubblGumParser.PRINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_print_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(LEFT_PAREN);
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 310;
				base_statement();
				}
				break;
			case 2:
				{
				State = 311;
				expression(0);
				}
				break;
			}
			State = 314;
			Match(RIGHT_PAREN);
			State = 315;
			Match(PRINT);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRINT) {
				{
				State = 316;
				Match(PRINT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Debug_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEBUG() { return GetTokens(BubblGumParser.DEBUG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG(int i) {
			return GetToken(BubblGumParser.DEBUG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Debug_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debug_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDebug_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDebug_statement(this);
		}
	}

	[RuleVersion(0)]
	public Debug_statementContext debug_statement() {
		Debug_statementContext _localctx = new Debug_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_debug_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(LEFT_PAREN);
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 320;
				base_statement();
				}
				break;
			case 2:
				{
				State = 321;
				expression(0);
				}
				break;
			}
			State = 324;
			Match(RIGHT_PAREN);
			State = 325;
			Match(DEBUG);
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEBUG) {
				{
				State = 326;
				Match(DEBUG);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_inc_decContext variable_inc_dec() {
			return GetRuleContext<Variable_inc_decContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Base_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBase_statement(this);
		}
	}

	[RuleVersion(0)]
	public Base_statementContext base_statement() {
		Base_statementContext _localctx = new Base_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_base_statement);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				primitive_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331;
				variable_inc_dec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332;
				return_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POPSTREAM() { return GetToken(BubblGumParser.POPSTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_return_statement);
		int _la;
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 335;
				Match(POP);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 336;
				Match(POP);
				State = 337;
				expression(0);
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THICK_ARROW) {
					{
					State = 338;
					Match(THICK_ARROW);
					State = 339;
					expression(0);
					}
				}

				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 342;
				Match(POP);
				State = 343;
				expression(0);
				State = 344;
				Match(THICK_ARROW);
				State = 345;
				Match(POPSTREAM);
				State = 350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 346;
					Match(LEFT_PAREN);
					State = 347;
					expression(0);
					State = 348;
					Match(RIGHT_PAREN);
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext[] primitive() {
			return GetRuleContexts<PrimitiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive(int i) {
			return GetRuleContext<PrimitiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Primitive_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_declarationContext primitive_declaration() {
		Primitive_declarationContext _localctx = new Primitive_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_primitive_declaration);
		int _la;
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 354;
				primitive();
				State = 355;
				Match(IDENTIFIER);
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 356;
					Match(COMMA);
					State = 357;
					primitive();
					State = 358;
					Match(IDENTIFIER);
					}
					}
					State = 364;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 365;
				primitive();
				State = 366;
				Match(IDENTIFIER);
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 367;
					Match(COMMA);
					State = 368;
					Match(IDENTIFIER);
					}
					}
					State = 373;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BubblGumParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				{
				State = 383;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 377;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 376;
						Match(IMMUTABLE);
						}
					}

					State = 381;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 379;
						type();
						}
						break;
					case FLAVOR:
						{
						State = 380;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 385;
				Match(IDENTIFIER);
				}
				}
				break;
			case 2:
				{
				State = 386;
				expression(0);
				}
				break;
			}
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 389;
				Match(COMMA);
				State = 401;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					{
					State = 397;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						State = 391;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==IMMUTABLE) {
							{
							State = 390;
							Match(IMMUTABLE);
							}
						}

						State = 395;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SUGAR:
						case CARB:
						case CAL:
						case KCAL:
						case YUM:
						case PURE:
						case SUGARPACK:
						case CARBPACK:
						case CALPACK:
						case KCALPACK:
						case YUMPACK:
						case LEFT_SQUARE_BRACKET:
						case LEFT_ANGLE_BRACKET:
						case IDENTIFIER:
							{
							State = 393;
							type();
							}
							break;
						case FLAVOR:
							{
							State = 394;
							Match(FLAVOR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					State = 399;
					Match(IDENTIFIER);
					}
					}
					break;
				case 2:
					{
					State = 400;
					expression(0);
					}
					break;
				}
				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 408;
			Match(ASSIGN);
			State = 409;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_inc_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_COLON() { return GetToken(BubblGumParser.PLUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_COLON() { return GetToken(BubblGumParser.MINUS_COLON, 0); }
		public Variable_inc_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_inc_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVariable_inc_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVariable_inc_dec(this);
		}
	}

	[RuleVersion(0)]
	public Variable_inc_decContext variable_inc_dec() {
		Variable_inc_decContext _localctx = new Variable_inc_decContext(Context, State);
		EnterRule(_localctx, 46, RULE_variable_inc_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			expression(0);
			State = 412;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_COLON || _la==MINUS_COLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 413;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BubblGumParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext[] elif_statement() {
			return GetRuleContexts<Elif_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext elif_statement(int i) {
			return GetRuleContext<Elif_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(IF);
			State = 416;
			expression(0);
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 417;
				Match(COLON);
				State = 418;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 419;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 425;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 422;
					elif_statement();
					}
					} 
				}
				State = 427;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 428;
				else_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(BubblGumParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Elif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElif_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElif_statement(this);
		}
	}

	[RuleVersion(0)]
	public Elif_statementContext elif_statement() {
		Elif_statementContext _localctx = new Elif_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_elif_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 431;
			Match(ELIF);
			State = 432;
			expression(0);
			State = 436;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 433;
				Match(COLON);
				State = 434;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 435;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BubblGumParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_else_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 438;
			Match(ELSE);
			State = 442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 439;
				Match(COLON);
				State = 440;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 441;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_loopContext repeat_loop() {
			return GetRuleContext<Repeat_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pop_loopContext pop_loop() {
			return GetRuleContext<Pop_loopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 54, RULE_loop);
		try {
			State = 447;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444;
				while_loop();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 445;
				repeat_loop();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 446;
				pop_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BubblGumParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 56, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(WHILE);
			State = 450;
			expression(0);
			State = 454;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 451;
				Match(COLON);
				State = 452;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 453;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(BubblGumParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(BubblGumParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BubblGumParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_DOWN() { return GetToken(BubblGumParser.REPEAT_DOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_UP() { return GetToken(BubblGumParser.REPEAT_UP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Repeat_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterRepeat_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitRepeat_loop(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_loopContext repeat_loop() {
		Repeat_loopContext _localctx = new Repeat_loopContext(Context, State);
		EnterRule(_localctx, 58, RULE_repeat_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			Match(IDENTIFIER);
			State = 457;
			Match(COLON);
			State = 458;
			_la = TokenStream.LA(1);
			if ( !(_la==REPEAT_UP || _la==REPEAT_DOWN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 459;
			Match(LEFT_PAREN);
			State = 462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 460;
				@int();
				}
				break;
			case 2:
				{
				State = 461;
				expression(0);
				}
				break;
			}
			State = 464;
			Match(COMMA);
			State = 467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 465;
				@int();
				}
				break;
			case 2:
				{
				State = 466;
				expression(0);
				}
				break;
			}
			State = 469;
			Match(RIGHT_PAREN);
			State = 473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 470;
				Match(COLON);
				State = 471;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 472;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pop_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVORS() { return GetToken(BubblGumParser.FLAVORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BubblGumParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public Pop_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pop_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPop_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPop_loop(this);
		}
	}

	[RuleVersion(0)]
	public Pop_loopContext pop_loop() {
		Pop_loopContext _localctx = new Pop_loopContext(Context, State);
		EnterRule(_localctx, 60, RULE_pop_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(POP);
			State = 476;
			Match(FLAVORS);
			State = 477;
			Match(IDENTIFIER);
			State = 478;
			Match(IN);
			State = 479;
			expression(0);
			State = 480;
			Match(THICK_ARROW);
			State = 483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case CHEW:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case MINTPACK:
			case INPUT:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				{
				State = 481;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 482;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWEETS() { return GetToken(BubblGumParser.SWEETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW() { return GetToken(BubblGumParser.THIN_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(BubblGumParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BubblGumParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_OP() { return GetToken(BubblGumParser.NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINTPACK() { return GetToken(BubblGumParser.MINTPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BubblGumParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(BubblGumParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVORLESS() { return GetToken(BubblGumParser.FLAVORLESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(BubblGumParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(BubblGumParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT() { return GetToken(BubblGumParser.LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT() { return GetToken(BubblGumParser.RIGHT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(BubblGumParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(BubblGumParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(BubblGumParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(BubblGumParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(BubblGumParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_1() { return GetToken(BubblGumParser.NOT_EQ_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_2() { return GetToken(BubblGumParser.NOT_EQ_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BubblGumParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_OF() { return GetToken(BubblGumParser.SUBCLASS_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BubblGumParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(BubblGumParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(BubblGumParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_OP() { return GetToken(BubblGumParser.XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BubblGumParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(BubblGumParser.OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(BubblGumParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(BubblGumParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 486;
				Match(LEFT_PAREN);
				State = 487;
				expression(0);
				State = 488;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 490;
				Match(SWEETS);
				State = 491;
				Match(THIN_ARROW);
				State = 492;
				expression(28);
				}
				break;
			case 3:
				{
				State = 493;
				array();
				State = 494;
				Match(LEFT_PAREN);
				State = 495;
				expression(0);
				State = 496;
				Match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				State = 498;
				Match(LEFT_ANGLE_BRACKET);
				State = 499;
				expression(0);
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 500;
					Match(COMMA);
					State = 501;
					expression(0);
					}
					}
					State = 506;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 507;
				Match(RIGHT_ANGLE_BRACKET);
				}
				break;
			case 5:
				{
				State = 509;
				Match(INPUT);
				State = 510;
				Match(LEFT_PAREN);
				State = 511;
				Match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				State = 512;
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==NOT_OP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 513;
				expression(18);
				}
				break;
			case 7:
				{
				State = 514;
				boolean();
				}
				break;
			case 8:
				{
				State = 515;
				identifier();
				}
				break;
			case 9:
				{
				State = 516;
				@double();
				}
				break;
			case 10:
				{
				State = 517;
				@int();
				}
				break;
			case 11:
				{
				State = 518;
				Match(MINTPACK);
				}
				break;
			case 12:
				{
				State = 519;
				Match(STRING_LITERAL);
				}
				break;
			case 13:
				{
				State = 520;
				Match(CHAR_LITERAL);
				}
				break;
			case 14:
				{
				State = 521;
				Match(FLAVORLESS);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 589;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 587;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 524;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 525;
						Match(THIN_ARROW);
						State = 526;
						expression(25);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 527;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 528;
						_la = TokenStream.LA(1);
						if ( !(_la==POWER || _la==MODULO) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 529;
						expression(18);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 530;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 531;
						_la = TokenStream.LA(1);
						if ( !(_la==LEFT_SHIFT || _la==RIGHT_SHIFT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 532;
						expression(17);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 533;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 534;
						_la = TokenStream.LA(1);
						if ( !(_la==MULTIPLY || _la==DIVIDE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 535;
						expression(16);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 536;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 537;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 538;
						expression(15);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 539;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 540;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 24579L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 541;
						expression(14);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 542;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 543;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & 6543114241L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 544;
						expression(13);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 545;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 546;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==AND_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 547;
						expression(12);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 548;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 549;
						_la = TokenStream.LA(1);
						if ( !(_la==XOR || _la==XOR_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 550;
						expression(11);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 551;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 552;
						_la = TokenStream.LA(1);
						if ( !(_la==OR || _la==OR_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 553;
						expression(10);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 554;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 555;
						Match(LEFT_SQUARE_BRACKET);
						State = 556;
						expression(0);
						State = 557;
						Match(RIGHT_SQUARE_BRACKET);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 559;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 560;
						Match(THIN_ARROW);
						State = 561;
						Match(SIZE);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 562;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 563;
						Match(THIN_ARROW);
						State = 564;
						Match(EMPTY);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 565;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 566;
						Match(LEFT_PAREN);
						State = 578;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
						case 1:
							{
							State = 568;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 77757754292305926L) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 7437L) != 0)) {
								{
								State = 567;
								expression(0);
								}
							}

							}
							break;
						case 2:
							{
							{
							State = 570;
							expression(0);
							State = 575;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 571;
								Match(COMMA);
								State = 572;
								expression(0);
								}
								}
								State = 577;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
							}
							break;
						}
						State = 580;
						Match(RIGHT_PAREN);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 581;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 582;
						Match(THICK_ARROW);
						State = 585;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SUGAR:
						case CARB:
						case CAL:
						case KCAL:
						case YUM:
						case PURE:
							{
							State = 583;
							primitive();
							}
							break;
						case IDENTIFIER:
							{
							State = 584;
							Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 591;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER_LITERAL() { return GetTokens(BubblGumParser.INTEGER_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL(int i) {
			return GetToken(BubblGumParser.INTEGER_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BubblGumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDouble(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDouble(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 64, RULE_double);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 592;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 595;
			Match(INTEGER_LITERAL);
			State = 596;
			Match(DOT);
			State = 598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 597;
				Match(INTEGER_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BubblGumParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 66, RULE_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 600;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 603;
			Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUP() { return GetToken(BubblGumParser.YUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPE() { return GetToken(BubblGumParser.NOPE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 68, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			_la = TokenStream.LA(1);
			if ( !(_la==YUP || _la==NOPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(BubblGumParser.THIS, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = TokenStream.LA(1);
			if ( !(_la==THIS || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_type);
		try {
			State = 613;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609;
				primitive();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610;
				array();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 611;
				tuple();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 612;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_packContext primitive_pack() {
			return GetRuleContext<Primitive_packContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_arrayContext any_array() {
			return GetRuleContext<Any_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK() { return GetToken(BubblGumParser.PACK, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 74, RULE_array);
		try {
			State = 619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 615;
				primitive_pack();
				}
				break;
			case LEFT_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 616;
				any_array();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 617;
				Match(IDENTIFIER);
				State = 618;
				Match(PACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGAR() { return GetToken(BubblGumParser.SUGAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARB() { return GetToken(BubblGumParser.CARB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAL() { return GetToken(BubblGumParser.CAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCAL() { return GetToken(BubblGumParser.KCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUM() { return GetToken(BubblGumParser.YUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 76, RULE_primitive);
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 621;
				Match(SUGAR);
				}
				break;
			case CARB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622;
				Match(CARB);
				}
				break;
			case CAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 623;
				Match(CAL);
				}
				break;
			case KCAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 624;
				Match(KCAL);
				}
				break;
			case YUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 625;
				Match(YUM);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 626;
				Match(PURE);
				State = 627;
				Match(SUGAR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 78, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			Match(LEFT_ANGLE_BRACKET);
			State = 633;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IDENTIFIER:
				{
				State = 631;
				type();
				}
				break;
			case FLAVOR:
				{
				State = 632;
				Match(FLAVOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 635;
				Match(IDENTIFIER);
				}
			}

			State = 648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 638;
				Match(COMMA);
				State = 641;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 639;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 640;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 643;
					Match(IDENTIFIER);
					}
				}

				}
				}
				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 651;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_packContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGARPACK() { return GetToken(BubblGumParser.SUGARPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARBPACK() { return GetToken(BubblGumParser.CARBPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALPACK() { return GetToken(BubblGumParser.CALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCALPACK() { return GetToken(BubblGumParser.KCALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUMPACK() { return GetToken(BubblGumParser.YUMPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public Primitive_packContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_pack; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_pack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_pack(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_packContext primitive_pack() {
		Primitive_packContext _localctx = new Primitive_packContext(Context, State);
		EnterRule(_localctx, 80, RULE_primitive_pack);
		try {
			State = 660;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGARPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 653;
				Match(SUGARPACK);
				}
				break;
			case CARBPACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 654;
				Match(CARBPACK);
				}
				break;
			case CALPACK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 655;
				Match(CALPACK);
				}
				break;
			case KCALPACK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 656;
				Match(KCALPACK);
				}
				break;
			case YUMPACK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 657;
				Match(YUMPACK);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 658;
				Match(PURE);
				State = 659;
				Match(SUGARPACK);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Any_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAny_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAny_array(this);
		}
	}

	[RuleVersion(0)]
	public Any_arrayContext any_array() {
		Any_arrayContext _localctx = new Any_arrayContext(Context, State);
		EnterRule(_localctx, 82, RULE_any_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			Match(LEFT_SQUARE_BRACKET);
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 665;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 663;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 664;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				{
				State = 669;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 667;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 668;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 671;
					Match(IDENTIFIER);
					}
				}

				State = 682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 674;
					Match(COMMA);
					State = 677;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 675;
						type();
						}
						break;
					case FLAVOR:
						{
						State = 676;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IDENTIFIER) {
						{
						State = 679;
						Match(IDENTIFIER);
						}
					}

					}
					}
					State = 684;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				}
				break;
			}
			State = 688;
			Match(RIGHT_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 24);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 27);
		case 11: return Precpred(Context, 26);
		case 12: return Precpred(Context, 25);
		case 13: return Precpred(Context, 23);
		case 14: return Precpred(Context, 19);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,100,691,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,
		0,1,0,1,0,1,0,5,0,91,8,0,10,0,12,0,94,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,
		102,8,1,10,1,12,1,105,9,1,1,2,3,2,108,8,2,1,2,3,2,111,8,2,1,2,1,2,1,2,
		1,2,1,2,1,2,5,2,119,8,2,10,2,12,2,122,9,2,3,2,124,8,2,1,2,1,2,5,2,128,
		8,2,10,2,12,2,131,9,2,1,2,1,2,1,3,3,3,136,8,3,1,3,3,3,139,8,3,1,3,1,3,
		1,3,1,3,1,3,1,3,5,3,147,8,3,10,3,12,3,150,9,3,3,3,152,8,3,1,3,1,3,5,3,
		156,8,3,10,3,12,3,159,9,3,1,3,1,3,1,4,3,4,164,8,4,1,4,3,4,167,8,4,1,4,
		1,4,1,4,3,4,172,8,4,1,4,1,4,3,4,176,8,4,3,4,178,8,4,1,5,3,5,181,8,5,1,
		5,3,5,184,8,5,1,5,1,5,1,5,3,5,189,8,5,1,5,1,5,3,5,193,8,5,3,5,195,8,5,
		1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,205,8,7,10,7,12,7,208,9,7,1,7,1,7,
		1,8,1,8,1,8,1,8,3,8,216,8,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,224,8,9,1,10,1,
		10,3,10,228,8,10,1,10,1,10,1,10,3,10,233,8,10,1,10,1,10,3,10,237,8,10,
		1,10,1,10,1,10,3,10,242,8,10,5,10,244,8,10,10,10,12,10,247,9,10,3,10,249,
		8,10,1,10,1,10,1,11,1,11,1,11,3,11,256,8,11,1,11,3,11,259,8,11,1,11,1,
		11,1,11,3,11,264,8,11,1,11,3,11,267,8,11,5,11,269,8,11,10,11,12,11,272,
		9,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,5,13,281,8,13,10,13,12,13,284,
		9,13,1,14,1,14,3,14,288,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,296,8,
		15,1,16,1,16,1,16,1,16,5,16,302,8,16,10,16,12,16,305,9,16,1,16,3,16,308,
		8,16,1,17,1,17,1,17,3,17,313,8,17,1,17,1,17,1,17,3,17,318,8,17,1,18,1,
		18,1,18,3,18,323,8,18,1,18,1,18,1,18,3,18,328,8,18,1,19,1,19,1,19,1,19,
		3,19,334,8,19,1,20,1,20,1,20,1,20,1,20,3,20,341,8,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,3,20,351,8,20,3,20,353,8,20,1,21,1,21,1,21,1,21,
		1,21,1,21,5,21,361,8,21,10,21,12,21,364,9,21,1,21,1,21,1,21,1,21,5,21,
		370,8,21,10,21,12,21,373,9,21,3,21,375,8,21,1,22,3,22,378,8,22,1,22,1,
		22,3,22,382,8,22,3,22,384,8,22,1,22,1,22,3,22,388,8,22,1,22,1,22,3,22,
		392,8,22,1,22,1,22,3,22,396,8,22,3,22,398,8,22,1,22,1,22,3,22,402,8,22,
		5,22,404,8,22,10,22,12,22,407,9,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
		1,24,1,24,1,24,1,24,1,24,3,24,421,8,24,1,24,5,24,424,8,24,10,24,12,24,
		427,9,24,1,24,3,24,430,8,24,1,25,1,25,1,25,1,25,1,25,3,25,437,8,25,1,26,
		1,26,1,26,1,26,3,26,443,8,26,1,27,1,27,1,27,3,27,448,8,27,1,28,1,28,1,
		28,1,28,1,28,3,28,455,8,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,463,8,29,
		1,29,1,29,1,29,3,29,468,8,29,1,29,1,29,1,29,1,29,3,29,474,8,29,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,484,8,30,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,503,8,
		31,10,31,12,31,506,9,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,3,31,523,8,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,569,8,31,1,31,1,
		31,1,31,5,31,574,8,31,10,31,12,31,577,9,31,3,31,579,8,31,1,31,1,31,1,31,
		1,31,1,31,3,31,586,8,31,5,31,588,8,31,10,31,12,31,591,9,31,1,32,3,32,594,
		8,32,1,32,1,32,1,32,3,32,599,8,32,1,33,3,33,602,8,33,1,33,1,33,1,34,1,
		34,1,35,1,35,1,36,1,36,1,36,1,36,3,36,614,8,36,1,37,1,37,1,37,1,37,3,37,
		620,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,629,8,38,1,39,1,39,1,
		39,3,39,634,8,39,1,39,3,39,637,8,39,1,39,1,39,1,39,3,39,642,8,39,1,39,
		3,39,645,8,39,5,39,647,8,39,10,39,12,39,650,9,39,1,39,1,39,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,3,40,661,8,40,1,41,1,41,1,41,3,41,666,8,41,1,41,
		1,41,3,41,670,8,41,1,41,3,41,673,8,41,1,41,1,41,1,41,3,41,678,8,41,1,41,
		3,41,681,8,41,4,41,683,8,41,11,41,12,41,684,3,41,687,8,41,1,41,1,41,1,
		41,0,1,62,42,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,0,16,1,
		0,63,64,1,0,15,17,1,0,75,76,1,0,43,44,2,0,46,46,83,83,2,0,87,87,90,90,
		1,0,71,72,1,0,88,89,1,0,85,86,2,0,56,57,69,70,3,0,48,48,73,74,79,80,2,
		0,34,34,81,81,2,0,36,36,84,84,2,0,35,35,82,82,1,0,32,33,2,0,1,1,91,91,
		800,0,92,1,0,0,0,2,97,1,0,0,0,4,107,1,0,0,0,6,135,1,0,0,0,8,163,1,0,0,
		0,10,180,1,0,0,0,12,196,1,0,0,0,14,198,1,0,0,0,16,211,1,0,0,0,18,217,1,
		0,0,0,20,225,1,0,0,0,22,252,1,0,0,0,24,275,1,0,0,0,26,282,1,0,0,0,28,287,
		1,0,0,0,30,295,1,0,0,0,32,297,1,0,0,0,34,309,1,0,0,0,36,319,1,0,0,0,38,
		333,1,0,0,0,40,352,1,0,0,0,42,374,1,0,0,0,44,387,1,0,0,0,46,411,1,0,0,
		0,48,415,1,0,0,0,50,431,1,0,0,0,52,438,1,0,0,0,54,447,1,0,0,0,56,449,1,
		0,0,0,58,456,1,0,0,0,60,475,1,0,0,0,62,522,1,0,0,0,64,593,1,0,0,0,66,601,
		1,0,0,0,68,605,1,0,0,0,70,607,1,0,0,0,72,613,1,0,0,0,74,619,1,0,0,0,76,
		628,1,0,0,0,78,630,1,0,0,0,80,660,1,0,0,0,82,662,1,0,0,0,84,91,3,4,2,0,
		85,91,3,6,3,0,86,91,3,16,8,0,87,91,3,14,7,0,88,91,3,28,14,0,89,91,3,2,
		1,0,90,84,1,0,0,0,90,85,1,0,0,0,90,86,1,0,0,0,90,87,1,0,0,0,90,88,1,0,
		0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,95,1,0,
		0,0,94,92,1,0,0,0,95,96,5,0,0,1,96,1,1,0,0,0,97,98,5,3,0,0,98,103,5,91,
		0,0,99,100,5,77,0,0,100,102,5,91,0,0,101,99,1,0,0,0,102,105,1,0,0,0,103,
		101,1,0,0,0,103,104,1,0,0,0,104,3,1,0,0,0,105,103,1,0,0,0,106,108,5,22,
		0,0,107,106,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,0,109,111,3,12,6,0,110,
		109,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,112,113,5,6,0,0,113,123,5,
		91,0,0,114,115,5,60,0,0,115,120,5,91,0,0,116,117,5,58,0,0,117,119,5,91,
		0,0,118,116,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,
		124,1,0,0,0,122,120,1,0,0,0,123,114,1,0,0,0,123,124,1,0,0,0,124,125,1,
		0,0,0,125,129,5,54,0,0,126,128,3,10,5,0,127,126,1,0,0,0,128,131,1,0,0,
		0,129,127,1,0,0,0,129,130,1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,
		133,5,55,0,0,133,5,1,0,0,0,134,136,5,22,0,0,135,134,1,0,0,0,135,136,1,
		0,0,0,136,138,1,0,0,0,137,139,3,12,6,0,138,137,1,0,0,0,138,139,1,0,0,0,
		139,140,1,0,0,0,140,141,5,23,0,0,141,151,5,91,0,0,142,143,5,60,0,0,143,
		148,5,91,0,0,144,145,5,58,0,0,145,147,5,91,0,0,146,144,1,0,0,0,147,150,
		1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,
		0,151,142,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,157,5,54,0,0,154,
		156,3,8,4,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,
		0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,5,55,0,0,161,7,1,0,0,0,162,
		164,5,22,0,0,163,162,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,167,3,
		12,6,0,166,165,1,0,0,0,166,167,1,0,0,0,167,177,1,0,0,0,168,178,3,18,9,
		0,169,171,3,42,21,0,170,172,7,0,0,0,171,170,1,0,0,0,171,172,1,0,0,0,172,
		178,1,0,0,0,173,175,3,44,22,0,174,176,7,0,0,0,175,174,1,0,0,0,175,176,
		1,0,0,0,176,178,1,0,0,0,177,168,1,0,0,0,177,169,1,0,0,0,177,173,1,0,0,
		0,178,9,1,0,0,0,179,181,5,22,0,0,180,179,1,0,0,0,180,181,1,0,0,0,181,183,
		1,0,0,0,182,184,3,12,6,0,183,182,1,0,0,0,183,184,1,0,0,0,184,194,1,0,0,
		0,185,195,3,16,8,0,186,188,3,42,21,0,187,189,7,0,0,0,188,187,1,0,0,0,188,
		189,1,0,0,0,189,195,1,0,0,0,190,192,3,44,22,0,191,193,7,0,0,0,192,191,
		1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,185,1,0,0,0,194,186,1,0,0,
		0,194,190,1,0,0,0,195,11,1,0,0,0,196,197,7,1,0,0,197,13,1,0,0,0,198,199,
		5,5,0,0,199,200,5,60,0,0,200,201,5,91,0,0,201,206,5,54,0,0,202,205,3,42,
		21,0,203,205,3,44,22,0,204,202,1,0,0,0,204,203,1,0,0,0,205,208,1,0,0,0,
		206,204,1,0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,206,1,0,0,0,209,210,
		5,55,0,0,210,15,1,0,0,0,211,215,3,18,9,0,212,213,5,60,0,0,213,216,3,30,
		15,0,214,216,3,24,12,0,215,212,1,0,0,0,215,214,1,0,0,0,216,17,1,0,0,0,
		217,218,5,4,0,0,218,219,5,60,0,0,219,220,5,91,0,0,220,223,3,20,10,0,221,
		224,3,22,11,0,222,224,3,72,36,0,223,221,1,0,0,0,223,222,1,0,0,0,223,224,
		1,0,0,0,224,19,1,0,0,0,225,248,5,50,0,0,226,228,5,68,0,0,227,226,1,0,0,
		0,227,228,1,0,0,0,228,229,1,0,0,0,229,230,3,72,36,0,230,232,5,91,0,0,231,
		233,5,61,0,0,232,231,1,0,0,0,232,233,1,0,0,0,233,245,1,0,0,0,234,236,5,
		58,0,0,235,237,5,68,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,
		0,238,239,3,72,36,0,239,241,5,91,0,0,240,242,5,61,0,0,241,240,1,0,0,0,
		241,242,1,0,0,0,242,244,1,0,0,0,243,234,1,0,0,0,244,247,1,0,0,0,245,243,
		1,0,0,0,245,246,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,248,227,1,0,0,
		0,248,249,1,0,0,0,249,250,1,0,0,0,250,251,5,51,0,0,251,21,1,0,0,0,252,
		253,5,56,0,0,253,255,3,72,36,0,254,256,5,91,0,0,255,254,1,0,0,0,255,256,
		1,0,0,0,256,258,1,0,0,0,257,259,5,61,0,0,258,257,1,0,0,0,258,259,1,0,0,
		0,259,270,1,0,0,0,260,261,5,58,0,0,261,263,3,72,36,0,262,264,5,91,0,0,
		263,262,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,267,5,61,0,0,266,265,
		1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,260,1,0,0,0,269,272,1,0,0,
		0,270,268,1,0,0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,270,1,0,0,0,273,
		274,5,57,0,0,274,23,1,0,0,0,275,276,5,54,0,0,276,277,3,26,13,0,277,278,
		5,55,0,0,278,25,1,0,0,0,279,281,3,28,14,0,280,279,1,0,0,0,281,284,1,0,
		0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,27,1,0,0,0,284,282,1,0,0,0,285,
		288,3,30,15,0,286,288,3,24,12,0,287,285,1,0,0,0,287,286,1,0,0,0,288,29,
		1,0,0,0,289,296,3,38,19,0,290,296,3,32,16,0,291,296,3,34,17,0,292,296,
		3,36,18,0,293,296,3,48,24,0,294,296,3,54,27,0,295,289,1,0,0,0,295,290,
		1,0,0,0,295,291,1,0,0,0,295,292,1,0,0,0,295,293,1,0,0,0,295,294,1,0,0,
		0,296,31,1,0,0,0,297,307,5,7,0,0,298,303,5,91,0,0,299,300,5,77,0,0,300,
		302,5,91,0,0,301,299,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,
		0,0,0,304,308,1,0,0,0,305,303,1,0,0,0,306,308,5,94,0,0,307,298,1,0,0,0,
		307,306,1,0,0,0,308,33,1,0,0,0,309,312,5,50,0,0,310,313,3,38,19,0,311,
		313,3,62,31,0,312,310,1,0,0,0,312,311,1,0,0,0,313,314,1,0,0,0,314,315,
		5,51,0,0,315,317,5,63,0,0,316,318,5,63,0,0,317,316,1,0,0,0,317,318,1,0,
		0,0,318,35,1,0,0,0,319,322,5,50,0,0,320,323,3,38,19,0,321,323,3,62,31,
		0,322,320,1,0,0,0,322,321,1,0,0,0,323,324,1,0,0,0,324,325,5,51,0,0,325,
		327,5,64,0,0,326,328,5,64,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,37,1,
		0,0,0,329,334,3,42,21,0,330,334,3,44,22,0,331,334,3,46,23,0,332,334,3,
		40,20,0,333,329,1,0,0,0,333,330,1,0,0,0,333,331,1,0,0,0,333,332,1,0,0,
		0,334,39,1,0,0,0,335,353,5,18,0,0,336,337,5,18,0,0,337,340,3,62,31,0,338,
		339,5,78,0,0,339,341,3,62,31,0,340,338,1,0,0,0,340,341,1,0,0,0,341,353,
		1,0,0,0,342,343,5,18,0,0,343,344,3,62,31,0,344,345,5,78,0,0,345,350,5,
		45,0,0,346,347,5,50,0,0,347,348,3,62,31,0,348,349,5,51,0,0,349,351,1,0,
		0,0,350,346,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,335,1,0,0,0,352,
		336,1,0,0,0,352,342,1,0,0,0,353,41,1,0,0,0,354,355,3,76,38,0,355,362,5,
		91,0,0,356,357,5,58,0,0,357,358,3,76,38,0,358,359,5,91,0,0,359,361,1,0,
		0,0,360,356,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,
		375,1,0,0,0,364,362,1,0,0,0,365,366,3,76,38,0,366,371,5,91,0,0,367,368,
		5,58,0,0,368,370,5,91,0,0,369,367,1,0,0,0,370,373,1,0,0,0,371,369,1,0,
		0,0,371,372,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,374,354,1,0,0,0,374,
		365,1,0,0,0,375,43,1,0,0,0,376,378,5,68,0,0,377,376,1,0,0,0,377,378,1,
		0,0,0,378,381,1,0,0,0,379,382,3,72,36,0,380,382,5,8,0,0,381,379,1,0,0,
		0,381,380,1,0,0,0,382,384,1,0,0,0,383,377,1,0,0,0,383,384,1,0,0,0,384,
		385,1,0,0,0,385,388,5,91,0,0,386,388,3,62,31,0,387,383,1,0,0,0,387,386,
		1,0,0,0,388,405,1,0,0,0,389,401,5,58,0,0,390,392,5,68,0,0,391,390,1,0,
		0,0,391,392,1,0,0,0,392,395,1,0,0,0,393,396,3,72,36,0,394,396,5,8,0,0,
		395,393,1,0,0,0,395,394,1,0,0,0,396,398,1,0,0,0,397,391,1,0,0,0,397,398,
		1,0,0,0,398,399,1,0,0,0,399,402,5,91,0,0,400,402,3,62,31,0,401,397,1,0,
		0,0,401,400,1,0,0,0,402,404,1,0,0,0,403,389,1,0,0,0,404,407,1,0,0,0,405,
		403,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,405,1,0,0,0,408,409,5,
		49,0,0,409,410,3,62,31,0,410,45,1,0,0,0,411,412,3,62,31,0,412,413,7,2,
		0,0,413,414,3,62,31,0,414,47,1,0,0,0,415,416,5,39,0,0,416,420,3,62,31,
		0,417,418,5,60,0,0,418,421,3,30,15,0,419,421,3,24,12,0,420,417,1,0,0,0,
		420,419,1,0,0,0,421,425,1,0,0,0,422,424,3,50,25,0,423,422,1,0,0,0,424,
		427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,429,1,0,0,0,427,425,1,
		0,0,0,428,430,3,52,26,0,429,428,1,0,0,0,429,430,1,0,0,0,430,49,1,0,0,0,
		431,432,5,41,0,0,432,436,3,62,31,0,433,434,5,60,0,0,434,437,3,30,15,0,
		435,437,3,24,12,0,436,433,1,0,0,0,436,435,1,0,0,0,437,51,1,0,0,0,438,442,
		5,40,0,0,439,440,5,60,0,0,440,443,3,30,15,0,441,443,3,24,12,0,442,439,
		1,0,0,0,442,441,1,0,0,0,443,53,1,0,0,0,444,448,3,56,28,0,445,448,3,58,
		29,0,446,448,3,60,30,0,447,444,1,0,0,0,447,445,1,0,0,0,447,446,1,0,0,0,
		448,55,1,0,0,0,449,450,5,42,0,0,450,454,3,62,31,0,451,452,5,60,0,0,452,
		455,3,30,15,0,453,455,3,24,12,0,454,451,1,0,0,0,454,453,1,0,0,0,455,57,
		1,0,0,0,456,457,5,91,0,0,457,458,5,60,0,0,458,459,7,3,0,0,459,462,5,50,
		0,0,460,463,3,66,33,0,461,463,3,62,31,0,462,460,1,0,0,0,462,461,1,0,0,
		0,463,464,1,0,0,0,464,467,5,58,0,0,465,468,3,66,33,0,466,468,3,62,31,0,
		467,465,1,0,0,0,467,466,1,0,0,0,468,469,1,0,0,0,469,473,5,51,0,0,470,471,
		5,60,0,0,471,474,3,30,15,0,472,474,3,24,12,0,473,470,1,0,0,0,473,472,1,
		0,0,0,474,59,1,0,0,0,475,476,5,18,0,0,476,477,5,9,0,0,477,478,5,91,0,0,
		478,479,5,47,0,0,479,480,3,62,31,0,480,483,5,78,0,0,481,484,3,30,15,0,
		482,484,3,24,12,0,483,481,1,0,0,0,483,482,1,0,0,0,484,61,1,0,0,0,485,486,
		6,31,-1,0,486,487,5,50,0,0,487,488,3,62,31,0,488,489,5,51,0,0,489,523,
		1,0,0,0,490,491,5,2,0,0,491,492,5,77,0,0,492,523,3,62,31,28,493,494,3,
		74,37,0,494,495,5,50,0,0,495,496,3,62,31,0,496,497,5,51,0,0,497,523,1,
		0,0,0,498,499,5,56,0,0,499,504,3,62,31,0,500,501,5,58,0,0,501,503,3,62,
		31,0,502,500,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,
		507,1,0,0,0,506,504,1,0,0,0,507,508,5,57,0,0,508,523,1,0,0,0,509,510,5,
		25,0,0,510,511,5,50,0,0,511,523,5,51,0,0,512,513,7,4,0,0,513,523,3,62,
		31,18,514,523,3,68,34,0,515,523,3,70,35,0,516,523,3,64,32,0,517,523,3,
		66,33,0,518,523,5,24,0,0,519,523,5,94,0,0,520,523,5,95,0,0,521,523,5,38,
		0,0,522,485,1,0,0,0,522,490,1,0,0,0,522,493,1,0,0,0,522,498,1,0,0,0,522,
		509,1,0,0,0,522,512,1,0,0,0,522,514,1,0,0,0,522,515,1,0,0,0,522,516,1,
		0,0,0,522,517,1,0,0,0,522,518,1,0,0,0,522,519,1,0,0,0,522,520,1,0,0,0,
		522,521,1,0,0,0,523,589,1,0,0,0,524,525,10,24,0,0,525,526,5,77,0,0,526,
		588,3,62,31,25,527,528,10,17,0,0,528,529,7,5,0,0,529,588,3,62,31,18,530,
		531,10,16,0,0,531,532,7,6,0,0,532,588,3,62,31,17,533,534,10,15,0,0,534,
		535,7,7,0,0,535,588,3,62,31,16,536,537,10,14,0,0,537,538,7,8,0,0,538,588,
		3,62,31,15,539,540,10,13,0,0,540,541,7,9,0,0,541,588,3,62,31,14,542,543,
		10,12,0,0,543,544,7,10,0,0,544,588,3,62,31,13,545,546,10,11,0,0,546,547,
		7,11,0,0,547,588,3,62,31,12,548,549,10,10,0,0,549,550,7,12,0,0,550,588,
		3,62,31,11,551,552,10,9,0,0,552,553,7,13,0,0,553,588,3,62,31,10,554,555,
		10,27,0,0,555,556,5,52,0,0,556,557,3,62,31,0,557,558,5,53,0,0,558,588,
		1,0,0,0,559,560,10,26,0,0,560,561,5,77,0,0,561,588,5,19,0,0,562,563,10,
		25,0,0,563,564,5,77,0,0,564,588,5,20,0,0,565,566,10,23,0,0,566,578,5,50,
		0,0,567,569,3,62,31,0,568,567,1,0,0,0,568,569,1,0,0,0,569,579,1,0,0,0,
		570,575,3,62,31,0,571,572,5,58,0,0,572,574,3,62,31,0,573,571,1,0,0,0,574,
		577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,579,1,0,0,0,577,575,1,
		0,0,0,578,568,1,0,0,0,578,570,1,0,0,0,579,580,1,0,0,0,580,588,5,51,0,0,
		581,582,10,19,0,0,582,585,5,78,0,0,583,586,3,76,38,0,584,586,5,91,0,0,
		585,583,1,0,0,0,585,584,1,0,0,0,586,588,1,0,0,0,587,524,1,0,0,0,587,527,
		1,0,0,0,587,530,1,0,0,0,587,533,1,0,0,0,587,536,1,0,0,0,587,539,1,0,0,
		0,587,542,1,0,0,0,587,545,1,0,0,0,587,548,1,0,0,0,587,551,1,0,0,0,587,
		554,1,0,0,0,587,559,1,0,0,0,587,562,1,0,0,0,587,565,1,0,0,0,587,581,1,
		0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,63,1,0,0,0,591,
		589,1,0,0,0,592,594,7,8,0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,1,
		0,0,0,595,596,5,93,0,0,596,598,5,62,0,0,597,599,5,93,0,0,598,597,1,0,0,
		0,598,599,1,0,0,0,599,65,1,0,0,0,600,602,7,8,0,0,601,600,1,0,0,0,601,602,
		1,0,0,0,602,603,1,0,0,0,603,604,5,93,0,0,604,67,1,0,0,0,605,606,7,14,0,
		0,606,69,1,0,0,0,607,608,7,15,0,0,608,71,1,0,0,0,609,614,3,76,38,0,610,
		614,3,74,37,0,611,614,3,78,39,0,612,614,5,91,0,0,613,609,1,0,0,0,613,610,
		1,0,0,0,613,611,1,0,0,0,613,612,1,0,0,0,614,73,1,0,0,0,615,620,3,80,40,
		0,616,620,3,82,41,0,617,618,5,91,0,0,618,620,5,26,0,0,619,615,1,0,0,0,
		619,616,1,0,0,0,619,617,1,0,0,0,620,75,1,0,0,0,621,629,5,10,0,0,622,629,
		5,11,0,0,623,629,5,12,0,0,624,629,5,13,0,0,625,629,5,14,0,0,626,627,5,
		21,0,0,627,629,5,10,0,0,628,621,1,0,0,0,628,622,1,0,0,0,628,623,1,0,0,
		0,628,624,1,0,0,0,628,625,1,0,0,0,628,626,1,0,0,0,629,77,1,0,0,0,630,633,
		5,56,0,0,631,634,3,72,36,0,632,634,5,8,0,0,633,631,1,0,0,0,633,632,1,0,
		0,0,634,636,1,0,0,0,635,637,5,91,0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,
		648,1,0,0,0,638,641,5,58,0,0,639,642,3,72,36,0,640,642,5,8,0,0,641,639,
		1,0,0,0,641,640,1,0,0,0,642,644,1,0,0,0,643,645,5,91,0,0,644,643,1,0,0,
		0,644,645,1,0,0,0,645,647,1,0,0,0,646,638,1,0,0,0,647,650,1,0,0,0,648,
		646,1,0,0,0,648,649,1,0,0,0,649,651,1,0,0,0,650,648,1,0,0,0,651,652,5,
		57,0,0,652,79,1,0,0,0,653,661,5,27,0,0,654,661,5,28,0,0,655,661,5,29,0,
		0,656,661,5,30,0,0,657,661,5,31,0,0,658,659,5,21,0,0,659,661,5,27,0,0,
		660,653,1,0,0,0,660,654,1,0,0,0,660,655,1,0,0,0,660,656,1,0,0,0,660,657,
		1,0,0,0,660,658,1,0,0,0,661,81,1,0,0,0,662,686,5,52,0,0,663,666,3,72,36,
		0,664,666,5,8,0,0,665,663,1,0,0,0,665,664,1,0,0,0,666,687,1,0,0,0,667,
		670,3,72,36,0,668,670,5,8,0,0,669,667,1,0,0,0,669,668,1,0,0,0,670,672,
		1,0,0,0,671,673,5,91,0,0,672,671,1,0,0,0,672,673,1,0,0,0,673,682,1,0,0,
		0,674,677,5,58,0,0,675,678,3,72,36,0,676,678,5,8,0,0,677,675,1,0,0,0,677,
		676,1,0,0,0,678,680,1,0,0,0,679,681,5,91,0,0,680,679,1,0,0,0,680,681,1,
		0,0,0,681,683,1,0,0,0,682,674,1,0,0,0,683,684,1,0,0,0,684,682,1,0,0,0,
		684,685,1,0,0,0,685,687,1,0,0,0,686,665,1,0,0,0,686,669,1,0,0,0,687,688,
		1,0,0,0,688,689,5,53,0,0,689,83,1,0,0,0,101,90,92,103,107,110,120,123,
		129,135,138,148,151,157,163,166,171,175,177,180,183,188,192,194,204,206,
		215,223,227,232,236,241,245,248,255,258,263,266,270,282,287,295,303,307,
		312,317,322,327,333,340,350,352,362,371,374,377,381,383,387,391,395,397,
		401,405,420,425,429,436,442,447,454,462,467,473,483,504,522,568,575,578,
		585,587,589,593,598,601,613,619,628,633,636,641,644,648,660,665,669,672,
		677,680,684,686
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
