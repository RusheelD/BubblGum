//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Lexer_Parser/Parser/BubblGum.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BubblGumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		THIS=1, SWEETS=2, STOCK=3, RECIPE=4, CANDY=5, GUM=6, CHEW=7, FLAVOR=8, 
		FLAVORS=9, SUGAR=10, CARB=11, CAL=12, KCAL=13, YUM=14, BOLD=15, SUBTLE=16, 
		BLAND=17, POP=18, PURE=19, STICKY=20, WRAPPER=21, MINTPACK=22, PACK=23, 
		SUGARPACK=24, CARBPACK=25, CALPACK=26, KCALPACK=27, YUMPACK=28, YUP=29, 
		NOPE=30, AND=31, OR=32, XOR=33, XNOR=34, FLAVORLESS=35, IF=36, ELSE=37, 
		ELIF=38, WHILE=39, REPEAT_UP=40, REPEAT_DOWN=41, POPSTREAM=42, NOT=43, 
		IN=44, IS=45, ASSIGN=46, LEFT_PAREN=47, RIGHT_PAREN=48, LEFT_SQUARE_BRACKET=49, 
		RIGHT_SQUARE_BRACKET=50, LEFT_CURLY_BRACKET=51, RIGHT_CURLY_BRACKET=52, 
		LEFT_ANGLE_BRACKET=53, RIGHT_ANGLE_BRACKET=54, COMMA=55, SEMICOLON=56, 
		COLON=57, ELLIPSES=58, DOT=59, PRINT=60, DEBUG=61, DOUBLE_QUOTE=62, SINGLE_QUOTE=63, 
		BACK_TICK=64, IMMUTABLE=65, GT_EQ=66, LT_EQ=67, LEFT_SHIFT=68, RIGHT_SHIFT=69, 
		NOT_EQ_1=70, NOT_EQ_2=71, PLUS_COLON=72, MINUS_COLON=73, THIN_ARROW=74, 
		THICK_ARROW=75, SUBCLASS_OF=76, EQUALS=77, AND_OP=78, OR_OP=79, NOT_OP=80, 
		XOR_OP=81, PLUS=82, MINUS=83, POWER=84, MULTIPLY=85, DIVIDE=86, MODULO=87, 
		IDENTIFIER=88, LETTER=89, INTEGER_LITERAL=90, STRING_LITERAL=91, CHAR_LITERAL=92, 
		ESCAPE_SEQUENCE=93, WHITE=94, EOL=95, SINGLE_LINE_COMMENT=96, MULTI_LINE_COMMENT=97;
	public const int
		RULE_program = 0, RULE_define_stock = 1, RULE_chew_import = 2, RULE_class = 3, 
		RULE_interface = 4, RULE_interface_member = 5, RULE_class_member = 6, 
		RULE_visibility = 7, RULE_struct = 8, RULE_function = 9, RULE_function_header = 10, 
		RULE_parameters = 11, RULE_outputs = 12, RULE_scope_body = 13, RULE_statement_list = 14, 
		RULE_statement = 15, RULE_single_statement = 16, RULE_print_statement = 17, 
		RULE_debug_statement = 18, RULE_base_statement = 19, RULE_return_statement = 20, 
		RULE_primitive_declaration = 21, RULE_assignment = 22, RULE_variable_inc_dec = 23, 
		RULE_if_statement = 24, RULE_elif_statement = 25, RULE_else_statement = 26, 
		RULE_loop = 27, RULE_while_loop = 28, RULE_repeat_loop = 29, RULE_pop_loop = 30, 
		RULE_expression = 31, RULE_double = 32, RULE_int = 33, RULE_boolean = 34, 
		RULE_identifier = 35, RULE_type = 36, RULE_array = 37, RULE_primitive = 38, 
		RULE_tuple = 39, RULE_primitive_pack = 40, RULE_any_array = 41;
	public static readonly string[] ruleNames = {
		"program", "define_stock", "chew_import", "class", "interface", "interface_member", 
		"class_member", "visibility", "struct", "function", "function_header", 
		"parameters", "outputs", "scope_body", "statement_list", "statement", 
		"single_statement", "print_statement", "debug_statement", "base_statement", 
		"return_statement", "primitive_declaration", "assignment", "variable_inc_dec", 
		"if_statement", "elif_statement", "else_statement", "loop", "while_loop", 
		"repeat_loop", "pop_loop", "expression", "double", "int", "boolean", "identifier", 
		"type", "array", "primitive", "tuple", "primitive_pack", "any_array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'gum'", "'sweets'", "'stock'", "'recipe'", "'candy'", "'Gum'", 
		"'Chew'", "'flavor'", "'flavors'", "'sugar'", "'carb'", "'cal'", "'kcal'", 
		"'yum'", "'bold'", "'subtle'", "'bland'", "'pop'", "'pure'", "'sticky'", 
		"'Wrapper'", "'mintpack'", "'pack'", "'sugarpack'", "'carbpack'", "'calpack'", 
		"'kcalpack'", "'yumpack'", "'yup'", "'nope'", "'and'", "'or'", "'xor'", 
		"'xnor'", null, "'if'", "'else'", "'elif'", "'while'", "'repeatUp'", "'repeatDown'", 
		"'popstream'", "'not'", "'in'", "'is'", "'::'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "','", "';'", "':'", "'...'", "'.'", "'!'", 
		"'?'", "'\"'", "'''", "'`'", "'$'", "'>='", "'<='", "'<:'", "':>'", "'<>'", 
		"'~='", "'+:'", "'-:'", "'->'", "'=>'", "':<'", "'='", "'&'", "'|'", "'~'", 
		"'^'", "'+'", "'-'", "'**'", "'*'", "'/'", "'%'", null, null, null, null, 
		null, null, null, "'\\r\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "THIS", "SWEETS", "STOCK", "RECIPE", "CANDY", "GUM", "CHEW", "FLAVOR", 
		"FLAVORS", "SUGAR", "CARB", "CAL", "KCAL", "YUM", "BOLD", "SUBTLE", "BLAND", 
		"POP", "PURE", "STICKY", "WRAPPER", "MINTPACK", "PACK", "SUGARPACK", "CARBPACK", 
		"CALPACK", "KCALPACK", "YUMPACK", "YUP", "NOPE", "AND", "OR", "XOR", "XNOR", 
		"FLAVORLESS", "IF", "ELSE", "ELIF", "WHILE", "REPEAT_UP", "REPEAT_DOWN", 
		"POPSTREAM", "NOT", "IN", "IS", "ASSIGN", "LEFT_PAREN", "RIGHT_PAREN", 
		"LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", "RIGHT_CURLY_BRACKET", 
		"LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", "COMMA", "SEMICOLON", "COLON", 
		"ELLIPSES", "DOT", "PRINT", "DEBUG", "DOUBLE_QUOTE", "SINGLE_QUOTE", "BACK_TICK", 
		"IMMUTABLE", "GT_EQ", "LT_EQ", "LEFT_SHIFT", "RIGHT_SHIFT", "NOT_EQ_1", 
		"NOT_EQ_2", "PLUS_COLON", "MINUS_COLON", "THIN_ARROW", "THICK_ARROW", 
		"SUBCLASS_OF", "EQUALS", "AND_OP", "OR_OP", "NOT_OP", "XOR_OP", "PLUS", 
		"MINUS", "POWER", "MULTIPLY", "DIVIDE", "MODULO", "IDENTIFIER", "LETTER", 
		"INTEGER_LITERAL", "STRING_LITERAL", "CHAR_LITERAL", "ESCAPE_SEQUENCE", 
		"WHITE", "EOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BubblGum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BubblGumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BubblGumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BubblGumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BubblGumParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Chew_importContext[] chew_import() {
			return GetRuleContexts<Chew_importContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Chew_importContext chew_import(int i) {
			return GetRuleContext<Chew_importContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Define_stockContext define_stock() {
			return GetRuleContext<Define_stockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext[] @interface() {
			return GetRuleContexts<InterfaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface(int i) {
			return GetRuleContext<InterfaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CHEW) {
				{
				{
				State = 84;
				chew_import();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STOCK) {
				{
				State = 90;
				define_stock();
				}
			}

			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11972137577348470L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				State = 98;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 93;
					@class();
					}
					break;
				case 2:
					{
					State = 94;
					@interface();
					}
					break;
				case 3:
					{
					State = 95;
					function();
					}
					break;
				case 4:
					{
					State = 96;
					@struct();
					}
					break;
				case 5:
					{
					State = 97;
					statement();
					}
					break;
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_stockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOCK() { return GetToken(BubblGumParser.STOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public Define_stockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_stock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDefine_stock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDefine_stock(this);
		}
	}

	[RuleVersion(0)]
	public Define_stockContext define_stock() {
		Define_stockContext _localctx = new Define_stockContext(Context, State);
		EnterRule(_localctx, 2, RULE_define_stock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(STOCK);
			State = 106;
			Match(IDENTIFIER);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==THIN_ARROW) {
				{
				{
				State = 107;
				Match(THIN_ARROW);
				State = 108;
				Match(IDENTIFIER);
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Chew_importContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHEW() { return GetToken(BubblGumParser.CHEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BubblGumParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public Chew_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chew_import; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterChew_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitChew_import(this);
		}
	}

	[RuleVersion(0)]
	public Chew_importContext chew_import() {
		Chew_importContext _localctx = new Chew_importContext(Context, State);
		EnterRule(_localctx, 4, RULE_chew_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(CHEW);
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				{
				State = 115;
				Match(IDENTIFIER);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==THIN_ARROW) {
					{
					{
					State = 116;
					Match(THIN_ARROW);
					State = 117;
					Match(IDENTIFIER);
					}
					}
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case STRING_LITERAL:
				{
				State = 123;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUM() { return GetToken(BubblGumParser.GUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext[] class_member() {
			return GetRuleContexts<Class_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext class_member(int i) {
			return GetRuleContext<Class_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 6, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 126;
				Match(STICKY);
				}
			}

			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 129;
				visibility();
				}
			}

			State = 132;
			Match(GUM);
			State = 133;
			Match(IDENTIFIER);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 134;
				Match(COLON);
				State = 135;
				Match(IDENTIFIER);
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 136;
					Match(COMMA);
					State = 137;
					Match(IDENTIFIER);
					}
					}
					State = 142;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 145;
			Match(LEFT_CURLY_BRACKET);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9719719286013206L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				{
				State = 146;
				class_member();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(BubblGumParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext[] interface_member() {
			return GetRuleContexts<Interface_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext interface_member(int i) {
			return GetRuleContext<Interface_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 8, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 154;
				Match(STICKY);
				}
			}

			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 157;
				visibility();
				}
			}

			State = 160;
			Match(WRAPPER);
			State = 161;
			Match(IDENTIFIER);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 162;
				Match(COLON);
				State = 163;
				Match(IDENTIFIER);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 164;
					Match(COMMA);
					State = 165;
					Match(IDENTIFIER);
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 173;
			Match(LEFT_CURLY_BRACKET);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9719719286013206L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				{
				State = 174;
				interface_member();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 180;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Interface_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface_member(this);
		}
	}

	[RuleVersion(0)]
	public Interface_memberContext interface_member() {
		Interface_memberContext _localctx = new Interface_memberContext(Context, State);
		EnterRule(_localctx, 10, RULE_interface_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 182;
				Match(STICKY);
				}
			}

			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 185;
				visibility();
				}
			}

			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 188;
				function_header();
				}
				break;
			case 2:
				{
				{
				State = 189;
				primitive_declaration();
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 190;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 193;
				assignment();
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 194;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Class_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass_member(this);
		}
	}

	[RuleVersion(0)]
	public Class_memberContext class_member() {
		Class_memberContext _localctx = new Class_memberContext(Context, State);
		EnterRule(_localctx, 12, RULE_class_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 199;
				Match(STICKY);
				}
			}

			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 202;
				visibility();
				}
			}

			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 205;
				function();
				}
				break;
			case 2:
				{
				{
				State = 206;
				primitive_declaration();
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 207;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 210;
				assignment();
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 211;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOLD() { return GetToken(BubblGumParser.BOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTLE() { return GetToken(BubblGumParser.SUBTLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLAND() { return GetToken(BubblGumParser.BLAND, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 14, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANDY() { return GetToken(BubblGumParser.CANDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext[] primitive_declaration() {
			return GetRuleContexts<Primitive_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration(int i) {
			return GetRuleContext<Primitive_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(CANDY);
			State = 219;
			Match(COLON);
			State = 220;
			Match(IDENTIFIER);
			State = 221;
			Match(LEFT_CURLY_BRACKET);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9719719284735238L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				State = 224;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 222;
					primitive_declaration();
					}
					break;
				case 2:
					{
					State = 223;
					assignment();
					}
					break;
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			function_header();
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 232;
				Match(COLON);
				State = 233;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 234;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECIPE() { return GetToken(BubblGumParser.RECIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputsContext outputs() {
			return GetRuleContext<OutputsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction_header(this);
		}
	}

	[RuleVersion(0)]
	public Function_headerContext function_header() {
		Function_headerContext _localctx = new Function_headerContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(RECIPE);
			State = 238;
			Match(COLON);
			State = 239;
			Match(IDENTIFIER);
			State = 240;
			parameters();
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 241;
				outputs();
				}
				break;
			case 2:
				{
				State = 242;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSES() { return GetTokens(BubblGumParser.ELLIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSES(int i) {
			return GetToken(BubblGumParser.ELLIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(LEFT_PAREN);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9570149728812032L) != 0) || _la==IMMUTABLE || _la==IDENTIFIER) {
				{
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMMUTABLE) {
					{
					State = 246;
					Match(IMMUTABLE);
					}
				}

				State = 249;
				type();
				State = 250;
				Match(IDENTIFIER);
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSES) {
					{
					State = 251;
					Match(ELLIPSES);
					}
				}

				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 254;
					Match(COMMA);
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 255;
						Match(IMMUTABLE);
						}
					}

					State = 258;
					type();
					State = 259;
					Match(IDENTIFIER);
					State = 261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELLIPSES) {
						{
						State = 260;
						Match(ELLIPSES);
						}
					}

					}
					}
					State = 267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 270;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSES() { return GetTokens(BubblGumParser.ELLIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSES(int i) {
			return GetToken(BubblGumParser.ELLIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public OutputsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterOutputs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitOutputs(this);
		}
	}

	[RuleVersion(0)]
	public OutputsContext outputs() {
		OutputsContext _localctx = new OutputsContext(Context, State);
		EnterRule(_localctx, 24, RULE_outputs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(LEFT_ANGLE_BRACKET);
			{
			{
			State = 273;
			type();
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 274;
				Match(IDENTIFIER);
				}
			}

			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSES) {
				{
				State = 277;
				Match(ELLIPSES);
				}
			}

			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 280;
				Match(COMMA);
				State = 281;
				type();
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 282;
					Match(IDENTIFIER);
					}
				}

				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSES) {
					{
					State = 285;
					Match(ELLIPSES);
					}
				}

				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
			State = 293;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scope_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		public Scope_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterScope_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitScope_body(this);
		}
	}

	[RuleVersion(0)]
	public Scope_bodyContext scope_body() {
		Scope_bodyContext _localctx = new Scope_bodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_scope_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(LEFT_CURLY_BRACKET);
			State = 296;
			statement_list();
			State = 297;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11972137573973254L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 243695617L) != 0)) {
				{
				{
				State = 299;
				statement();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case MINTPACK:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Debug_statementContext debug_statement() {
			return GetRuleContext<Debug_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public Single_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitSingle_statement(this);
		}
	}

	[RuleVersion(0)]
	public Single_statementContext single_statement() {
		Single_statementContext _localctx = new Single_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_single_statement);
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				base_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				print_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311;
				debug_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 312;
				if_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 313;
				loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PRINT() { return GetTokens(BubblGumParser.PRINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT(int i) {
			return GetToken(BubblGumParser.PRINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_print_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(LEFT_PAREN);
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 317;
				base_statement();
				}
				break;
			case 2:
				{
				State = 318;
				expression(0);
				}
				break;
			}
			State = 321;
			Match(RIGHT_PAREN);
			State = 322;
			Match(PRINT);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRINT) {
				{
				State = 323;
				Match(PRINT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Debug_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEBUG() { return GetTokens(BubblGumParser.DEBUG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG(int i) {
			return GetToken(BubblGumParser.DEBUG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Debug_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debug_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDebug_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDebug_statement(this);
		}
	}

	[RuleVersion(0)]
	public Debug_statementContext debug_statement() {
		Debug_statementContext _localctx = new Debug_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_debug_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(LEFT_PAREN);
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 327;
				base_statement();
				}
				break;
			case 2:
				{
				State = 328;
				expression(0);
				}
				break;
			}
			State = 331;
			Match(RIGHT_PAREN);
			State = 332;
			Match(DEBUG);
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEBUG) {
				{
				State = 333;
				Match(DEBUG);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_inc_decContext variable_inc_dec() {
			return GetRuleContext<Variable_inc_decContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Base_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBase_statement(this);
		}
	}

	[RuleVersion(0)]
	public Base_statementContext base_statement() {
		Base_statementContext _localctx = new Base_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_base_statement);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 336;
				primitive_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 338;
				variable_inc_dec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 339;
				return_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POPSTREAM() { return GetToken(BubblGumParser.POPSTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_return_statement);
		int _la;
		try {
			State = 359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 342;
				Match(POP);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 343;
				Match(POP);
				State = 344;
				expression(0);
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THICK_ARROW) {
					{
					State = 345;
					Match(THICK_ARROW);
					State = 346;
					expression(0);
					}
				}

				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 349;
				Match(POP);
				State = 350;
				expression(0);
				State = 351;
				Match(THICK_ARROW);
				State = 352;
				Match(POPSTREAM);
				State = 357;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 353;
					Match(LEFT_PAREN);
					State = 354;
					expression(0);
					State = 355;
					Match(RIGHT_PAREN);
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext[] primitive() {
			return GetRuleContexts<PrimitiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive(int i) {
			return GetRuleContext<PrimitiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Primitive_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_declarationContext primitive_declaration() {
		Primitive_declarationContext _localctx = new Primitive_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_primitive_declaration);
		int _la;
		try {
			State = 381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 361;
				primitive();
				State = 362;
				Match(IDENTIFIER);
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 363;
					Match(COMMA);
					State = 364;
					primitive();
					State = 365;
					Match(IDENTIFIER);
					}
					}
					State = 371;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 372;
				primitive();
				State = 373;
				Match(IDENTIFIER);
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 374;
					Match(COMMA);
					State = 375;
					Match(IDENTIFIER);
					}
					}
					State = 380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BubblGumParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				{
				State = 390;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 384;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 383;
						Match(IMMUTABLE);
						}
					}

					State = 388;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 386;
						type();
						}
						break;
					case FLAVOR:
						{
						State = 387;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 392;
				Match(IDENTIFIER);
				}
				}
				break;
			case 2:
				{
				State = 393;
				expression(0);
				}
				break;
			}
			State = 412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 396;
				Match(COMMA);
				State = 408;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					{
					State = 404;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						State = 398;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==IMMUTABLE) {
							{
							State = 397;
							Match(IMMUTABLE);
							}
						}

						State = 402;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SUGAR:
						case CARB:
						case CAL:
						case KCAL:
						case YUM:
						case PURE:
						case SUGARPACK:
						case CARBPACK:
						case CALPACK:
						case KCALPACK:
						case YUMPACK:
						case LEFT_SQUARE_BRACKET:
						case LEFT_ANGLE_BRACKET:
						case IDENTIFIER:
							{
							State = 400;
							type();
							}
							break;
						case FLAVOR:
							{
							State = 401;
							Match(FLAVOR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					State = 406;
					Match(IDENTIFIER);
					}
					}
					break;
				case 2:
					{
					State = 407;
					expression(0);
					}
					break;
				}
				}
				}
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 415;
			Match(ASSIGN);
			State = 416;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_inc_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_COLON() { return GetToken(BubblGumParser.PLUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_COLON() { return GetToken(BubblGumParser.MINUS_COLON, 0); }
		public Variable_inc_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_inc_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVariable_inc_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVariable_inc_dec(this);
		}
	}

	[RuleVersion(0)]
	public Variable_inc_decContext variable_inc_dec() {
		Variable_inc_decContext _localctx = new Variable_inc_decContext(Context, State);
		EnterRule(_localctx, 46, RULE_variable_inc_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			expression(0);
			State = 419;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_COLON || _la==MINUS_COLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 420;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BubblGumParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext[] elif_statement() {
			return GetRuleContexts<Elif_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext elif_statement(int i) {
			return GetRuleContext<Elif_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(IF);
			State = 423;
			expression(0);
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 424;
				Match(COLON);
				State = 425;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 426;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 432;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 429;
					elif_statement();
					}
					} 
				}
				State = 434;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			State = 436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 435;
				else_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(BubblGumParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Elif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElif_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElif_statement(this);
		}
	}

	[RuleVersion(0)]
	public Elif_statementContext elif_statement() {
		Elif_statementContext _localctx = new Elif_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_elif_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 438;
			Match(ELIF);
			State = 439;
			expression(0);
			State = 443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 440;
				Match(COLON);
				State = 441;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 442;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BubblGumParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_else_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 445;
			Match(ELSE);
			State = 449;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 446;
				Match(COLON);
				State = 447;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 448;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_loopContext repeat_loop() {
			return GetRuleContext<Repeat_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pop_loopContext pop_loop() {
			return GetRuleContext<Pop_loopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 54, RULE_loop);
		try {
			State = 454;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				while_loop();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452;
				repeat_loop();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 453;
				pop_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BubblGumParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 56, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			Match(WHILE);
			State = 457;
			expression(0);
			State = 461;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 458;
				Match(COLON);
				State = 459;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 460;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(BubblGumParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(BubblGumParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BubblGumParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_DOWN() { return GetToken(BubblGumParser.REPEAT_DOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_UP() { return GetToken(BubblGumParser.REPEAT_UP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Repeat_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterRepeat_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitRepeat_loop(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_loopContext repeat_loop() {
		Repeat_loopContext _localctx = new Repeat_loopContext(Context, State);
		EnterRule(_localctx, 58, RULE_repeat_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(IDENTIFIER);
			State = 464;
			Match(COLON);
			State = 465;
			_la = TokenStream.LA(1);
			if ( !(_la==REPEAT_UP || _la==REPEAT_DOWN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 466;
			Match(LEFT_PAREN);
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 467;
				@int();
				}
				break;
			case 2:
				{
				State = 468;
				expression(0);
				}
				break;
			}
			State = 471;
			Match(COMMA);
			State = 474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 472;
				@int();
				}
				break;
			case 2:
				{
				State = 473;
				expression(0);
				}
				break;
			}
			State = 476;
			Match(RIGHT_PAREN);
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 477;
				Match(COLON);
				State = 478;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 479;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pop_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVORS() { return GetToken(BubblGumParser.FLAVORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BubblGumParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public Pop_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pop_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPop_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPop_loop(this);
		}
	}

	[RuleVersion(0)]
	public Pop_loopContext pop_loop() {
		Pop_loopContext _localctx = new Pop_loopContext(Context, State);
		EnterRule(_localctx, 60, RULE_pop_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(POP);
			State = 483;
			Match(FLAVORS);
			State = 484;
			Match(IDENTIFIER);
			State = 485;
			Match(IN);
			State = 486;
			expression(0);
			State = 487;
			Match(THICK_ARROW);
			State = 490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case MINTPACK:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				{
				State = 488;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 489;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWEETS() { return GetToken(BubblGumParser.SWEETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW() { return GetToken(BubblGumParser.THIN_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BubblGumParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_OP() { return GetToken(BubblGumParser.NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINTPACK() { return GetToken(BubblGumParser.MINTPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BubblGumParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(BubblGumParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVORLESS() { return GetToken(BubblGumParser.FLAVORLESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(BubblGumParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(BubblGumParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT() { return GetToken(BubblGumParser.LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT() { return GetToken(BubblGumParser.RIGHT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(BubblGumParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(BubblGumParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(BubblGumParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(BubblGumParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(BubblGumParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_1() { return GetToken(BubblGumParser.NOT_EQ_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_2() { return GetToken(BubblGumParser.NOT_EQ_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BubblGumParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_OF() { return GetToken(BubblGumParser.SUBCLASS_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BubblGumParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(BubblGumParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(BubblGumParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_OP() { return GetToken(BubblGumParser.XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BubblGumParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(BubblGumParser.OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 493;
				Match(LEFT_PAREN);
				State = 494;
				expression(0);
				State = 495;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 497;
				Match(SWEETS);
				State = 498;
				Match(THIN_ARROW);
				State = 499;
				expression(25);
				}
				break;
			case 3:
				{
				State = 500;
				array();
				State = 501;
				Match(LEFT_PAREN);
				State = 502;
				expression(0);
				State = 503;
				Match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				State = 505;
				Match(LEFT_ANGLE_BRACKET);
				State = 506;
				expression(0);
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 507;
					Match(COMMA);
					State = 508;
					expression(0);
					}
					}
					State = 513;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 514;
				Match(RIGHT_ANGLE_BRACKET);
				}
				break;
			case 5:
				{
				State = 516;
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==NOT_OP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 517;
				expression(18);
				}
				break;
			case 6:
				{
				State = 518;
				boolean();
				}
				break;
			case 7:
				{
				State = 519;
				identifier();
				}
				break;
			case 8:
				{
				State = 520;
				@double();
				}
				break;
			case 9:
				{
				State = 521;
				@int();
				}
				break;
			case 10:
				{
				State = 522;
				Match(MINTPACK);
				}
				break;
			case 11:
				{
				State = 523;
				Match(STRING_LITERAL);
				}
				break;
			case 12:
				{
				State = 524;
				Match(CHAR_LITERAL);
				}
				break;
			case 13:
				{
				State = 525;
				Match(FLAVORLESS);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 587;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 585;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 528;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 529;
						Match(THIN_ARROW);
						State = 530;
						expression(24);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 531;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 532;
						_la = TokenStream.LA(1);
						if ( !(_la==POWER || _la==MODULO) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 533;
						expression(18);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 534;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 535;
						_la = TokenStream.LA(1);
						if ( !(_la==LEFT_SHIFT || _la==RIGHT_SHIFT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 536;
						expression(17);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 537;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 538;
						_la = TokenStream.LA(1);
						if ( !(_la==MULTIPLY || _la==DIVIDE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 539;
						expression(16);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 540;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 541;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 542;
						expression(15);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 543;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 544;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 24579L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 545;
						expression(14);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 546;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 547;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 6543114241L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 548;
						expression(13);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 549;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 550;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==AND_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 551;
						expression(12);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 552;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 553;
						_la = TokenStream.LA(1);
						if ( !(_la==XOR || _la==XOR_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 554;
						expression(11);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 555;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 556;
						_la = TokenStream.LA(1);
						if ( !(_la==OR || _la==OR_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 557;
						expression(10);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 558;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 559;
						Match(LEFT_SQUARE_BRACKET);
						State = 560;
						expression(0);
						State = 561;
						Match(RIGHT_SQUARE_BRACKET);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 563;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 564;
						Match(LEFT_PAREN);
						State = 576;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
						case 1:
							{
							State = 566;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9719719284703238L) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 7437L) != 0)) {
								{
								State = 565;
								expression(0);
								}
							}

							}
							break;
						case 2:
							{
							{
							State = 568;
							expression(0);
							State = 573;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 569;
								Match(COMMA);
								State = 570;
								expression(0);
								}
								}
								State = 575;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
							}
							break;
						}
						State = 578;
						Match(RIGHT_PAREN);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 579;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 580;
						Match(THICK_ARROW);
						State = 583;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SUGAR:
						case CARB:
						case CAL:
						case KCAL:
						case YUM:
						case PURE:
							{
							State = 581;
							primitive();
							}
							break;
						case IDENTIFIER:
							{
							State = 582;
							Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 589;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER_LITERAL() { return GetTokens(BubblGumParser.INTEGER_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL(int i) {
			return GetToken(BubblGumParser.INTEGER_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BubblGumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDouble(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDouble(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 64, RULE_double);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 590;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 593;
			Match(INTEGER_LITERAL);
			State = 594;
			Match(DOT);
			State = 596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 595;
				Match(INTEGER_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BubblGumParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 66, RULE_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 598;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 601;
			Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUP() { return GetToken(BubblGumParser.YUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPE() { return GetToken(BubblGumParser.NOPE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 68, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			_la = TokenStream.LA(1);
			if ( !(_la==YUP || _la==NOPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(BubblGumParser.THIS, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			_la = TokenStream.LA(1);
			if ( !(_la==THIS || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_type);
		try {
			State = 611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607;
				primitive();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 608;
				array();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 609;
				tuple();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 610;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_packContext primitive_pack() {
			return GetRuleContext<Primitive_packContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_arrayContext any_array() {
			return GetRuleContext<Any_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK() { return GetToken(BubblGumParser.PACK, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 74, RULE_array);
		try {
			State = 617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 613;
				primitive_pack();
				}
				break;
			case LEFT_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 614;
				any_array();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 615;
				Match(IDENTIFIER);
				State = 616;
				Match(PACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGAR() { return GetToken(BubblGumParser.SUGAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARB() { return GetToken(BubblGumParser.CARB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAL() { return GetToken(BubblGumParser.CAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCAL() { return GetToken(BubblGumParser.KCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUM() { return GetToken(BubblGumParser.YUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 76, RULE_primitive);
		try {
			State = 626;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 619;
				Match(SUGAR);
				}
				break;
			case CARB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 620;
				Match(CARB);
				}
				break;
			case CAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 621;
				Match(CAL);
				}
				break;
			case KCAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 622;
				Match(KCAL);
				}
				break;
			case YUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 623;
				Match(YUM);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 624;
				Match(PURE);
				State = 625;
				Match(SUGAR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 78, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			Match(LEFT_ANGLE_BRACKET);
			State = 631;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IDENTIFIER:
				{
				State = 629;
				type();
				}
				break;
			case FLAVOR:
				{
				State = 630;
				Match(FLAVOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 633;
				Match(IDENTIFIER);
				}
			}

			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 636;
				Match(COMMA);
				State = 639;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 637;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 638;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 641;
					Match(IDENTIFIER);
					}
				}

				}
				}
				State = 648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 649;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_packContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGARPACK() { return GetToken(BubblGumParser.SUGARPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARBPACK() { return GetToken(BubblGumParser.CARBPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALPACK() { return GetToken(BubblGumParser.CALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCALPACK() { return GetToken(BubblGumParser.KCALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUMPACK() { return GetToken(BubblGumParser.YUMPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public Primitive_packContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_pack; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_pack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_pack(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_packContext primitive_pack() {
		Primitive_packContext _localctx = new Primitive_packContext(Context, State);
		EnterRule(_localctx, 80, RULE_primitive_pack);
		try {
			State = 658;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGARPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 651;
				Match(SUGARPACK);
				}
				break;
			case CARBPACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 652;
				Match(CARBPACK);
				}
				break;
			case CALPACK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 653;
				Match(CALPACK);
				}
				break;
			case KCALPACK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 654;
				Match(KCALPACK);
				}
				break;
			case YUMPACK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 655;
				Match(YUMPACK);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 656;
				Match(PURE);
				State = 657;
				Match(SUGARPACK);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Any_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAny_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAny_array(this);
		}
	}

	[RuleVersion(0)]
	public Any_arrayContext any_array() {
		Any_arrayContext _localctx = new Any_arrayContext(Context, State);
		EnterRule(_localctx, 82, RULE_any_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			Match(LEFT_SQUARE_BRACKET);
			State = 684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 663;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 661;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 662;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				{
				State = 667;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 665;
					type();
					}
					break;
				case FLAVOR:
					{
					State = 666;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 669;
					Match(IDENTIFIER);
					}
				}

				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 672;
					Match(COMMA);
					State = 675;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 673;
						type();
						}
						break;
					case FLAVOR:
						{
						State = 674;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 678;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IDENTIFIER) {
						{
						State = 677;
						Match(IDENTIFIER);
						}
					}

					}
					}
					State = 682;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				}
				break;
			}
			State = 686;
			Match(RIGHT_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 23);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 24);
		case 11: return Precpred(Context, 22);
		case 12: return Precpred(Context, 19);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,97,689,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,5,0,86,
		8,0,10,0,12,0,89,9,0,1,0,3,0,92,8,0,1,0,1,0,1,0,1,0,1,0,5,0,99,8,0,10,
		0,12,0,102,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,110,8,1,10,1,12,1,113,9,1,1,
		2,1,2,1,2,1,2,5,2,119,8,2,10,2,12,2,122,9,2,1,2,3,2,125,8,2,1,3,3,3,128,
		8,3,1,3,3,3,131,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,139,8,3,10,3,12,3,142,
		9,3,3,3,144,8,3,1,3,1,3,5,3,148,8,3,10,3,12,3,151,9,3,1,3,1,3,1,4,3,4,
		156,8,4,1,4,3,4,159,8,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,167,8,4,10,4,12,4,
		170,9,4,3,4,172,8,4,1,4,1,4,5,4,176,8,4,10,4,12,4,179,9,4,1,4,1,4,1,5,
		3,5,184,8,5,1,5,3,5,187,8,5,1,5,1,5,1,5,3,5,192,8,5,1,5,1,5,3,5,196,8,
		5,3,5,198,8,5,1,6,3,6,201,8,6,1,6,3,6,204,8,6,1,6,1,6,1,6,3,6,209,8,6,
		1,6,1,6,3,6,213,8,6,3,6,215,8,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,5,8,225,
		8,8,10,8,12,8,228,9,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,236,8,9,1,10,1,10,1,
		10,1,10,1,10,1,10,3,10,244,8,10,1,11,1,11,3,11,248,8,11,1,11,1,11,1,11,
		3,11,253,8,11,1,11,1,11,3,11,257,8,11,1,11,1,11,1,11,3,11,262,8,11,5,11,
		264,8,11,10,11,12,11,267,9,11,3,11,269,8,11,1,11,1,11,1,12,1,12,1,12,3,
		12,276,8,12,1,12,3,12,279,8,12,1,12,1,12,1,12,3,12,284,8,12,1,12,3,12,
		287,8,12,5,12,289,8,12,10,12,12,12,292,9,12,1,12,1,12,1,13,1,13,1,13,1,
		13,1,14,5,14,301,8,14,10,14,12,14,304,9,14,1,15,1,15,3,15,308,8,15,1,16,
		1,16,1,16,1,16,1,16,3,16,315,8,16,1,17,1,17,1,17,3,17,320,8,17,1,17,1,
		17,1,17,3,17,325,8,17,1,18,1,18,1,18,3,18,330,8,18,1,18,1,18,1,18,3,18,
		335,8,18,1,19,1,19,1,19,1,19,3,19,341,8,19,1,20,1,20,1,20,1,20,1,20,3,
		20,348,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,358,8,20,3,20,
		360,8,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,368,8,21,10,21,12,21,371,9,
		21,1,21,1,21,1,21,1,21,5,21,377,8,21,10,21,12,21,380,9,21,3,21,382,8,21,
		1,22,3,22,385,8,22,1,22,1,22,3,22,389,8,22,3,22,391,8,22,1,22,1,22,3,22,
		395,8,22,1,22,1,22,3,22,399,8,22,1,22,1,22,3,22,403,8,22,3,22,405,8,22,
		1,22,1,22,3,22,409,8,22,5,22,411,8,22,10,22,12,22,414,9,22,1,22,1,22,1,
		22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,428,8,24,1,24,5,24,
		431,8,24,10,24,12,24,434,9,24,1,24,3,24,437,8,24,1,25,1,25,1,25,1,25,1,
		25,3,25,444,8,25,1,26,1,26,1,26,1,26,3,26,450,8,26,1,27,1,27,1,27,3,27,
		455,8,27,1,28,1,28,1,28,1,28,1,28,3,28,462,8,28,1,29,1,29,1,29,1,29,1,
		29,1,29,3,29,470,8,29,1,29,1,29,1,29,3,29,475,8,29,1,29,1,29,1,29,1,29,
		3,29,481,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,491,8,30,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,5,31,510,8,31,10,31,12,31,513,9,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,527,8,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,3,31,567,8,31,1,31,1,31,1,31,5,31,572,8,
		31,10,31,12,31,575,9,31,3,31,577,8,31,1,31,1,31,1,31,1,31,1,31,3,31,584,
		8,31,5,31,586,8,31,10,31,12,31,589,9,31,1,32,3,32,592,8,32,1,32,1,32,1,
		32,3,32,597,8,32,1,33,3,33,600,8,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
		1,36,1,36,1,36,3,36,612,8,36,1,37,1,37,1,37,1,37,3,37,618,8,37,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,3,38,627,8,38,1,39,1,39,1,39,3,39,632,8,39,
		1,39,3,39,635,8,39,1,39,1,39,1,39,3,39,640,8,39,1,39,3,39,643,8,39,5,39,
		645,8,39,10,39,12,39,648,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,3,40,659,8,40,1,41,1,41,1,41,3,41,664,8,41,1,41,1,41,3,41,668,8,41,
		1,41,3,41,671,8,41,1,41,1,41,1,41,3,41,676,8,41,1,41,3,41,679,8,41,4,41,
		681,8,41,11,41,12,41,682,3,41,685,8,41,1,41,1,41,1,41,0,1,62,42,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,0,16,1,0,60,61,1,0,15,17,
		1,0,72,73,1,0,40,41,2,0,43,43,80,80,2,0,84,84,87,87,1,0,68,69,1,0,85,86,
		1,0,82,83,2,0,53,54,66,67,3,0,45,45,70,71,76,77,2,0,31,31,78,78,2,0,33,
		33,81,81,2,0,32,32,79,79,1,0,29,30,2,0,1,1,88,88,795,0,87,1,0,0,0,2,105,
		1,0,0,0,4,114,1,0,0,0,6,127,1,0,0,0,8,155,1,0,0,0,10,183,1,0,0,0,12,200,
		1,0,0,0,14,216,1,0,0,0,16,218,1,0,0,0,18,231,1,0,0,0,20,237,1,0,0,0,22,
		245,1,0,0,0,24,272,1,0,0,0,26,295,1,0,0,0,28,302,1,0,0,0,30,307,1,0,0,
		0,32,314,1,0,0,0,34,316,1,0,0,0,36,326,1,0,0,0,38,340,1,0,0,0,40,359,1,
		0,0,0,42,381,1,0,0,0,44,394,1,0,0,0,46,418,1,0,0,0,48,422,1,0,0,0,50,438,
		1,0,0,0,52,445,1,0,0,0,54,454,1,0,0,0,56,456,1,0,0,0,58,463,1,0,0,0,60,
		482,1,0,0,0,62,526,1,0,0,0,64,591,1,0,0,0,66,599,1,0,0,0,68,603,1,0,0,
		0,70,605,1,0,0,0,72,611,1,0,0,0,74,617,1,0,0,0,76,626,1,0,0,0,78,628,1,
		0,0,0,80,658,1,0,0,0,82,660,1,0,0,0,84,86,3,4,2,0,85,84,1,0,0,0,86,89,
		1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,90,92,
		3,2,1,0,91,90,1,0,0,0,91,92,1,0,0,0,92,100,1,0,0,0,93,99,3,6,3,0,94,99,
		3,8,4,0,95,99,3,18,9,0,96,99,3,16,8,0,97,99,3,30,15,0,98,93,1,0,0,0,98,
		94,1,0,0,0,98,95,1,0,0,0,98,96,1,0,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,
		98,1,0,0,0,100,101,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,104,5,0,
		0,1,104,1,1,0,0,0,105,106,5,3,0,0,106,111,5,88,0,0,107,108,5,74,0,0,108,
		110,5,88,0,0,109,107,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,
		0,0,0,112,3,1,0,0,0,113,111,1,0,0,0,114,124,5,7,0,0,115,120,5,88,0,0,116,
		117,5,74,0,0,117,119,5,88,0,0,118,116,1,0,0,0,119,122,1,0,0,0,120,118,
		1,0,0,0,120,121,1,0,0,0,121,125,1,0,0,0,122,120,1,0,0,0,123,125,5,91,0,
		0,124,115,1,0,0,0,124,123,1,0,0,0,125,5,1,0,0,0,126,128,5,20,0,0,127,126,
		1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,131,3,14,7,0,130,129,1,0,0,
		0,130,131,1,0,0,0,131,132,1,0,0,0,132,133,5,6,0,0,133,143,5,88,0,0,134,
		135,5,57,0,0,135,140,5,88,0,0,136,137,5,55,0,0,137,139,5,88,0,0,138,136,
		1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,144,1,0,0,
		0,142,140,1,0,0,0,143,134,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,
		149,5,51,0,0,146,148,3,12,6,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,
		1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,153,5,52,0,
		0,153,7,1,0,0,0,154,156,5,20,0,0,155,154,1,0,0,0,155,156,1,0,0,0,156,158,
		1,0,0,0,157,159,3,14,7,0,158,157,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,
		0,160,161,5,21,0,0,161,171,5,88,0,0,162,163,5,57,0,0,163,168,5,88,0,0,
		164,165,5,55,0,0,165,167,5,88,0,0,166,164,1,0,0,0,167,170,1,0,0,0,168,
		166,1,0,0,0,168,169,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,171,162,1,
		0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,177,5,51,0,0,174,176,3,10,5,
		0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,
		180,1,0,0,0,179,177,1,0,0,0,180,181,5,52,0,0,181,9,1,0,0,0,182,184,5,20,
		0,0,183,182,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,187,3,14,7,0,186,
		185,1,0,0,0,186,187,1,0,0,0,187,197,1,0,0,0,188,198,3,20,10,0,189,191,
		3,42,21,0,190,192,7,0,0,0,191,190,1,0,0,0,191,192,1,0,0,0,192,198,1,0,
		0,0,193,195,3,44,22,0,194,196,7,0,0,0,195,194,1,0,0,0,195,196,1,0,0,0,
		196,198,1,0,0,0,197,188,1,0,0,0,197,189,1,0,0,0,197,193,1,0,0,0,198,11,
		1,0,0,0,199,201,5,20,0,0,200,199,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,
		0,202,204,3,14,7,0,203,202,1,0,0,0,203,204,1,0,0,0,204,214,1,0,0,0,205,
		215,3,18,9,0,206,208,3,42,21,0,207,209,7,0,0,0,208,207,1,0,0,0,208,209,
		1,0,0,0,209,215,1,0,0,0,210,212,3,44,22,0,211,213,7,0,0,0,212,211,1,0,
		0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,205,1,0,0,0,214,206,1,0,0,0,214,
		210,1,0,0,0,215,13,1,0,0,0,216,217,7,1,0,0,217,15,1,0,0,0,218,219,5,5,
		0,0,219,220,5,57,0,0,220,221,5,88,0,0,221,226,5,51,0,0,222,225,3,42,21,
		0,223,225,3,44,22,0,224,222,1,0,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,
		224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,5,
		52,0,0,230,17,1,0,0,0,231,235,3,20,10,0,232,233,5,57,0,0,233,236,3,32,
		16,0,234,236,3,26,13,0,235,232,1,0,0,0,235,234,1,0,0,0,236,19,1,0,0,0,
		237,238,5,4,0,0,238,239,5,57,0,0,239,240,5,88,0,0,240,243,3,22,11,0,241,
		244,3,24,12,0,242,244,3,72,36,0,243,241,1,0,0,0,243,242,1,0,0,0,243,244,
		1,0,0,0,244,21,1,0,0,0,245,268,5,47,0,0,246,248,5,65,0,0,247,246,1,0,0,
		0,247,248,1,0,0,0,248,249,1,0,0,0,249,250,3,72,36,0,250,252,5,88,0,0,251,
		253,5,58,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,265,1,0,0,0,254,256,5,
		55,0,0,255,257,5,65,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,258,1,0,0,
		0,258,259,3,72,36,0,259,261,5,88,0,0,260,262,5,58,0,0,261,260,1,0,0,0,
		261,262,1,0,0,0,262,264,1,0,0,0,263,254,1,0,0,0,264,267,1,0,0,0,265,263,
		1,0,0,0,265,266,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,268,247,1,0,0,
		0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,5,48,0,0,271,23,1,0,0,0,272,
		273,5,53,0,0,273,275,3,72,36,0,274,276,5,88,0,0,275,274,1,0,0,0,275,276,
		1,0,0,0,276,278,1,0,0,0,277,279,5,58,0,0,278,277,1,0,0,0,278,279,1,0,0,
		0,279,290,1,0,0,0,280,281,5,55,0,0,281,283,3,72,36,0,282,284,5,88,0,0,
		283,282,1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,287,5,58,0,0,286,285,
		1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,280,1,0,0,0,289,292,1,0,0,
		0,290,288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,
		294,5,54,0,0,294,25,1,0,0,0,295,296,5,51,0,0,296,297,3,28,14,0,297,298,
		5,52,0,0,298,27,1,0,0,0,299,301,3,30,15,0,300,299,1,0,0,0,301,304,1,0,
		0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,29,1,0,0,0,304,302,1,0,0,0,305,
		308,3,32,16,0,306,308,3,26,13,0,307,305,1,0,0,0,307,306,1,0,0,0,308,31,
		1,0,0,0,309,315,3,38,19,0,310,315,3,34,17,0,311,315,3,36,18,0,312,315,
		3,48,24,0,313,315,3,54,27,0,314,309,1,0,0,0,314,310,1,0,0,0,314,311,1,
		0,0,0,314,312,1,0,0,0,314,313,1,0,0,0,315,33,1,0,0,0,316,319,5,47,0,0,
		317,320,3,38,19,0,318,320,3,62,31,0,319,317,1,0,0,0,319,318,1,0,0,0,320,
		321,1,0,0,0,321,322,5,48,0,0,322,324,5,60,0,0,323,325,5,60,0,0,324,323,
		1,0,0,0,324,325,1,0,0,0,325,35,1,0,0,0,326,329,5,47,0,0,327,330,3,38,19,
		0,328,330,3,62,31,0,329,327,1,0,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,
		332,5,48,0,0,332,334,5,61,0,0,333,335,5,61,0,0,334,333,1,0,0,0,334,335,
		1,0,0,0,335,37,1,0,0,0,336,341,3,42,21,0,337,341,3,44,22,0,338,341,3,46,
		23,0,339,341,3,40,20,0,340,336,1,0,0,0,340,337,1,0,0,0,340,338,1,0,0,0,
		340,339,1,0,0,0,341,39,1,0,0,0,342,360,5,18,0,0,343,344,5,18,0,0,344,347,
		3,62,31,0,345,346,5,75,0,0,346,348,3,62,31,0,347,345,1,0,0,0,347,348,1,
		0,0,0,348,360,1,0,0,0,349,350,5,18,0,0,350,351,3,62,31,0,351,352,5,75,
		0,0,352,357,5,42,0,0,353,354,5,47,0,0,354,355,3,62,31,0,355,356,5,48,0,
		0,356,358,1,0,0,0,357,353,1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,
		342,1,0,0,0,359,343,1,0,0,0,359,349,1,0,0,0,360,41,1,0,0,0,361,362,3,76,
		38,0,362,369,5,88,0,0,363,364,5,55,0,0,364,365,3,76,38,0,365,366,5,88,
		0,0,366,368,1,0,0,0,367,363,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,
		370,1,0,0,0,370,382,1,0,0,0,371,369,1,0,0,0,372,373,3,76,38,0,373,378,
		5,88,0,0,374,375,5,55,0,0,375,377,5,88,0,0,376,374,1,0,0,0,377,380,1,0,
		0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,381,
		361,1,0,0,0,381,372,1,0,0,0,382,43,1,0,0,0,383,385,5,65,0,0,384,383,1,
		0,0,0,384,385,1,0,0,0,385,388,1,0,0,0,386,389,3,72,36,0,387,389,5,8,0,
		0,388,386,1,0,0,0,388,387,1,0,0,0,389,391,1,0,0,0,390,384,1,0,0,0,390,
		391,1,0,0,0,391,392,1,0,0,0,392,395,5,88,0,0,393,395,3,62,31,0,394,390,
		1,0,0,0,394,393,1,0,0,0,395,412,1,0,0,0,396,408,5,55,0,0,397,399,5,65,
		0,0,398,397,1,0,0,0,398,399,1,0,0,0,399,402,1,0,0,0,400,403,3,72,36,0,
		401,403,5,8,0,0,402,400,1,0,0,0,402,401,1,0,0,0,403,405,1,0,0,0,404,398,
		1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,409,5,88,0,0,407,409,3,62,
		31,0,408,404,1,0,0,0,408,407,1,0,0,0,409,411,1,0,0,0,410,396,1,0,0,0,411,
		414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,412,1,
		0,0,0,415,416,5,46,0,0,416,417,3,62,31,0,417,45,1,0,0,0,418,419,3,62,31,
		0,419,420,7,2,0,0,420,421,3,62,31,0,421,47,1,0,0,0,422,423,5,36,0,0,423,
		427,3,62,31,0,424,425,5,57,0,0,425,428,3,32,16,0,426,428,3,26,13,0,427,
		424,1,0,0,0,427,426,1,0,0,0,428,432,1,0,0,0,429,431,3,50,25,0,430,429,
		1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,436,1,0,0,
		0,434,432,1,0,0,0,435,437,3,52,26,0,436,435,1,0,0,0,436,437,1,0,0,0,437,
		49,1,0,0,0,438,439,5,38,0,0,439,443,3,62,31,0,440,441,5,57,0,0,441,444,
		3,32,16,0,442,444,3,26,13,0,443,440,1,0,0,0,443,442,1,0,0,0,444,51,1,0,
		0,0,445,449,5,37,0,0,446,447,5,57,0,0,447,450,3,32,16,0,448,450,3,26,13,
		0,449,446,1,0,0,0,449,448,1,0,0,0,450,53,1,0,0,0,451,455,3,56,28,0,452,
		455,3,58,29,0,453,455,3,60,30,0,454,451,1,0,0,0,454,452,1,0,0,0,454,453,
		1,0,0,0,455,55,1,0,0,0,456,457,5,39,0,0,457,461,3,62,31,0,458,459,5,57,
		0,0,459,462,3,32,16,0,460,462,3,26,13,0,461,458,1,0,0,0,461,460,1,0,0,
		0,462,57,1,0,0,0,463,464,5,88,0,0,464,465,5,57,0,0,465,466,7,3,0,0,466,
		469,5,47,0,0,467,470,3,66,33,0,468,470,3,62,31,0,469,467,1,0,0,0,469,468,
		1,0,0,0,470,471,1,0,0,0,471,474,5,55,0,0,472,475,3,66,33,0,473,475,3,62,
		31,0,474,472,1,0,0,0,474,473,1,0,0,0,475,476,1,0,0,0,476,480,5,48,0,0,
		477,478,5,57,0,0,478,481,3,32,16,0,479,481,3,26,13,0,480,477,1,0,0,0,480,
		479,1,0,0,0,481,59,1,0,0,0,482,483,5,18,0,0,483,484,5,9,0,0,484,485,5,
		88,0,0,485,486,5,44,0,0,486,487,3,62,31,0,487,490,5,75,0,0,488,491,3,32,
		16,0,489,491,3,26,13,0,490,488,1,0,0,0,490,489,1,0,0,0,491,61,1,0,0,0,
		492,493,6,31,-1,0,493,494,5,47,0,0,494,495,3,62,31,0,495,496,5,48,0,0,
		496,527,1,0,0,0,497,498,5,2,0,0,498,499,5,74,0,0,499,527,3,62,31,25,500,
		501,3,74,37,0,501,502,5,47,0,0,502,503,3,62,31,0,503,504,5,48,0,0,504,
		527,1,0,0,0,505,506,5,53,0,0,506,511,3,62,31,0,507,508,5,55,0,0,508,510,
		3,62,31,0,509,507,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,
		0,0,512,514,1,0,0,0,513,511,1,0,0,0,514,515,5,54,0,0,515,527,1,0,0,0,516,
		517,7,4,0,0,517,527,3,62,31,18,518,527,3,68,34,0,519,527,3,70,35,0,520,
		527,3,64,32,0,521,527,3,66,33,0,522,527,5,22,0,0,523,527,5,91,0,0,524,
		527,5,92,0,0,525,527,5,35,0,0,526,492,1,0,0,0,526,497,1,0,0,0,526,500,
		1,0,0,0,526,505,1,0,0,0,526,516,1,0,0,0,526,518,1,0,0,0,526,519,1,0,0,
		0,526,520,1,0,0,0,526,521,1,0,0,0,526,522,1,0,0,0,526,523,1,0,0,0,526,
		524,1,0,0,0,526,525,1,0,0,0,527,587,1,0,0,0,528,529,10,23,0,0,529,530,
		5,74,0,0,530,586,3,62,31,24,531,532,10,17,0,0,532,533,7,5,0,0,533,586,
		3,62,31,18,534,535,10,16,0,0,535,536,7,6,0,0,536,586,3,62,31,17,537,538,
		10,15,0,0,538,539,7,7,0,0,539,586,3,62,31,16,540,541,10,14,0,0,541,542,
		7,8,0,0,542,586,3,62,31,15,543,544,10,13,0,0,544,545,7,9,0,0,545,586,3,
		62,31,14,546,547,10,12,0,0,547,548,7,10,0,0,548,586,3,62,31,13,549,550,
		10,11,0,0,550,551,7,11,0,0,551,586,3,62,31,12,552,553,10,10,0,0,553,554,
		7,12,0,0,554,586,3,62,31,11,555,556,10,9,0,0,556,557,7,13,0,0,557,586,
		3,62,31,10,558,559,10,24,0,0,559,560,5,49,0,0,560,561,3,62,31,0,561,562,
		5,50,0,0,562,586,1,0,0,0,563,564,10,22,0,0,564,576,5,47,0,0,565,567,3,
		62,31,0,566,565,1,0,0,0,566,567,1,0,0,0,567,577,1,0,0,0,568,573,3,62,31,
		0,569,570,5,55,0,0,570,572,3,62,31,0,571,569,1,0,0,0,572,575,1,0,0,0,573,
		571,1,0,0,0,573,574,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,576,566,1,
		0,0,0,576,568,1,0,0,0,577,578,1,0,0,0,578,586,5,48,0,0,579,580,10,19,0,
		0,580,583,5,75,0,0,581,584,3,76,38,0,582,584,5,88,0,0,583,581,1,0,0,0,
		583,582,1,0,0,0,584,586,1,0,0,0,585,528,1,0,0,0,585,531,1,0,0,0,585,534,
		1,0,0,0,585,537,1,0,0,0,585,540,1,0,0,0,585,543,1,0,0,0,585,546,1,0,0,
		0,585,549,1,0,0,0,585,552,1,0,0,0,585,555,1,0,0,0,585,558,1,0,0,0,585,
		563,1,0,0,0,585,579,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,0,587,588,1,
		0,0,0,588,63,1,0,0,0,589,587,1,0,0,0,590,592,7,8,0,0,591,590,1,0,0,0,591,
		592,1,0,0,0,592,593,1,0,0,0,593,594,5,90,0,0,594,596,5,59,0,0,595,597,
		5,90,0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,65,1,0,0,0,598,600,7,8,0,
		0,599,598,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,602,5,90,0,0,602,
		67,1,0,0,0,603,604,7,14,0,0,604,69,1,0,0,0,605,606,7,15,0,0,606,71,1,0,
		0,0,607,612,3,76,38,0,608,612,3,74,37,0,609,612,3,78,39,0,610,612,5,88,
		0,0,611,607,1,0,0,0,611,608,1,0,0,0,611,609,1,0,0,0,611,610,1,0,0,0,612,
		73,1,0,0,0,613,618,3,80,40,0,614,618,3,82,41,0,615,616,5,88,0,0,616,618,
		5,23,0,0,617,613,1,0,0,0,617,614,1,0,0,0,617,615,1,0,0,0,618,75,1,0,0,
		0,619,627,5,10,0,0,620,627,5,11,0,0,621,627,5,12,0,0,622,627,5,13,0,0,
		623,627,5,14,0,0,624,625,5,19,0,0,625,627,5,10,0,0,626,619,1,0,0,0,626,
		620,1,0,0,0,626,621,1,0,0,0,626,622,1,0,0,0,626,623,1,0,0,0,626,624,1,
		0,0,0,627,77,1,0,0,0,628,631,5,53,0,0,629,632,3,72,36,0,630,632,5,8,0,
		0,631,629,1,0,0,0,631,630,1,0,0,0,632,634,1,0,0,0,633,635,5,88,0,0,634,
		633,1,0,0,0,634,635,1,0,0,0,635,646,1,0,0,0,636,639,5,55,0,0,637,640,3,
		72,36,0,638,640,5,8,0,0,639,637,1,0,0,0,639,638,1,0,0,0,640,642,1,0,0,
		0,641,643,5,88,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,
		636,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,649,1,
		0,0,0,648,646,1,0,0,0,649,650,5,54,0,0,650,79,1,0,0,0,651,659,5,24,0,0,
		652,659,5,25,0,0,653,659,5,26,0,0,654,659,5,27,0,0,655,659,5,28,0,0,656,
		657,5,19,0,0,657,659,5,24,0,0,658,651,1,0,0,0,658,652,1,0,0,0,658,653,
		1,0,0,0,658,654,1,0,0,0,658,655,1,0,0,0,658,656,1,0,0,0,659,81,1,0,0,0,
		660,684,5,49,0,0,661,664,3,72,36,0,662,664,5,8,0,0,663,661,1,0,0,0,663,
		662,1,0,0,0,664,685,1,0,0,0,665,668,3,72,36,0,666,668,5,8,0,0,667,665,
		1,0,0,0,667,666,1,0,0,0,668,670,1,0,0,0,669,671,5,88,0,0,670,669,1,0,0,
		0,670,671,1,0,0,0,671,680,1,0,0,0,672,675,5,55,0,0,673,676,3,72,36,0,674,
		676,5,8,0,0,675,673,1,0,0,0,675,674,1,0,0,0,676,678,1,0,0,0,677,679,5,
		88,0,0,678,677,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,0,680,672,1,0,0,0,
		681,682,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,663,
		1,0,0,0,684,667,1,0,0,0,685,686,1,0,0,0,686,687,5,50,0,0,687,83,1,0,0,
		0,103,87,91,98,100,111,120,124,127,130,140,143,149,155,158,168,171,177,
		183,186,191,195,197,200,203,208,212,214,224,226,235,243,247,252,256,261,
		265,268,275,278,283,286,290,302,307,314,319,324,329,334,340,347,357,359,
		369,378,381,384,388,390,394,398,402,404,408,412,427,432,436,443,449,454,
		461,469,474,480,490,511,526,566,573,576,583,585,587,591,596,599,611,617,
		626,631,634,639,642,646,658,663,667,670,675,678,682,684
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
