//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Lexer_Parser/Parser/BubblGum.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BubblGumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		THIS=1, SWEETS=2, STOCK=3, RECIPE=4, CANDY=5, GUM=6, CHEW=7, FLAVOR=8, 
		FLAVORS=9, SUGAR=10, CARB=11, CAL=12, KCAL=13, YUM=14, BOLD=15, SUBTLE=16, 
		BLAND=17, POP=18, PURE=19, STICKY=20, WRAPPER=21, MINTPACK=22, PACK=23, 
		SUGARPACK=24, CARBPACK=25, CALPACK=26, KCALPACK=27, YUMPACK=28, FLAVORPACK=29, 
		YUP=30, NOPE=31, AND=32, OR=33, XOR=34, XNOR=35, FLAVORLESS=36, IF=37, 
		ELSE=38, ELIF=39, WHILE=40, REPEAT_UP=41, REPEAT_DOWN=42, POPSTREAM=43, 
		NOT=44, IN=45, IS=46, FROM=47, ASSIGN=48, LEFT_PAREN=49, RIGHT_PAREN=50, 
		LEFT_SQUARE_BRACKET=51, RIGHT_SQUARE_BRACKET=52, LEFT_CURLY_BRACKET=53, 
		RIGHT_CURLY_BRACKET=54, LEFT_ANGLE_BRACKET=55, RIGHT_ANGLE_BRACKET=56, 
		COMMA=57, SEMICOLON=58, COLON=59, ELLIPSES=60, DOT=61, PRINT=62, DEBUG=63, 
		DOUBLE_QUOTE=64, SINGLE_QUOTE=65, BACK_TICK=66, IMMUTABLE=67, GT_EQ=68, 
		LT_EQ=69, LEFT_SHIFT=70, RIGHT_SHIFT=71, NOT_EQ_1=72, NOT_EQ_2=73, PLUS_COLON=74, 
		MINUS_COLON=75, THIN_ARROW=76, THICK_ARROW=77, SUBCLASS_OF=78, EQUALS=79, 
		AND_OP=80, OR_OP=81, NOT_OP=82, XOR_OP=83, PLUS=84, MINUS=85, POWER=86, 
		MULTIPLY=87, DIVIDE=88, MODULO=89, IDENTIFIER=90, LETTER=91, INTEGER_LITERAL=92, 
		STRING_LITERAL=93, CHAR_LITERAL=94, ESCAPE_SEQUENCE=95, WHITE=96, EOL=97, 
		SINGLE_LINE_COMMENT=98, MULTI_LINE_COMMENT=99;
	public const int
		RULE_program = 0, RULE_define_stock = 1, RULE_chew_import = 2, RULE_class = 3, 
		RULE_interface = 4, RULE_interface_member = 5, RULE_class_member = 6, 
		RULE_visibility = 7, RULE_struct = 8, RULE_function = 9, RULE_function_header = 10, 
		RULE_parameters = 11, RULE_outputs = 12, RULE_scope_body = 13, RULE_statement_list = 14, 
		RULE_statement = 15, RULE_single_statement = 16, RULE_print_statement = 17, 
		RULE_debug_statement = 18, RULE_base_statement = 19, RULE_return_statement = 20, 
		RULE_primitive_declaration = 21, RULE_assignment = 22, RULE_variable_inc_dec = 23, 
		RULE_if_statement = 24, RULE_elif_statement = 25, RULE_else_statement = 26, 
		RULE_loop = 27, RULE_while_loop = 28, RULE_repeat_loop = 29, RULE_pop_loop = 30, 
		RULE_expression = 31, RULE_method_call = 32, RULE_double = 33, RULE_int = 34, 
		RULE_boolean = 35, RULE_identifier = 36, RULE_type = 37, RULE_object = 38, 
		RULE_array = 39, RULE_primitive = 40, RULE_tuple = 41, RULE_primitive_pack = 42, 
		RULE_any_array = 43;
	public static readonly string[] ruleNames = {
		"program", "define_stock", "chew_import", "class", "interface", "interface_member", 
		"class_member", "visibility", "struct", "function", "function_header", 
		"parameters", "outputs", "scope_body", "statement_list", "statement", 
		"single_statement", "print_statement", "debug_statement", "base_statement", 
		"return_statement", "primitive_declaration", "assignment", "variable_inc_dec", 
		"if_statement", "elif_statement", "else_statement", "loop", "while_loop", 
		"repeat_loop", "pop_loop", "expression", "method_call", "double", "int", 
		"boolean", "identifier", "type", "object", "array", "primitive", "tuple", 
		"primitive_pack", "any_array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'gum'", "'sweets'", "'stock'", "'recipe'", "'candy'", "'Gum'", 
		"'Chew'", "'flavor'", "'flavors'", "'sugar'", "'carb'", "'cal'", "'kcal'", 
		"'yum'", "'bold'", "'subtle'", "'bland'", "'pop'", "'pure'", "'sticky'", 
		"'Wrapper'", "'mintpack'", "'pack'", "'sugarpack'", "'carbpack'", "'calpack'", 
		"'kcalpack'", "'yumpack'", "'flavorpack'", "'yup'", "'nope'", "'and'", 
		"'or'", "'xor'", "'xnor'", null, "'if'", "'else'", "'elif'", "'while'", 
		"'repeatUp'", "'repeatDown'", "'popstream'", "'not'", "'in'", "'is'", 
		"'from'", "'::'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'>'", 
		"','", "';'", "':'", "'...'", "'.'", "'!'", "'?'", "'\"'", "'''", "'`'", 
		"'$'", "'>='", "'<='", "'<:'", "':>'", "'<>'", "'~='", "'+:'", "'-:'", 
		"'->'", "'=>'", "':<'", "'='", "'&'", "'|'", "'~'", "'^'", "'+'", "'-'", 
		"'**'", "'*'", "'/'", "'%'", null, null, null, null, null, null, null, 
		"'\\r\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "THIS", "SWEETS", "STOCK", "RECIPE", "CANDY", "GUM", "CHEW", "FLAVOR", 
		"FLAVORS", "SUGAR", "CARB", "CAL", "KCAL", "YUM", "BOLD", "SUBTLE", "BLAND", 
		"POP", "PURE", "STICKY", "WRAPPER", "MINTPACK", "PACK", "SUGARPACK", "CARBPACK", 
		"CALPACK", "KCALPACK", "YUMPACK", "FLAVORPACK", "YUP", "NOPE", "AND", 
		"OR", "XOR", "XNOR", "FLAVORLESS", "IF", "ELSE", "ELIF", "WHILE", "REPEAT_UP", 
		"REPEAT_DOWN", "POPSTREAM", "NOT", "IN", "IS", "FROM", "ASSIGN", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", 
		"RIGHT_CURLY_BRACKET", "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", "COMMA", 
		"SEMICOLON", "COLON", "ELLIPSES", "DOT", "PRINT", "DEBUG", "DOUBLE_QUOTE", 
		"SINGLE_QUOTE", "BACK_TICK", "IMMUTABLE", "GT_EQ", "LT_EQ", "LEFT_SHIFT", 
		"RIGHT_SHIFT", "NOT_EQ_1", "NOT_EQ_2", "PLUS_COLON", "MINUS_COLON", "THIN_ARROW", 
		"THICK_ARROW", "SUBCLASS_OF", "EQUALS", "AND_OP", "OR_OP", "NOT_OP", "XOR_OP", 
		"PLUS", "MINUS", "POWER", "MULTIPLY", "DIVIDE", "MODULO", "IDENTIFIER", 
		"LETTER", "INTEGER_LITERAL", "STRING_LITERAL", "CHAR_LITERAL", "ESCAPE_SEQUENCE", 
		"WHITE", "EOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BubblGum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BubblGumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BubblGumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BubblGumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BubblGumParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Chew_importContext[] chew_import() {
			return GetRuleContexts<Chew_importContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Chew_importContext chew_import(int i) {
			return GetRuleContext<Chew_importContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Define_stockContext define_stock() {
			return GetRuleContext<Define_stockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext[] @interface() {
			return GetRuleContexts<InterfaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface(int i) {
			return GetRuleContext<InterfaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CHEW) {
				{
				{
				State = 88;
				chew_import();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STOCK) {
				{
				State = 94;
				define_stock();
				}
			}

			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47869648183491958L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 243695617L) != 0)) {
				{
				State = 102;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 97;
					@class();
					}
					break;
				case 2:
					{
					State = 98;
					@interface();
					}
					break;
				case 3:
					{
					State = 99;
					function();
					}
					break;
				case 4:
					{
					State = 100;
					@struct();
					}
					break;
				case 5:
					{
					State = 101;
					statement();
					}
					break;
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_stockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOCK() { return GetToken(BubblGumParser.STOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public Define_stockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_stock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDefine_stock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDefine_stock(this);
		}
	}

	[RuleVersion(0)]
	public Define_stockContext define_stock() {
		Define_stockContext _localctx = new Define_stockContext(Context, State);
		EnterRule(_localctx, 2, RULE_define_stock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(STOCK);
			State = 110;
			Match(IDENTIFIER);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==THIN_ARROW) {
				{
				{
				State = 111;
				Match(THIN_ARROW);
				State = 112;
				Match(IDENTIFIER);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Chew_importContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHEW() { return GetToken(BubblGumParser.CHEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BubblGumParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public Chew_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chew_import; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterChew_import(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitChew_import(this);
		}
	}

	[RuleVersion(0)]
	public Chew_importContext chew_import() {
		Chew_importContext _localctx = new Chew_importContext(Context, State);
		EnterRule(_localctx, 4, RULE_chew_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(CHEW);
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				{
				State = 119;
				Match(IDENTIFIER);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==THIN_ARROW) {
					{
					{
					State = 120;
					Match(THIN_ARROW);
					State = 121;
					Match(IDENTIFIER);
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case STRING_LITERAL:
				{
				State = 127;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUM() { return GetToken(BubblGumParser.GUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext[] class_member() {
			return GetRuleContexts<Class_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext class_member(int i) {
			return GetRuleContext<Class_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 6, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 130;
				Match(STICKY);
				}
			}

			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 133;
				visibility();
				}
			}

			State = 136;
			Match(GUM);
			State = 137;
			Match(IDENTIFIER);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 138;
				Match(COLON);
				State = 139;
				Match(IDENTIFIER);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 140;
					Match(COMMA);
					State = 141;
					Match(IDENTIFIER);
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 149;
			Match(LEFT_CURLY_BRACKET);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 38861211975810326L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 243695617L) != 0)) {
				{
				{
				State = 150;
				class_member();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(BubblGumParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext[] interface_member() {
			return GetRuleContexts<Interface_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_memberContext interface_member(int i) {
			return GetRuleContext<Interface_memberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 8, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 158;
				Match(STICKY);
				}
			}

			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 161;
				visibility();
				}
			}

			State = 164;
			Match(WRAPPER);
			State = 165;
			Match(IDENTIFIER);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 166;
				Match(COLON);
				State = 167;
				Match(IDENTIFIER);
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 168;
					Match(COMMA);
					State = 169;
					Match(IDENTIFIER);
					}
					}
					State = 174;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 177;
			Match(LEFT_CURLY_BRACKET);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 38861211975810326L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 243695617L) != 0)) {
				{
				{
				State = 178;
				interface_member();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Interface_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInterface_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInterface_member(this);
		}
	}

	[RuleVersion(0)]
	public Interface_memberContext interface_member() {
		Interface_memberContext _localctx = new Interface_memberContext(Context, State);
		EnterRule(_localctx, 10, RULE_interface_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 186;
				Match(STICKY);
				}
			}

			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 189;
				visibility();
				}
			}

			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 192;
				function_header();
				}
				break;
			case 2:
				{
				{
				State = 193;
				primitive_declaration();
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 194;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 197;
				assignment();
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 198;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STICKY() { return GetToken(BubblGumParser.STICKY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BubblGumParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(BubblGumParser.DEBUG, 0); }
		public Class_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterClass_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitClass_member(this);
		}
	}

	[RuleVersion(0)]
	public Class_memberContext class_member() {
		Class_memberContext _localctx = new Class_memberContext(Context, State);
		EnterRule(_localctx, 12, RULE_class_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STICKY) {
				{
				State = 203;
				Match(STICKY);
				}
			}

			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 206;
				visibility();
				}
			}

			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 209;
				function();
				}
				break;
			case 2:
				{
				{
				State = 210;
				primitive_declaration();
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 211;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			case 3:
				{
				{
				State = 214;
				assignment();
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRINT || _la==DEBUG) {
					{
					State = 215;
					_la = TokenStream.LA(1);
					if ( !(_la==PRINT || _la==DEBUG) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOLD() { return GetToken(BubblGumParser.BOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTLE() { return GetToken(BubblGumParser.SUBTLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLAND() { return GetToken(BubblGumParser.BLAND, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 14, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANDY() { return GetToken(BubblGumParser.CANDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext[] primitive_declaration() {
			return GetRuleContexts<Primitive_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration(int i) {
			return GetRuleContext<Primitive_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 222;
				visibility();
				}
			}

			State = 225;
			Match(CANDY);
			State = 226;
			Match(COLON);
			State = 227;
			Match(IDENTIFIER);
			State = 228;
			Match(LEFT_CURLY_BRACKET);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 38861211974532358L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 243695617L) != 0)) {
				{
				State = 231;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 229;
					primitive_declaration();
					}
					break;
				case 2:
					{
					State = 230;
					assignment();
					}
					break;
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 236;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			function_header();
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 239;
				Match(COLON);
				State = 240;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 241;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECIPE() { return GetToken(BubblGumParser.RECIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputsContext outputs() {
			return GetRuleContext<OutputsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterFunction_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitFunction_header(this);
		}
	}

	[RuleVersion(0)]
	public Function_headerContext function_header() {
		Function_headerContext _localctx = new Function_headerContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(RECIPE);
			State = 245;
			Match(COLON);
			State = 246;
			Match(IDENTIFIER);
			State = 247;
			parameters();
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 248;
				outputs();
				}
				break;
			case 2:
				{
				State = 249;
				type(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSES() { return GetTokens(BubblGumParser.ELLIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSES(int i) {
			return GetToken(BubblGumParser.ELLIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(LEFT_PAREN);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 38280597353298944L) != 0) || _la==IMMUTABLE || _la==IDENTIFIER) {
				{
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMMUTABLE) {
					{
					State = 253;
					Match(IMMUTABLE);
					}
				}

				State = 256;
				type(0);
				State = 257;
				Match(IDENTIFIER);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSES) {
					{
					State = 258;
					Match(ELLIPSES);
					}
				}

				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 261;
					Match(COMMA);
					State = 263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 262;
						Match(IMMUTABLE);
						}
					}

					State = 265;
					type(0);
					State = 266;
					Match(IDENTIFIER);
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ELLIPSES) {
						{
						State = 267;
						Match(ELLIPSES);
						}
					}

					}
					}
					State = 274;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 277;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSES() { return GetTokens(BubblGumParser.ELLIPSES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSES(int i) {
			return GetToken(BubblGumParser.ELLIPSES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public OutputsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterOutputs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitOutputs(this);
		}
	}

	[RuleVersion(0)]
	public OutputsContext outputs() {
		OutputsContext _localctx = new OutputsContext(Context, State);
		EnterRule(_localctx, 24, RULE_outputs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(LEFT_ANGLE_BRACKET);
			{
			{
			State = 280;
			type(0);
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 281;
				Match(IDENTIFIER);
				}
			}

			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSES) {
				{
				State = 284;
				Match(ELLIPSES);
				}
			}

			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 287;
				Match(COMMA);
				State = 288;
				type(0);
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 289;
					Match(IDENTIFIER);
					}
				}

				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSES) {
					{
					State = 292;
					Match(ELLIPSES);
					}
				}

				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
			State = 300;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scope_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CURLY_BRACKET() { return GetToken(BubblGumParser.LEFT_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CURLY_BRACKET() { return GetToken(BubblGumParser.RIGHT_CURLY_BRACKET, 0); }
		public Scope_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterScope_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitScope_body(this);
		}
	}

	[RuleVersion(0)]
	public Scope_bodyContext scope_body() {
		Scope_bodyContext _localctx = new Scope_bodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_scope_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(LEFT_CURLY_BRACKET);
			State = 303;
			statement_list();
			State = 304;
			Match(RIGHT_CURLY_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 47869648180116742L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 243695617L) != 0)) {
				{
				{
				State = 306;
				statement();
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement);
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case MINTPACK:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case FLAVORPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Debug_statementContext debug_statement() {
			return GetRuleContext<Debug_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public Single_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitSingle_statement(this);
		}
	}

	[RuleVersion(0)]
	public Single_statementContext single_statement() {
		Single_statementContext _localctx = new Single_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_single_statement);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				base_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				print_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318;
				debug_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 319;
				if_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 320;
				loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PRINT() { return GetTokens(BubblGumParser.PRINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT(int i) {
			return GetToken(BubblGumParser.PRINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_print_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			Match(LEFT_PAREN);
			State = 326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 324;
				base_statement();
				}
				break;
			case 2:
				{
				State = 325;
				expression(0);
				}
				break;
			}
			State = 328;
			Match(RIGHT_PAREN);
			State = 329;
			Match(PRINT);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRINT) {
				{
				State = 330;
				Match(PRINT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Debug_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEBUG() { return GetTokens(BubblGumParser.DEBUG); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG(int i) {
			return GetToken(BubblGumParser.DEBUG, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_statementContext base_statement() {
			return GetRuleContext<Base_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Debug_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debug_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDebug_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDebug_statement(this);
		}
	}

	[RuleVersion(0)]
	public Debug_statementContext debug_statement() {
		Debug_statementContext _localctx = new Debug_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_debug_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(LEFT_PAREN);
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 334;
				base_statement();
				}
				break;
			case 2:
				{
				State = 335;
				expression(0);
				}
				break;
			}
			State = 338;
			Match(RIGHT_PAREN);
			State = 339;
			Match(DEBUG);
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEBUG) {
				{
				State = 340;
				Match(DEBUG);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_declarationContext primitive_declaration() {
			return GetRuleContext<Primitive_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_inc_decContext variable_inc_dec() {
			return GetRuleContext<Variable_inc_decContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		public Base_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBase_statement(this);
		}
	}

	[RuleVersion(0)]
	public Base_statementContext base_statement() {
		Base_statementContext _localctx = new Base_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_base_statement);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				primitive_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345;
				variable_inc_dec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 346;
				return_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 347;
				expression(0);
				State = 348;
				method_call();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POPSTREAM() { return GetToken(BubblGumParser.POPSTREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_return_statement);
		int _la;
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 352;
				Match(POP);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 353;
				Match(POP);
				State = 354;
				expression(0);
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THICK_ARROW) {
					{
					State = 355;
					Match(THICK_ARROW);
					State = 356;
					expression(0);
					}
				}

				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 359;
				Match(POP);
				State = 360;
				expression(0);
				State = 361;
				Match(THICK_ARROW);
				State = 362;
				Match(POPSTREAM);
				State = 367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 363;
					Match(LEFT_PAREN);
					State = 364;
					expression(0);
					State = 365;
					Match(RIGHT_PAREN);
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext[] primitive() {
			return GetRuleContexts<PrimitiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive(int i) {
			return GetRuleContext<PrimitiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Primitive_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_declarationContext primitive_declaration() {
		Primitive_declarationContext _localctx = new Primitive_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_primitive_declaration);
		int _la;
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 371;
				primitive();
				State = 372;
				Match(IDENTIFIER);
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 373;
					Match(COMMA);
					State = 374;
					primitive();
					State = 375;
					Match(IDENTIFIER);
					}
					}
					State = 381;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 382;
				primitive();
				State = 383;
				Match(IDENTIFIER);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 384;
					Match(COMMA);
					State = 385;
					Match(IDENTIFIER);
					}
					}
					State = 390;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BubblGumParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IMMUTABLE() { return GetTokens(BubblGumParser.IMMUTABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE(int i) {
			return GetToken(BubblGumParser.IMMUTABLE, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				{
				State = 400;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 394;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IMMUTABLE) {
						{
						State = 393;
						Match(IMMUTABLE);
						}
					}

					State = 398;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 396;
						type(0);
						}
						break;
					case FLAVOR:
						{
						State = 397;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 402;
				Match(IDENTIFIER);
				}
				}
				break;
			case 2:
				{
				State = 403;
				expression(0);
				}
				break;
			}
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 406;
				Match(COMMA);
				State = 418;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					{
					State = 414;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						State = 408;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==IMMUTABLE) {
							{
							State = 407;
							Match(IMMUTABLE);
							}
						}

						State = 412;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SUGAR:
						case CARB:
						case CAL:
						case KCAL:
						case YUM:
						case PURE:
						case SUGARPACK:
						case CARBPACK:
						case CALPACK:
						case KCALPACK:
						case YUMPACK:
						case LEFT_SQUARE_BRACKET:
						case LEFT_ANGLE_BRACKET:
						case IDENTIFIER:
							{
							State = 410;
							type(0);
							}
							break;
						case FLAVOR:
							{
							State = 411;
							Match(FLAVOR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					State = 416;
					Match(IDENTIFIER);
					}
					}
					break;
				case 2:
					{
					State = 417;
					expression(0);
					}
					break;
				}
				}
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 425;
			Match(ASSIGN);
			State = 426;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_inc_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_COLON() { return GetToken(BubblGumParser.PLUS_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_COLON() { return GetToken(BubblGumParser.MINUS_COLON, 0); }
		public Variable_inc_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_inc_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterVariable_inc_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitVariable_inc_dec(this);
		}
	}

	[RuleVersion(0)]
	public Variable_inc_decContext variable_inc_dec() {
		Variable_inc_decContext _localctx = new Variable_inc_decContext(Context, State);
		EnterRule(_localctx, 46, RULE_variable_inc_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			expression(0);
			State = 429;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_COLON || _la==MINUS_COLON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 430;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BubblGumParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext[] elif_statement() {
			return GetRuleContexts<Elif_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_statementContext elif_statement(int i) {
			return GetRuleContext<Elif_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(IF);
			State = 433;
			expression(0);
			State = 437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 434;
				Match(COLON);
				State = 435;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 436;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 442;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 439;
					elif_statement();
					}
					} 
				}
				State = 444;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 445;
				else_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(BubblGumParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Elif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElif_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElif_statement(this);
		}
	}

	[RuleVersion(0)]
	public Elif_statementContext elif_statement() {
		Elif_statementContext _localctx = new Elif_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_elif_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 448;
			Match(ELIF);
			State = 449;
			expression(0);
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 450;
				Match(COLON);
				State = 451;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 452;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BubblGumParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_else_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 455;
			Match(ELSE);
			State = 459;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 456;
				Match(COLON);
				State = 457;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 458;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Repeat_loopContext repeat_loop() {
			return GetRuleContext<Repeat_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pop_loopContext pop_loop() {
			return GetRuleContext<Pop_loopContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 54, RULE_loop);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 461;
				while_loop();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 462;
				repeat_loop();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 463;
				pop_loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BubblGumParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BubblGumParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 56, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(WHILE);
			State = 467;
			expression(0);
			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 468;
				Match(COLON);
				State = 469;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 470;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Repeat_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(BubblGumParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(BubblGumParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BubblGumParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_DOWN() { return GetToken(BubblGumParser.REPEAT_DOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_UP() { return GetToken(BubblGumParser.REPEAT_UP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		public Repeat_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterRepeat_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitRepeat_loop(this);
		}
	}

	[RuleVersion(0)]
	public Repeat_loopContext repeat_loop() {
		Repeat_loopContext _localctx = new Repeat_loopContext(Context, State);
		EnterRule(_localctx, 58, RULE_repeat_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(IDENTIFIER);
			State = 474;
			Match(COLON);
			State = 475;
			_la = TokenStream.LA(1);
			if ( !(_la==REPEAT_UP || _la==REPEAT_DOWN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 476;
			Match(LEFT_PAREN);
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 477;
				@int();
				}
				break;
			case 2:
				{
				State = 478;
				expression(0);
				}
				break;
			}
			State = 481;
			Match(COMMA);
			State = 484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 482;
				@int();
				}
				break;
			case 2:
				{
				State = 483;
				expression(0);
				}
				break;
			}
			State = 486;
			Match(RIGHT_PAREN);
			State = 490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 487;
				Match(COLON);
				State = 488;
				single_statement();
				}
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 489;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pop_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POP() { return GetToken(BubblGumParser.POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BubblGumParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_statementContext single_statement() {
			return GetRuleContext<Single_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scope_bodyContext scope_body() {
			return GetRuleContext<Scope_bodyContext>(0);
		}
		public Pop_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pop_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPop_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPop_loop(this);
		}
	}

	[RuleVersion(0)]
	public Pop_loopContext pop_loop() {
		Pop_loopContext _localctx = new Pop_loopContext(Context, State);
		EnterRule(_localctx, 60, RULE_pop_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(POP);
			State = 493;
			Match(IDENTIFIER);
			State = 494;
			Match(FROM);
			State = 495;
			expression(0);
			State = 496;
			Match(THICK_ARROW);
			State = 499;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS:
			case SWEETS:
			case FLAVOR:
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case POP:
			case PURE:
			case MINTPACK:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case FLAVORPACK:
			case YUP:
			case NOPE:
			case FLAVORLESS:
			case IF:
			case WHILE:
			case NOT:
			case LEFT_PAREN:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IMMUTABLE:
			case NOT_OP:
			case PLUS:
			case MINUS:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case STRING_LITERAL:
			case CHAR_LITERAL:
				{
				State = 497;
				single_statement();
				}
				break;
			case LEFT_CURLY_BRACKET:
				{
				State = 498;
				scope_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWEETS() { return GetToken(BubblGumParser.SWEETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BubblGumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVORPACK() { return GetToken(BubblGumParser.FLAVORPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BubblGumParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_OP() { return GetToken(BubblGumParser.NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINTPACK() { return GetToken(BubblGumParser.MINTPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BubblGumParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(BubblGumParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVORLESS() { return GetToken(BubblGumParser.FLAVORLESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(BubblGumParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO() { return GetToken(BubblGumParser.MODULO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT() { return GetToken(BubblGumParser.LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT() { return GetToken(BubblGumParser.RIGHT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(BubblGumParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(BubblGumParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(BubblGumParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(BubblGumParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(BubblGumParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_1() { return GetToken(BubblGumParser.NOT_EQ_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_2() { return GetToken(BubblGumParser.NOT_EQ_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BubblGumParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_OF() { return GetToken(BubblGumParser.SUBCLASS_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BubblGumParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(BubblGumParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(BubblGumParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_OP() { return GetToken(BubblGumParser.XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XNOR() { return GetToken(BubblGumParser.XNOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BubblGumParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(BubblGumParser.OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_callContext method_call() {
			return GetRuleContext<Method_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THICK_ARROW() { return GetToken(BubblGumParser.THICK_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 502;
				Match(LEFT_PAREN);
				State = 503;
				expression(0);
				State = 504;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 506;
				Match(SWEETS);
				State = 507;
				Match(THIN_ARROW);
				State = 508;
				expression(27);
				}
				break;
			case 3:
				{
				State = 509;
				Match(IDENTIFIER);
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==THIN_ARROW) {
					{
					{
					State = 510;
					Match(THIN_ARROW);
					State = 511;
					Match(IDENTIFIER);
					}
					}
					State = 516;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 517;
				Match(DOT);
				State = 518;
				expression(24);
				}
				break;
			case 4:
				{
				State = 521;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
					{
					State = 519;
					array();
					}
					break;
				case FLAVORPACK:
					{
					State = 520;
					Match(FLAVORPACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 523;
				Match(LEFT_PAREN);
				State = 524;
				expression(0);
				State = 525;
				Match(RIGHT_PAREN);
				}
				break;
			case 5:
				{
				State = 527;
				Match(LEFT_ANGLE_BRACKET);
				State = 528;
				expression(0);
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 529;
					Match(COMMA);
					State = 530;
					expression(0);
					}
					}
					State = 535;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 536;
				Match(RIGHT_ANGLE_BRACKET);
				}
				break;
			case 6:
				{
				State = 538;
				Match(LEFT_SQUARE_BRACKET);
				State = 539;
				expression(0);
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 540;
					Match(COMMA);
					State = 541;
					expression(0);
					}
					}
					State = 546;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 547;
				Match(RIGHT_SQUARE_BRACKET);
				}
				break;
			case 7:
				{
				State = 549;
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==NOT_OP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 550;
				expression(18);
				}
				break;
			case 8:
				{
				State = 551;
				boolean();
				}
				break;
			case 9:
				{
				State = 552;
				identifier();
				}
				break;
			case 10:
				{
				State = 553;
				@double();
				}
				break;
			case 11:
				{
				State = 554;
				@int();
				}
				break;
			case 12:
				{
				State = 555;
				Match(MINTPACK);
				}
				break;
			case 13:
				{
				State = 556;
				Match(STRING_LITERAL);
				}
				break;
			case 14:
				{
				State = 557;
				Match(CHAR_LITERAL);
				}
				break;
			case 15:
				{
				State = 558;
				Match(FLAVORLESS);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 606;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 604;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 561;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 562;
						Match(THIN_ARROW);
						State = 563;
						expression(26);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 564;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 565;
						_la = TokenStream.LA(1);
						if ( !(_la==POWER || _la==MODULO) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 566;
						expression(18);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 567;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 568;
						_la = TokenStream.LA(1);
						if ( !(_la==LEFT_SHIFT || _la==RIGHT_SHIFT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 569;
						expression(17);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 570;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 571;
						_la = TokenStream.LA(1);
						if ( !(_la==MULTIPLY || _la==DIVIDE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 572;
						expression(16);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 573;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 574;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 575;
						expression(15);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 576;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 577;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 24579L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 578;
						expression(14);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 579;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 580;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 13086228481L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 581;
						expression(13);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 582;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 583;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==AND_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 584;
						expression(12);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 585;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 586;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 562949953421315L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 587;
						expression(11);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 588;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 589;
						_la = TokenStream.LA(1);
						if ( !(_la==OR || _la==OR_OP) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 590;
						expression(10);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 591;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 592;
						Match(LEFT_SQUARE_BRACKET);
						State = 593;
						expression(0);
						State = 594;
						Match(RIGHT_SQUARE_BRACKET);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 596;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 597;
						method_call();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 598;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 599;
						Match(THICK_ARROW);
						State = 602;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case SUGAR:
						case CARB:
						case CAL:
						case KCAL:
						case YUM:
						case PURE:
							{
							State = 600;
							primitive();
							}
							break;
						case IDENTIFIER:
							{
							State = 601;
							Match(IDENTIFIER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 608;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Method_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(BubblGumParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(BubblGumParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Method_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterMethod_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitMethod_call(this);
		}
	}

	[RuleVersion(0)]
	public Method_callContext method_call() {
		Method_callContext _localctx = new Method_callContext(Context, State);
		EnterRule(_localctx, 64, RULE_method_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(LEFT_PAREN);
			State = 621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 38861211974500358L) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 7437L) != 0)) {
					{
					State = 610;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				{
				State = 613;
				expression(0);
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 614;
					Match(COMMA);
					State = 615;
					expression(0);
					}
					}
					State = 620;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
			State = 623;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER_LITERAL() { return GetTokens(BubblGumParser.INTEGER_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL(int i) {
			return GetToken(BubblGumParser.INTEGER_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BubblGumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterDouble(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitDouble(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 66, RULE_double);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 625;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 628;
			Match(INTEGER_LITERAL);
			State = 629;
			Match(DOT);
			State = 631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 630;
				Match(INTEGER_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BubblGumParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BubblGumParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BubblGumParser.MINUS, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 68, RULE_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 633;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 636;
			Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUP() { return GetToken(BubblGumParser.YUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPE() { return GetToken(BubblGumParser.NOPE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 70, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			_la = TokenStream.LA(1);
			if ( !(_la==YUP || _la==NOPE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BubblGumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(BubblGumParser.THIS, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			_la = TokenStream.LA(1);
			if ( !(_la==THIS || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK() { return GetToken(BubblGumParser.PACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 643;
				primitive();
				}
				break;
			case 2:
				{
				State = 644;
				array();
				}
				break;
			case 3:
				{
				State = 645;
				tuple();
				}
				break;
			case 4:
				{
				State = 646;
				@object();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 653;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 649;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 650;
					Match(PACK);
					}
					} 
				}
				State = 655;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BubblGumParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THIN_ARROW() { return GetTokens(BubblGumParser.THIN_ARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIN_ARROW(int i) {
			return GetToken(BubblGumParser.THIN_ARROW, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 76, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 656;
				Match(IDENTIFIER);
				State = 661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==THIN_ARROW) {
					{
					{
					State = 657;
					Match(THIN_ARROW);
					State = 658;
					Match(IDENTIFIER);
					}
					}
					State = 663;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 664;
				Match(DOT);
				}
				break;
			}
			State = 667;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_packContext primitive_pack() {
			return GetRuleContext<Primitive_packContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_arrayContext any_array() {
			return GetRuleContext<Any_arrayContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 78, RULE_array);
		try {
			State = 671;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669;
				primitive_pack();
				}
				break;
			case LEFT_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670;
				any_array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGAR() { return GetToken(BubblGumParser.SUGAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARB() { return GetToken(BubblGumParser.CARB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAL() { return GetToken(BubblGumParser.CAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCAL() { return GetToken(BubblGumParser.KCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUM() { return GetToken(BubblGumParser.YUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 80, RULE_primitive);
		try {
			State = 680;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673;
				Match(SUGAR);
				}
				break;
			case CARB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 674;
				Match(CARB);
				}
				break;
			case CAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 675;
				Match(CAL);
				}
				break;
			case KCAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 676;
				Match(KCAL);
				}
				break;
			case YUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 677;
				Match(YUM);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 678;
				Match(PURE);
				State = 679;
				Match(SUGAR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_BRACKET() { return GetToken(BubblGumParser.LEFT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_BRACKET() { return GetToken(BubblGumParser.RIGHT_ANGLE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 82, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(LEFT_ANGLE_BRACKET);
			State = 685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGAR:
			case CARB:
			case CAL:
			case KCAL:
			case YUM:
			case PURE:
			case SUGARPACK:
			case CARBPACK:
			case CALPACK:
			case KCALPACK:
			case YUMPACK:
			case LEFT_SQUARE_BRACKET:
			case LEFT_ANGLE_BRACKET:
			case IDENTIFIER:
				{
				State = 683;
				type(0);
				}
				break;
			case FLAVOR:
				{
				State = 684;
				Match(FLAVOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 687;
				Match(IDENTIFIER);
				}
			}

			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 690;
				Match(COMMA);
				State = 693;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 691;
					type(0);
					}
					break;
				case FLAVOR:
					{
					State = 692;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 695;
					Match(IDENTIFIER);
					}
				}

				}
				}
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 703;
			Match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primitive_packContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUGARPACK() { return GetToken(BubblGumParser.SUGARPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARBPACK() { return GetToken(BubblGumParser.CARBPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALPACK() { return GetToken(BubblGumParser.CALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KCALPACK() { return GetToken(BubblGumParser.KCALPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YUMPACK() { return GetToken(BubblGumParser.YUMPACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(BubblGumParser.PURE, 0); }
		public Primitive_packContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_pack; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterPrimitive_pack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitPrimitive_pack(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_packContext primitive_pack() {
		Primitive_packContext _localctx = new Primitive_packContext(Context, State);
		EnterRule(_localctx, 84, RULE_primitive_pack);
		try {
			State = 712;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUGARPACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705;
				Match(SUGARPACK);
				}
				break;
			case CARBPACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706;
				Match(CARBPACK);
				}
				break;
			case CALPACK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 707;
				Match(CALPACK);
				}
				break;
			case KCALPACK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 708;
				Match(KCALPACK);
				}
				break;
			case YUMPACK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 709;
				Match(YUMPACK);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 710;
				Match(PURE);
				State = 711;
				Match(SUGARPACK);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(BubblGumParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(BubblGumParser.RIGHT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FLAVOR() { return GetTokens(BubblGumParser.FLAVOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAVOR(int i) {
			return GetToken(BubblGumParser.FLAVOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BubblGumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BubblGumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BubblGumParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BubblGumParser.COMMA, i);
		}
		public Any_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.EnterAny_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBubblGumListener typedListener = listener as IBubblGumListener;
			if (typedListener != null) typedListener.ExitAny_array(this);
		}
	}

	[RuleVersion(0)]
	public Any_arrayContext any_array() {
		Any_arrayContext _localctx = new Any_arrayContext(Context, State);
		EnterRule(_localctx, 86, RULE_any_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			Match(LEFT_SQUARE_BRACKET);
			State = 738;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 717;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 715;
					type(0);
					}
					break;
				case FLAVOR:
					{
					State = 716;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				{
				State = 721;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUGAR:
				case CARB:
				case CAL:
				case KCAL:
				case YUM:
				case PURE:
				case SUGARPACK:
				case CARBPACK:
				case CALPACK:
				case KCALPACK:
				case YUMPACK:
				case LEFT_SQUARE_BRACKET:
				case LEFT_ANGLE_BRACKET:
				case IDENTIFIER:
					{
					State = 719;
					type(0);
					}
					break;
				case FLAVOR:
					{
					State = 720;
					Match(FLAVOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 723;
					Match(IDENTIFIER);
					}
				}

				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 726;
					Match(COMMA);
					State = 729;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SUGAR:
					case CARB:
					case CAL:
					case KCAL:
					case YUM:
					case PURE:
					case SUGARPACK:
					case CARBPACK:
					case CALPACK:
					case KCALPACK:
					case YUMPACK:
					case LEFT_SQUARE_BRACKET:
					case LEFT_ANGLE_BRACKET:
					case IDENTIFIER:
						{
						State = 727;
						type(0);
						}
						break;
					case FLAVOR:
						{
						State = 728;
						Match(FLAVOR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 732;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IDENTIFIER) {
						{
						State = 731;
						Match(IDENTIFIER);
						}
					}

					}
					}
					State = 736;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				}
				break;
			}
			State = 740;
			Match(RIGHT_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 37: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 25);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 26);
		case 11: return Precpred(Context, 23);
		case 12: return Precpred(Context, 19);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,99,743,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,1,0,5,0,90,8,0,10,0,12,0,93,9,0,1,0,3,0,96,8,0,1,0,1,0,1,0,1,
		0,1,0,5,0,103,8,0,10,0,12,0,106,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,114,8,
		1,10,1,12,1,117,9,1,1,2,1,2,1,2,1,2,5,2,123,8,2,10,2,12,2,126,9,2,1,2,
		3,2,129,8,2,1,3,3,3,132,8,3,1,3,3,3,135,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,
		3,143,8,3,10,3,12,3,146,9,3,3,3,148,8,3,1,3,1,3,5,3,152,8,3,10,3,12,3,
		155,9,3,1,3,1,3,1,4,3,4,160,8,4,1,4,3,4,163,8,4,1,4,1,4,1,4,1,4,1,4,1,
		4,5,4,171,8,4,10,4,12,4,174,9,4,3,4,176,8,4,1,4,1,4,5,4,180,8,4,10,4,12,
		4,183,9,4,1,4,1,4,1,5,3,5,188,8,5,1,5,3,5,191,8,5,1,5,1,5,1,5,3,5,196,
		8,5,1,5,1,5,3,5,200,8,5,3,5,202,8,5,1,6,3,6,205,8,6,1,6,3,6,208,8,6,1,
		6,1,6,1,6,3,6,213,8,6,1,6,1,6,3,6,217,8,6,3,6,219,8,6,1,7,1,7,1,8,3,8,
		224,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,232,8,8,10,8,12,8,235,9,8,1,8,1,8,
		1,9,1,9,1,9,1,9,3,9,243,8,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,251,8,10,
		1,11,1,11,3,11,255,8,11,1,11,1,11,1,11,3,11,260,8,11,1,11,1,11,3,11,264,
		8,11,1,11,1,11,1,11,3,11,269,8,11,5,11,271,8,11,10,11,12,11,274,9,11,3,
		11,276,8,11,1,11,1,11,1,12,1,12,1,12,3,12,283,8,12,1,12,3,12,286,8,12,
		1,12,1,12,1,12,3,12,291,8,12,1,12,3,12,294,8,12,5,12,296,8,12,10,12,12,
		12,299,9,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,5,14,308,8,14,10,14,12,
		14,311,9,14,1,15,1,15,3,15,315,8,15,1,16,1,16,1,16,1,16,1,16,3,16,322,
		8,16,1,17,1,17,1,17,3,17,327,8,17,1,17,1,17,1,17,3,17,332,8,17,1,18,1,
		18,1,18,3,18,337,8,18,1,18,1,18,1,18,3,18,342,8,18,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,3,19,351,8,19,1,20,1,20,1,20,1,20,1,20,3,20,358,8,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,368,8,20,3,20,370,8,20,1,21,
		1,21,1,21,1,21,1,21,1,21,5,21,378,8,21,10,21,12,21,381,9,21,1,21,1,21,
		1,21,1,21,5,21,387,8,21,10,21,12,21,390,9,21,3,21,392,8,21,1,22,3,22,395,
		8,22,1,22,1,22,3,22,399,8,22,3,22,401,8,22,1,22,1,22,3,22,405,8,22,1,22,
		1,22,3,22,409,8,22,1,22,1,22,3,22,413,8,22,3,22,415,8,22,1,22,1,22,3,22,
		419,8,22,5,22,421,8,22,10,22,12,22,424,9,22,1,22,1,22,1,22,1,23,1,23,1,
		23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,438,8,24,1,24,5,24,441,8,24,10,24,
		12,24,444,9,24,1,24,3,24,447,8,24,1,25,1,25,1,25,1,25,1,25,3,25,454,8,
		25,1,26,1,26,1,26,1,26,3,26,460,8,26,1,27,1,27,1,27,3,27,465,8,27,1,28,
		1,28,1,28,1,28,1,28,3,28,472,8,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,480,
		8,29,1,29,1,29,1,29,3,29,485,8,29,1,29,1,29,1,29,1,29,3,29,491,8,29,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,500,8,30,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,5,31,513,8,31,10,31,12,31,516,9,31,1,31,
		1,31,1,31,1,31,3,31,522,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,
		31,532,8,31,10,31,12,31,535,9,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,543,
		8,31,10,31,12,31,546,9,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,3,31,560,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,3,31,603,8,31,5,31,605,8,31,10,31,12,31,608,9,31,
		1,32,1,32,3,32,612,8,32,1,32,1,32,1,32,5,32,617,8,32,10,32,12,32,620,9,
		32,3,32,622,8,32,1,32,1,32,1,33,3,33,627,8,33,1,33,1,33,1,33,3,33,632,
		8,33,1,34,3,34,635,8,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,
		37,1,37,3,37,648,8,37,1,37,1,37,5,37,652,8,37,10,37,12,37,655,9,37,1,38,
		1,38,1,38,5,38,660,8,38,10,38,12,38,663,9,38,1,38,3,38,666,8,38,1,38,1,
		38,1,39,1,39,3,39,672,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,681,
		8,40,1,41,1,41,1,41,3,41,686,8,41,1,41,3,41,689,8,41,1,41,1,41,1,41,3,
		41,694,8,41,1,41,3,41,697,8,41,5,41,699,8,41,10,41,12,41,702,9,41,1,41,
		1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,713,8,42,1,43,1,43,1,43,3,
		43,718,8,43,1,43,1,43,3,43,722,8,43,1,43,3,43,725,8,43,1,43,1,43,1,43,
		3,43,730,8,43,1,43,3,43,733,8,43,4,43,735,8,43,11,43,12,43,736,3,43,739,
		8,43,1,43,1,43,1,43,0,2,62,74,44,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,82,84,86,0,16,1,0,62,63,1,0,15,17,1,0,74,75,1,0,41,42,2,0,44,
		44,82,82,2,0,86,86,89,89,1,0,70,71,1,0,87,88,1,0,84,85,2,0,55,56,68,69,
		3,0,46,46,72,73,78,79,2,0,32,32,80,80,2,0,34,35,83,83,2,0,33,33,81,81,
		1,0,30,31,2,0,1,1,90,90,856,0,91,1,0,0,0,2,109,1,0,0,0,4,118,1,0,0,0,6,
		131,1,0,0,0,8,159,1,0,0,0,10,187,1,0,0,0,12,204,1,0,0,0,14,220,1,0,0,0,
		16,223,1,0,0,0,18,238,1,0,0,0,20,244,1,0,0,0,22,252,1,0,0,0,24,279,1,0,
		0,0,26,302,1,0,0,0,28,309,1,0,0,0,30,314,1,0,0,0,32,321,1,0,0,0,34,323,
		1,0,0,0,36,333,1,0,0,0,38,350,1,0,0,0,40,369,1,0,0,0,42,391,1,0,0,0,44,
		404,1,0,0,0,46,428,1,0,0,0,48,432,1,0,0,0,50,448,1,0,0,0,52,455,1,0,0,
		0,54,464,1,0,0,0,56,466,1,0,0,0,58,473,1,0,0,0,60,492,1,0,0,0,62,559,1,
		0,0,0,64,609,1,0,0,0,66,626,1,0,0,0,68,634,1,0,0,0,70,638,1,0,0,0,72,640,
		1,0,0,0,74,647,1,0,0,0,76,665,1,0,0,0,78,671,1,0,0,0,80,680,1,0,0,0,82,
		682,1,0,0,0,84,712,1,0,0,0,86,714,1,0,0,0,88,90,3,4,2,0,89,88,1,0,0,0,
		90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,
		94,96,3,2,1,0,95,94,1,0,0,0,95,96,1,0,0,0,96,104,1,0,0,0,97,103,3,6,3,
		0,98,103,3,8,4,0,99,103,3,18,9,0,100,103,3,16,8,0,101,103,3,30,15,0,102,
		97,1,0,0,0,102,98,1,0,0,0,102,99,1,0,0,0,102,100,1,0,0,0,102,101,1,0,0,
		0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,
		104,1,0,0,0,107,108,5,0,0,1,108,1,1,0,0,0,109,110,5,3,0,0,110,115,5,90,
		0,0,111,112,5,76,0,0,112,114,5,90,0,0,113,111,1,0,0,0,114,117,1,0,0,0,
		115,113,1,0,0,0,115,116,1,0,0,0,116,3,1,0,0,0,117,115,1,0,0,0,118,128,
		5,7,0,0,119,124,5,90,0,0,120,121,5,76,0,0,121,123,5,90,0,0,122,120,1,0,
		0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,129,1,0,0,0,126,
		124,1,0,0,0,127,129,5,93,0,0,128,119,1,0,0,0,128,127,1,0,0,0,129,5,1,0,
		0,0,130,132,5,20,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,
		135,3,14,7,0,134,133,1,0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,137,5,
		6,0,0,137,147,5,90,0,0,138,139,5,59,0,0,139,144,5,90,0,0,140,141,5,57,
		0,0,141,143,5,90,0,0,142,140,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,
		145,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,147,138,1,0,0,0,147,148,1,
		0,0,0,148,149,1,0,0,0,149,153,5,53,0,0,150,152,3,12,6,0,151,150,1,0,0,
		0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,
		153,1,0,0,0,156,157,5,54,0,0,157,7,1,0,0,0,158,160,5,20,0,0,159,158,1,
		0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,163,3,14,7,0,162,161,1,0,0,0,
		162,163,1,0,0,0,163,164,1,0,0,0,164,165,5,21,0,0,165,175,5,90,0,0,166,
		167,5,59,0,0,167,172,5,90,0,0,168,169,5,57,0,0,169,171,5,90,0,0,170,168,
		1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,176,1,0,0,
		0,174,172,1,0,0,0,175,166,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,
		181,5,53,0,0,178,180,3,10,5,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,
		1,0,0,0,181,182,1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,5,54,0,
		0,185,9,1,0,0,0,186,188,5,20,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,190,
		1,0,0,0,189,191,3,14,7,0,190,189,1,0,0,0,190,191,1,0,0,0,191,201,1,0,0,
		0,192,202,3,20,10,0,193,195,3,42,21,0,194,196,7,0,0,0,195,194,1,0,0,0,
		195,196,1,0,0,0,196,202,1,0,0,0,197,199,3,44,22,0,198,200,7,0,0,0,199,
		198,1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,201,192,1,0,0,0,201,193,1,
		0,0,0,201,197,1,0,0,0,202,11,1,0,0,0,203,205,5,20,0,0,204,203,1,0,0,0,
		204,205,1,0,0,0,205,207,1,0,0,0,206,208,3,14,7,0,207,206,1,0,0,0,207,208,
		1,0,0,0,208,218,1,0,0,0,209,219,3,18,9,0,210,212,3,42,21,0,211,213,7,0,
		0,0,212,211,1,0,0,0,212,213,1,0,0,0,213,219,1,0,0,0,214,216,3,44,22,0,
		215,217,7,0,0,0,216,215,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,209,
		1,0,0,0,218,210,1,0,0,0,218,214,1,0,0,0,219,13,1,0,0,0,220,221,7,1,0,0,
		221,15,1,0,0,0,222,224,3,14,7,0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,
		1,0,0,0,225,226,5,5,0,0,226,227,5,59,0,0,227,228,5,90,0,0,228,233,5,53,
		0,0,229,232,3,42,21,0,230,232,3,44,22,0,231,229,1,0,0,0,231,230,1,0,0,
		0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,
		233,1,0,0,0,236,237,5,54,0,0,237,17,1,0,0,0,238,242,3,20,10,0,239,240,
		5,59,0,0,240,243,3,32,16,0,241,243,3,26,13,0,242,239,1,0,0,0,242,241,1,
		0,0,0,243,19,1,0,0,0,244,245,5,4,0,0,245,246,5,59,0,0,246,247,5,90,0,0,
		247,250,3,22,11,0,248,251,3,24,12,0,249,251,3,74,37,0,250,248,1,0,0,0,
		250,249,1,0,0,0,250,251,1,0,0,0,251,21,1,0,0,0,252,275,5,49,0,0,253,255,
		5,67,0,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,3,74,
		37,0,257,259,5,90,0,0,258,260,5,60,0,0,259,258,1,0,0,0,259,260,1,0,0,0,
		260,272,1,0,0,0,261,263,5,57,0,0,262,264,5,67,0,0,263,262,1,0,0,0,263,
		264,1,0,0,0,264,265,1,0,0,0,265,266,3,74,37,0,266,268,5,90,0,0,267,269,
		5,60,0,0,268,267,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,261,1,0,0,
		0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,276,1,0,0,0,274,
		272,1,0,0,0,275,254,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,278,5,
		50,0,0,278,23,1,0,0,0,279,280,5,55,0,0,280,282,3,74,37,0,281,283,5,90,
		0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,286,5,60,0,0,285,
		284,1,0,0,0,285,286,1,0,0,0,286,297,1,0,0,0,287,288,5,57,0,0,288,290,3,
		74,37,0,289,291,5,90,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,
		0,292,294,5,60,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,
		287,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,
		0,0,0,299,297,1,0,0,0,300,301,5,56,0,0,301,25,1,0,0,0,302,303,5,53,0,0,
		303,304,3,28,14,0,304,305,5,54,0,0,305,27,1,0,0,0,306,308,3,30,15,0,307,
		306,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,29,1,0,
		0,0,311,309,1,0,0,0,312,315,3,32,16,0,313,315,3,26,13,0,314,312,1,0,0,
		0,314,313,1,0,0,0,315,31,1,0,0,0,316,322,3,38,19,0,317,322,3,34,17,0,318,
		322,3,36,18,0,319,322,3,48,24,0,320,322,3,54,27,0,321,316,1,0,0,0,321,
		317,1,0,0,0,321,318,1,0,0,0,321,319,1,0,0,0,321,320,1,0,0,0,322,33,1,0,
		0,0,323,326,5,49,0,0,324,327,3,38,19,0,325,327,3,62,31,0,326,324,1,0,0,
		0,326,325,1,0,0,0,327,328,1,0,0,0,328,329,5,50,0,0,329,331,5,62,0,0,330,
		332,5,62,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,35,1,0,0,0,333,336,5,
		49,0,0,334,337,3,38,19,0,335,337,3,62,31,0,336,334,1,0,0,0,336,335,1,0,
		0,0,337,338,1,0,0,0,338,339,5,50,0,0,339,341,5,63,0,0,340,342,5,63,0,0,
		341,340,1,0,0,0,341,342,1,0,0,0,342,37,1,0,0,0,343,351,3,42,21,0,344,351,
		3,44,22,0,345,351,3,46,23,0,346,351,3,40,20,0,347,348,3,62,31,0,348,349,
		3,64,32,0,349,351,1,0,0,0,350,343,1,0,0,0,350,344,1,0,0,0,350,345,1,0,
		0,0,350,346,1,0,0,0,350,347,1,0,0,0,351,39,1,0,0,0,352,370,5,18,0,0,353,
		354,5,18,0,0,354,357,3,62,31,0,355,356,5,77,0,0,356,358,3,62,31,0,357,
		355,1,0,0,0,357,358,1,0,0,0,358,370,1,0,0,0,359,360,5,18,0,0,360,361,3,
		62,31,0,361,362,5,77,0,0,362,367,5,43,0,0,363,364,5,49,0,0,364,365,3,62,
		31,0,365,366,5,50,0,0,366,368,1,0,0,0,367,363,1,0,0,0,367,368,1,0,0,0,
		368,370,1,0,0,0,369,352,1,0,0,0,369,353,1,0,0,0,369,359,1,0,0,0,370,41,
		1,0,0,0,371,372,3,80,40,0,372,379,5,90,0,0,373,374,5,57,0,0,374,375,3,
		80,40,0,375,376,5,90,0,0,376,378,1,0,0,0,377,373,1,0,0,0,378,381,1,0,0,
		0,379,377,1,0,0,0,379,380,1,0,0,0,380,392,1,0,0,0,381,379,1,0,0,0,382,
		383,3,80,40,0,383,388,5,90,0,0,384,385,5,57,0,0,385,387,5,90,0,0,386,384,
		1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,392,1,0,0,
		0,390,388,1,0,0,0,391,371,1,0,0,0,391,382,1,0,0,0,392,43,1,0,0,0,393,395,
		5,67,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,398,1,0,0,0,396,399,3,74,
		37,0,397,399,5,8,0,0,398,396,1,0,0,0,398,397,1,0,0,0,399,401,1,0,0,0,400,
		394,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,405,5,90,0,0,403,405,3,
		62,31,0,404,400,1,0,0,0,404,403,1,0,0,0,405,422,1,0,0,0,406,418,5,57,0,
		0,407,409,5,67,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,412,1,0,0,0,410,
		413,3,74,37,0,411,413,5,8,0,0,412,410,1,0,0,0,412,411,1,0,0,0,413,415,
		1,0,0,0,414,408,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,419,5,90,0,
		0,417,419,3,62,31,0,418,414,1,0,0,0,418,417,1,0,0,0,419,421,1,0,0,0,420,
		406,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,425,1,
		0,0,0,424,422,1,0,0,0,425,426,5,48,0,0,426,427,3,62,31,0,427,45,1,0,0,
		0,428,429,3,62,31,0,429,430,7,2,0,0,430,431,3,62,31,0,431,47,1,0,0,0,432,
		433,5,37,0,0,433,437,3,62,31,0,434,435,5,59,0,0,435,438,3,32,16,0,436,
		438,3,26,13,0,437,434,1,0,0,0,437,436,1,0,0,0,438,442,1,0,0,0,439,441,
		3,50,25,0,440,439,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,
		0,0,443,446,1,0,0,0,444,442,1,0,0,0,445,447,3,52,26,0,446,445,1,0,0,0,
		446,447,1,0,0,0,447,49,1,0,0,0,448,449,5,39,0,0,449,453,3,62,31,0,450,
		451,5,59,0,0,451,454,3,32,16,0,452,454,3,26,13,0,453,450,1,0,0,0,453,452,
		1,0,0,0,454,51,1,0,0,0,455,459,5,38,0,0,456,457,5,59,0,0,457,460,3,32,
		16,0,458,460,3,26,13,0,459,456,1,0,0,0,459,458,1,0,0,0,460,53,1,0,0,0,
		461,465,3,56,28,0,462,465,3,58,29,0,463,465,3,60,30,0,464,461,1,0,0,0,
		464,462,1,0,0,0,464,463,1,0,0,0,465,55,1,0,0,0,466,467,5,40,0,0,467,471,
		3,62,31,0,468,469,5,59,0,0,469,472,3,32,16,0,470,472,3,26,13,0,471,468,
		1,0,0,0,471,470,1,0,0,0,472,57,1,0,0,0,473,474,5,90,0,0,474,475,5,59,0,
		0,475,476,7,3,0,0,476,479,5,49,0,0,477,480,3,68,34,0,478,480,3,62,31,0,
		479,477,1,0,0,0,479,478,1,0,0,0,480,481,1,0,0,0,481,484,5,57,0,0,482,485,
		3,68,34,0,483,485,3,62,31,0,484,482,1,0,0,0,484,483,1,0,0,0,485,486,1,
		0,0,0,486,490,5,50,0,0,487,488,5,59,0,0,488,491,3,32,16,0,489,491,3,26,
		13,0,490,487,1,0,0,0,490,489,1,0,0,0,491,59,1,0,0,0,492,493,5,18,0,0,493,
		494,5,90,0,0,494,495,5,47,0,0,495,496,3,62,31,0,496,499,5,77,0,0,497,500,
		3,32,16,0,498,500,3,26,13,0,499,497,1,0,0,0,499,498,1,0,0,0,500,61,1,0,
		0,0,501,502,6,31,-1,0,502,503,5,49,0,0,503,504,3,62,31,0,504,505,5,50,
		0,0,505,560,1,0,0,0,506,507,5,2,0,0,507,508,5,76,0,0,508,560,3,62,31,27,
		509,514,5,90,0,0,510,511,5,76,0,0,511,513,5,90,0,0,512,510,1,0,0,0,513,
		516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,514,1,
		0,0,0,517,518,5,61,0,0,518,560,3,62,31,24,519,522,3,78,39,0,520,522,5,
		29,0,0,521,519,1,0,0,0,521,520,1,0,0,0,522,523,1,0,0,0,523,524,5,49,0,
		0,524,525,3,62,31,0,525,526,5,50,0,0,526,560,1,0,0,0,527,528,5,55,0,0,
		528,533,3,62,31,0,529,530,5,57,0,0,530,532,3,62,31,0,531,529,1,0,0,0,532,
		535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,
		0,0,0,536,537,5,56,0,0,537,560,1,0,0,0,538,539,5,51,0,0,539,544,3,62,31,
		0,540,541,5,57,0,0,541,543,3,62,31,0,542,540,1,0,0,0,543,546,1,0,0,0,544,
		542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,544,1,0,0,0,547,548,5,
		52,0,0,548,560,1,0,0,0,549,550,7,4,0,0,550,560,3,62,31,18,551,560,3,70,
		35,0,552,560,3,72,36,0,553,560,3,66,33,0,554,560,3,68,34,0,555,560,5,22,
		0,0,556,560,5,93,0,0,557,560,5,94,0,0,558,560,5,36,0,0,559,501,1,0,0,0,
		559,506,1,0,0,0,559,509,1,0,0,0,559,521,1,0,0,0,559,527,1,0,0,0,559,538,
		1,0,0,0,559,549,1,0,0,0,559,551,1,0,0,0,559,552,1,0,0,0,559,553,1,0,0,
		0,559,554,1,0,0,0,559,555,1,0,0,0,559,556,1,0,0,0,559,557,1,0,0,0,559,
		558,1,0,0,0,560,606,1,0,0,0,561,562,10,25,0,0,562,563,5,76,0,0,563,605,
		3,62,31,26,564,565,10,17,0,0,565,566,7,5,0,0,566,605,3,62,31,18,567,568,
		10,16,0,0,568,569,7,6,0,0,569,605,3,62,31,17,570,571,10,15,0,0,571,572,
		7,7,0,0,572,605,3,62,31,16,573,574,10,14,0,0,574,575,7,8,0,0,575,605,3,
		62,31,15,576,577,10,13,0,0,577,578,7,9,0,0,578,605,3,62,31,14,579,580,
		10,12,0,0,580,581,7,10,0,0,581,605,3,62,31,13,582,583,10,11,0,0,583,584,
		7,11,0,0,584,605,3,62,31,12,585,586,10,10,0,0,586,587,7,12,0,0,587,605,
		3,62,31,11,588,589,10,9,0,0,589,590,7,13,0,0,590,605,3,62,31,10,591,592,
		10,26,0,0,592,593,5,51,0,0,593,594,3,62,31,0,594,595,5,52,0,0,595,605,
		1,0,0,0,596,597,10,23,0,0,597,605,3,64,32,0,598,599,10,19,0,0,599,602,
		5,77,0,0,600,603,3,80,40,0,601,603,5,90,0,0,602,600,1,0,0,0,602,601,1,
		0,0,0,603,605,1,0,0,0,604,561,1,0,0,0,604,564,1,0,0,0,604,567,1,0,0,0,
		604,570,1,0,0,0,604,573,1,0,0,0,604,576,1,0,0,0,604,579,1,0,0,0,604,582,
		1,0,0,0,604,585,1,0,0,0,604,588,1,0,0,0,604,591,1,0,0,0,604,596,1,0,0,
		0,604,598,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,
		63,1,0,0,0,608,606,1,0,0,0,609,621,5,49,0,0,610,612,3,62,31,0,611,610,
		1,0,0,0,611,612,1,0,0,0,612,622,1,0,0,0,613,618,3,62,31,0,614,615,5,57,
		0,0,615,617,3,62,31,0,616,614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,
		618,619,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,621,611,1,0,0,0,621,613,
		1,0,0,0,622,623,1,0,0,0,623,624,5,50,0,0,624,65,1,0,0,0,625,627,7,8,0,
		0,626,625,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,629,5,92,0,0,629,
		631,5,61,0,0,630,632,5,92,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,67,1,
		0,0,0,633,635,7,8,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,
		636,637,5,92,0,0,637,69,1,0,0,0,638,639,7,14,0,0,639,71,1,0,0,0,640,641,
		7,15,0,0,641,73,1,0,0,0,642,643,6,37,-1,0,643,648,3,80,40,0,644,648,3,
		78,39,0,645,648,3,82,41,0,646,648,3,76,38,0,647,642,1,0,0,0,647,644,1,
		0,0,0,647,645,1,0,0,0,647,646,1,0,0,0,648,653,1,0,0,0,649,650,10,1,0,0,
		650,652,5,23,0,0,651,649,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,653,654,
		1,0,0,0,654,75,1,0,0,0,655,653,1,0,0,0,656,661,5,90,0,0,657,658,5,76,0,
		0,658,660,5,90,0,0,659,657,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,
		662,1,0,0,0,662,664,1,0,0,0,663,661,1,0,0,0,664,666,5,61,0,0,665,656,1,
		0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,668,5,90,0,0,668,77,1,0,0,0,
		669,672,3,84,42,0,670,672,3,86,43,0,671,669,1,0,0,0,671,670,1,0,0,0,672,
		79,1,0,0,0,673,681,5,10,0,0,674,681,5,11,0,0,675,681,5,12,0,0,676,681,
		5,13,0,0,677,681,5,14,0,0,678,679,5,19,0,0,679,681,5,10,0,0,680,673,1,
		0,0,0,680,674,1,0,0,0,680,675,1,0,0,0,680,676,1,0,0,0,680,677,1,0,0,0,
		680,678,1,0,0,0,681,81,1,0,0,0,682,685,5,55,0,0,683,686,3,74,37,0,684,
		686,5,8,0,0,685,683,1,0,0,0,685,684,1,0,0,0,686,688,1,0,0,0,687,689,5,
		90,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,700,1,0,0,0,690,693,5,57,0,
		0,691,694,3,74,37,0,692,694,5,8,0,0,693,691,1,0,0,0,693,692,1,0,0,0,694,
		696,1,0,0,0,695,697,5,90,0,0,696,695,1,0,0,0,696,697,1,0,0,0,697,699,1,
		0,0,0,698,690,1,0,0,0,699,702,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,
		701,703,1,0,0,0,702,700,1,0,0,0,703,704,5,56,0,0,704,83,1,0,0,0,705,713,
		5,24,0,0,706,713,5,25,0,0,707,713,5,26,0,0,708,713,5,27,0,0,709,713,5,
		28,0,0,710,711,5,19,0,0,711,713,5,24,0,0,712,705,1,0,0,0,712,706,1,0,0,
		0,712,707,1,0,0,0,712,708,1,0,0,0,712,709,1,0,0,0,712,710,1,0,0,0,713,
		85,1,0,0,0,714,738,5,51,0,0,715,718,3,74,37,0,716,718,5,8,0,0,717,715,
		1,0,0,0,717,716,1,0,0,0,718,739,1,0,0,0,719,722,3,74,37,0,720,722,5,8,
		0,0,721,719,1,0,0,0,721,720,1,0,0,0,722,724,1,0,0,0,723,725,5,90,0,0,724,
		723,1,0,0,0,724,725,1,0,0,0,725,734,1,0,0,0,726,729,5,57,0,0,727,730,3,
		74,37,0,728,730,5,8,0,0,729,727,1,0,0,0,729,728,1,0,0,0,730,732,1,0,0,
		0,731,733,5,90,0,0,732,731,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,
		726,1,0,0,0,735,736,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,739,1,
		0,0,0,738,717,1,0,0,0,738,721,1,0,0,0,739,740,1,0,0,0,740,741,5,52,0,0,
		741,87,1,0,0,0,110,91,95,102,104,115,124,128,131,134,144,147,153,159,162,
		172,175,181,187,190,195,199,201,204,207,212,216,218,223,231,233,242,250,
		254,259,263,268,272,275,282,285,290,293,297,309,314,321,326,331,336,341,
		350,357,367,369,379,388,391,394,398,400,404,408,412,414,418,422,437,442,
		446,453,459,464,471,479,484,490,499,514,521,533,544,559,602,604,606,611,
		618,621,626,631,634,647,653,661,665,671,680,685,688,693,696,700,712,717,
		721,724,729,732,736,738
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
