//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Preprocessing/Parser/BubblGumHeader.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BubblGumHeaderLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STOCK=1, CHEW=2, FROM=3, IDENTIFIER=4, THIN_ARROW=5, STRING_LITERAL=6, 
		ESCAPE_SEQUENCE=7, WHITE=8, EOL=9, SINGLE_LINE_COMMENT=10, MULTI_LINE_COMMENT=11, 
		ANYCHAR=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"STOCK", "CHEW", "FROM", "IDENTIFIER", "THIN_ARROW", "STRING_LITERAL", 
		"ESCAPE_SEQUENCE", "WHITE", "EOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
		"ANYCHAR"
	};


	public BubblGumHeaderLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BubblGumHeaderLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'stock'", "'Chew'", "'from'", null, "'->'", null, null, null, "'\\r\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STOCK", "CHEW", "FROM", "IDENTIFIER", "THIN_ARROW", "STRING_LITERAL", 
		"ESCAPE_SEQUENCE", "WHITE", "EOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
		"ANYCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BubblGumHeader.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BubblGumHeaderLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,98,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,5,3,44,8,3,10,3,12,3,47,
		9,3,1,4,1,4,1,4,1,5,1,5,1,5,5,5,55,8,5,10,5,12,5,58,9,5,1,5,1,5,1,6,1,
		6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,5,9,76,8,9,10,9,12,9,
		79,9,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,87,8,10,10,10,12,10,90,9,10,1,
		10,1,10,1,10,1,10,1,10,1,11,1,11,1,88,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,
		90,95,95,97,122,2,0,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,
		110,114,114,116,116,3,0,9,10,13,13,32,32,2,0,10,10,13,13,102,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
		0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
		1,25,1,0,0,0,3,31,1,0,0,0,5,36,1,0,0,0,7,41,1,0,0,0,9,48,1,0,0,0,11,51,
		1,0,0,0,13,61,1,0,0,0,15,64,1,0,0,0,17,68,1,0,0,0,19,73,1,0,0,0,21,82,
		1,0,0,0,23,96,1,0,0,0,25,26,5,115,0,0,26,27,5,116,0,0,27,28,5,111,0,0,
		28,29,5,99,0,0,29,30,5,107,0,0,30,2,1,0,0,0,31,32,5,67,0,0,32,33,5,104,
		0,0,33,34,5,101,0,0,34,35,5,119,0,0,35,4,1,0,0,0,36,37,5,102,0,0,37,38,
		5,114,0,0,38,39,5,111,0,0,39,40,5,109,0,0,40,6,1,0,0,0,41,45,7,0,0,0,42,
		44,7,1,0,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,
		8,1,0,0,0,47,45,1,0,0,0,48,49,5,45,0,0,49,50,5,62,0,0,50,10,1,0,0,0,51,
		56,5,34,0,0,52,55,3,13,6,0,53,55,8,2,0,0,54,52,1,0,0,0,54,53,1,0,0,0,55,
		58,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,59,1,0,0,0,58,56,1,0,0,0,59,
		60,5,34,0,0,60,12,1,0,0,0,61,62,5,92,0,0,62,63,7,3,0,0,63,14,1,0,0,0,64,
		65,7,4,0,0,65,66,1,0,0,0,66,67,6,7,0,0,67,16,1,0,0,0,68,69,5,13,0,0,69,
		70,5,10,0,0,70,71,1,0,0,0,71,72,6,8,0,0,72,18,1,0,0,0,73,77,5,35,0,0,74,
		76,8,5,0,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,
		80,1,0,0,0,79,77,1,0,0,0,80,81,6,9,0,0,81,20,1,0,0,0,82,83,5,35,0,0,83,
		84,5,62,0,0,84,88,1,0,0,0,85,87,9,0,0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,
		89,1,0,0,0,88,86,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,92,5,60,0,0,92,
		93,5,35,0,0,93,94,1,0,0,0,94,95,6,10,0,0,95,22,1,0,0,0,96,97,9,0,0,0,97,
		24,1,0,0,0,6,0,45,54,56,77,88,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
