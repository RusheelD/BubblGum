//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Preprocessing/Parser/BubblGumHeader.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BubblGumHeaderLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STOCK=1, CHEW=2, IDENTIFIER=3, THIN_ARROW=4, STRING_LITERAL=5, ESCAPE_SEQUENCE=6, 
		WHITE=7, EOL=8, SINGLE_LINE_COMMENT=9, MULTI_LINE_COMMENT=10, ANYCHAR=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"STOCK", "CHEW", "IDENTIFIER", "THIN_ARROW", "STRING_LITERAL", "ESCAPE_SEQUENCE", 
		"WHITE", "EOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "ANYCHAR"
	};


	public BubblGumHeaderLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BubblGumHeaderLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'stock'", "'Chew'", null, "'->'", null, null, null, "'\\r\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STOCK", "CHEW", "IDENTIFIER", "THIN_ARROW", "STRING_LITERAL", "ESCAPE_SEQUENCE", 
		"WHITE", "EOL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "ANYCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BubblGumHeader.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BubblGumHeaderLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,91,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
		1,1,1,1,1,2,1,2,5,2,37,8,2,10,2,12,2,40,9,2,1,3,1,3,1,3,1,4,1,4,1,4,5,
		4,48,8,4,10,4,12,4,51,9,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,7,1,8,1,8,5,8,69,8,8,10,8,12,8,72,9,8,1,8,1,8,1,9,1,9,1,9,1,
		9,5,9,80,8,9,10,9,12,9,83,9,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,81,0,11,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,6,3,0,65,90,95,
		95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,92,92,8,0,34,34,39,39,
		92,92,98,98,102,102,110,110,114,114,116,116,3,0,9,10,13,13,32,32,2,0,10,
		10,13,13,95,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,1,23,1,0,0,0,3,29,1,0,0,0,5,34,1,0,0,0,7,41,1,0,0,0,9,44,1,0,0,
		0,11,54,1,0,0,0,13,57,1,0,0,0,15,61,1,0,0,0,17,66,1,0,0,0,19,75,1,0,0,
		0,21,89,1,0,0,0,23,24,5,115,0,0,24,25,5,116,0,0,25,26,5,111,0,0,26,27,
		5,99,0,0,27,28,5,107,0,0,28,2,1,0,0,0,29,30,5,67,0,0,30,31,5,104,0,0,31,
		32,5,101,0,0,32,33,5,119,0,0,33,4,1,0,0,0,34,38,7,0,0,0,35,37,7,1,0,0,
		36,35,1,0,0,0,37,40,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,6,1,0,0,0,40,
		38,1,0,0,0,41,42,5,45,0,0,42,43,5,62,0,0,43,8,1,0,0,0,44,49,5,34,0,0,45,
		48,3,11,5,0,46,48,8,2,0,0,47,45,1,0,0,0,47,46,1,0,0,0,48,51,1,0,0,0,49,
		47,1,0,0,0,49,50,1,0,0,0,50,52,1,0,0,0,51,49,1,0,0,0,52,53,5,34,0,0,53,
		10,1,0,0,0,54,55,5,92,0,0,55,56,7,3,0,0,56,12,1,0,0,0,57,58,7,4,0,0,58,
		59,1,0,0,0,59,60,6,6,0,0,60,14,1,0,0,0,61,62,5,13,0,0,62,63,5,10,0,0,63,
		64,1,0,0,0,64,65,6,7,0,0,65,16,1,0,0,0,66,70,5,35,0,0,67,69,8,5,0,0,68,
		67,1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,
		70,1,0,0,0,73,74,6,8,0,0,74,18,1,0,0,0,75,76,5,35,0,0,76,77,5,62,0,0,77,
		81,1,0,0,0,78,80,9,0,0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,82,1,0,0,0,81,
		79,1,0,0,0,82,84,1,0,0,0,83,81,1,0,0,0,84,85,5,60,0,0,85,86,5,35,0,0,86,
		87,1,0,0,0,87,88,6,9,0,0,88,20,1,0,0,0,89,90,9,0,0,0,90,22,1,0,0,0,6,0,
		38,47,49,70,81,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
